
C:\Users\Installer\Atollic\TrueSTUDIO\ARM_workspace_7.1\assign4.zip_expanded\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08005930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  20000070  080059a0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b8  080059a0  000201b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001147c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002182  00000000  00000000  0003151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009903  00000000  00000000  0003369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de0  00000000  00000000  0003cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf0  00000000  00000000  0003dd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005ed3  00000000  00000000  0003ea78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b4d  00000000  00000000  0004494b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00049498  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003030  00000000  00000000  00049518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005524 	.word	0x08005524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005524 	.word	0x08005524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b97e 	b.w	80008f4 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	468c      	mov	ip, r1
 8000616:	460e      	mov	r6, r1
 8000618:	4604      	mov	r4, r0
 800061a:	9d08      	ldr	r5, [sp, #32]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d150      	bne.n	80006c2 <__udivmoddi4+0xb2>
 8000620:	428a      	cmp	r2, r1
 8000622:	4617      	mov	r7, r2
 8000624:	d96c      	bls.n	8000700 <__udivmoddi4+0xf0>
 8000626:	fab2 fe82 	clz	lr, r2
 800062a:	f1be 0f00 	cmp.w	lr, #0
 800062e:	d00b      	beq.n	8000648 <__udivmoddi4+0x38>
 8000630:	f1ce 0420 	rsb	r4, lr, #32
 8000634:	fa20 f404 	lsr.w	r4, r0, r4
 8000638:	fa01 f60e 	lsl.w	r6, r1, lr
 800063c:	ea44 0c06 	orr.w	ip, r4, r6
 8000640:	fa02 f70e 	lsl.w	r7, r2, lr
 8000644:	fa00 f40e 	lsl.w	r4, r0, lr
 8000648:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800064c:	0c22      	lsrs	r2, r4, #16
 800064e:	fbbc f0f9 	udiv	r0, ip, r9
 8000652:	fa1f f887 	uxth.w	r8, r7
 8000656:	fb09 c610 	mls	r6, r9, r0, ip
 800065a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800065e:	fb00 f308 	mul.w	r3, r0, r8
 8000662:	42b3      	cmp	r3, r6
 8000664:	d909      	bls.n	800067a <__udivmoddi4+0x6a>
 8000666:	19f6      	adds	r6, r6, r7
 8000668:	f100 32ff 	add.w	r2, r0, #4294967295
 800066c:	f080 8122 	bcs.w	80008b4 <__udivmoddi4+0x2a4>
 8000670:	42b3      	cmp	r3, r6
 8000672:	f240 811f 	bls.w	80008b4 <__udivmoddi4+0x2a4>
 8000676:	3802      	subs	r0, #2
 8000678:	443e      	add	r6, r7
 800067a:	1af6      	subs	r6, r6, r3
 800067c:	b2a2      	uxth	r2, r4
 800067e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000682:	fb09 6613 	mls	r6, r9, r3, r6
 8000686:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800068a:	fb03 f808 	mul.w	r8, r3, r8
 800068e:	45a0      	cmp	r8, r4
 8000690:	d909      	bls.n	80006a6 <__udivmoddi4+0x96>
 8000692:	19e4      	adds	r4, r4, r7
 8000694:	f103 32ff 	add.w	r2, r3, #4294967295
 8000698:	f080 810a 	bcs.w	80008b0 <__udivmoddi4+0x2a0>
 800069c:	45a0      	cmp	r8, r4
 800069e:	f240 8107 	bls.w	80008b0 <__udivmoddi4+0x2a0>
 80006a2:	3b02      	subs	r3, #2
 80006a4:	443c      	add	r4, r7
 80006a6:	ebc8 0404 	rsb	r4, r8, r4
 80006aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006ae:	2100      	movs	r1, #0
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d062      	beq.n	800077a <__udivmoddi4+0x16a>
 80006b4:	fa24 f40e 	lsr.w	r4, r4, lr
 80006b8:	2300      	movs	r3, #0
 80006ba:	602c      	str	r4, [r5, #0]
 80006bc:	606b      	str	r3, [r5, #4]
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0xc6>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d055      	beq.n	8000776 <__udivmoddi4+0x166>
 80006ca:	2100      	movs	r1, #0
 80006cc:	e885 0041 	stmia.w	r5, {r0, r6}
 80006d0:	4608      	mov	r0, r1
 80006d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d6:	fab3 f183 	clz	r1, r3
 80006da:	2900      	cmp	r1, #0
 80006dc:	f040 8090 	bne.w	8000800 <__udivmoddi4+0x1f0>
 80006e0:	42b3      	cmp	r3, r6
 80006e2:	d302      	bcc.n	80006ea <__udivmoddi4+0xda>
 80006e4:	4282      	cmp	r2, r0
 80006e6:	f200 80f8 	bhi.w	80008da <__udivmoddi4+0x2ca>
 80006ea:	1a84      	subs	r4, r0, r2
 80006ec:	eb66 0603 	sbc.w	r6, r6, r3
 80006f0:	2001      	movs	r0, #1
 80006f2:	46b4      	mov	ip, r6
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d040      	beq.n	800077a <__udivmoddi4+0x16a>
 80006f8:	e885 1010 	stmia.w	r5, {r4, ip}
 80006fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000700:	b912      	cbnz	r2, 8000708 <__udivmoddi4+0xf8>
 8000702:	2701      	movs	r7, #1
 8000704:	fbb7 f7f2 	udiv	r7, r7, r2
 8000708:	fab7 fe87 	clz	lr, r7
 800070c:	f1be 0f00 	cmp.w	lr, #0
 8000710:	d135      	bne.n	800077e <__udivmoddi4+0x16e>
 8000712:	1bf3      	subs	r3, r6, r7
 8000714:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000718:	fa1f fc87 	uxth.w	ip, r7
 800071c:	2101      	movs	r1, #1
 800071e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000722:	0c22      	lsrs	r2, r4, #16
 8000724:	fb08 3610 	mls	r6, r8, r0, r3
 8000728:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800072c:	fb0c f300 	mul.w	r3, ip, r0
 8000730:	42b3      	cmp	r3, r6
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x134>
 8000734:	19f6      	adds	r6, r6, r7
 8000736:	f100 32ff 	add.w	r2, r0, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x132>
 800073c:	42b3      	cmp	r3, r6
 800073e:	f200 80ce 	bhi.w	80008de <__udivmoddi4+0x2ce>
 8000742:	4610      	mov	r0, r2
 8000744:	1af6      	subs	r6, r6, r3
 8000746:	b2a2      	uxth	r2, r4
 8000748:	fbb6 f3f8 	udiv	r3, r6, r8
 800074c:	fb08 6613 	mls	r6, r8, r3, r6
 8000750:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000754:	fb0c fc03 	mul.w	ip, ip, r3
 8000758:	45a4      	cmp	ip, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x15c>
 800075c:	19e4      	adds	r4, r4, r7
 800075e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x15a>
 8000764:	45a4      	cmp	ip, r4
 8000766:	f200 80b5 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 800076a:	4613      	mov	r3, r2
 800076c:	ebcc 0404 	rsb	r4, ip, r4
 8000770:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000774:	e79c      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000776:	4629      	mov	r1, r5
 8000778:	4628      	mov	r0, r5
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	f1ce 0120 	rsb	r1, lr, #32
 8000782:	fa06 f30e 	lsl.w	r3, r6, lr
 8000786:	fa07 f70e 	lsl.w	r7, r7, lr
 800078a:	fa20 f901 	lsr.w	r9, r0, r1
 800078e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000792:	40ce      	lsrs	r6, r1
 8000794:	ea49 0903 	orr.w	r9, r9, r3
 8000798:	fbb6 faf8 	udiv	sl, r6, r8
 800079c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80007a0:	fb08 661a 	mls	r6, r8, sl, r6
 80007a4:	fa1f fc87 	uxth.w	ip, r7
 80007a8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80007ac:	fb0a f20c 	mul.w	r2, sl, ip
 80007b0:	429a      	cmp	r2, r3
 80007b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80007b6:	d90a      	bls.n	80007ce <__udivmoddi4+0x1be>
 80007b8:	19db      	adds	r3, r3, r7
 80007ba:	f10a 31ff 	add.w	r1, sl, #4294967295
 80007be:	f080 8087 	bcs.w	80008d0 <__udivmoddi4+0x2c0>
 80007c2:	429a      	cmp	r2, r3
 80007c4:	f240 8084 	bls.w	80008d0 <__udivmoddi4+0x2c0>
 80007c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80007cc:	443b      	add	r3, r7
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	fa1f f989 	uxth.w	r9, r9
 80007d4:	fbb3 f1f8 	udiv	r1, r3, r8
 80007d8:	fb08 3311 	mls	r3, r8, r1, r3
 80007dc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80007e0:	fb01 f60c 	mul.w	r6, r1, ip
 80007e4:	429e      	cmp	r6, r3
 80007e6:	d907      	bls.n	80007f8 <__udivmoddi4+0x1e8>
 80007e8:	19db      	adds	r3, r3, r7
 80007ea:	f101 32ff 	add.w	r2, r1, #4294967295
 80007ee:	d26b      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 80007f0:	429e      	cmp	r6, r3
 80007f2:	d969      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 80007f4:	3902      	subs	r1, #2
 80007f6:	443b      	add	r3, r7
 80007f8:	1b9b      	subs	r3, r3, r6
 80007fa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80007fe:	e78e      	b.n	800071e <__udivmoddi4+0x10e>
 8000800:	f1c1 0e20 	rsb	lr, r1, #32
 8000804:	fa22 f40e 	lsr.w	r4, r2, lr
 8000808:	408b      	lsls	r3, r1
 800080a:	4323      	orrs	r3, r4
 800080c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000810:	fa06 f401 	lsl.w	r4, r6, r1
 8000814:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000818:	fa26 f60e 	lsr.w	r6, r6, lr
 800081c:	433c      	orrs	r4, r7
 800081e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000822:	0c27      	lsrs	r7, r4, #16
 8000824:	fb0c 6619 	mls	r6, ip, r9, r6
 8000828:	fa1f f883 	uxth.w	r8, r3
 800082c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000830:	fb09 f708 	mul.w	r7, r9, r8
 8000834:	42b7      	cmp	r7, r6
 8000836:	fa02 f201 	lsl.w	r2, r2, r1
 800083a:	fa00 fa01 	lsl.w	sl, r0, r1
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x242>
 8000840:	18f6      	adds	r6, r6, r3
 8000842:	f109 30ff 	add.w	r0, r9, #4294967295
 8000846:	d241      	bcs.n	80008cc <__udivmoddi4+0x2bc>
 8000848:	42b7      	cmp	r7, r6
 800084a:	d93f      	bls.n	80008cc <__udivmoddi4+0x2bc>
 800084c:	f1a9 0902 	sub.w	r9, r9, #2
 8000850:	441e      	add	r6, r3
 8000852:	1bf6      	subs	r6, r6, r7
 8000854:	b2a0      	uxth	r0, r4
 8000856:	fbb6 f4fc 	udiv	r4, r6, ip
 800085a:	fb0c 6614 	mls	r6, ip, r4, r6
 800085e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000862:	fb04 f808 	mul.w	r8, r4, r8
 8000866:	45b8      	cmp	r8, r7
 8000868:	d907      	bls.n	800087a <__udivmoddi4+0x26a>
 800086a:	18ff      	adds	r7, r7, r3
 800086c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000870:	d228      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 8000872:	45b8      	cmp	r8, r7
 8000874:	d926      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 8000876:	3c02      	subs	r4, #2
 8000878:	441f      	add	r7, r3
 800087a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800087e:	ebc8 0707 	rsb	r7, r8, r7
 8000882:	fba0 8902 	umull	r8, r9, r0, r2
 8000886:	454f      	cmp	r7, r9
 8000888:	4644      	mov	r4, r8
 800088a:	464e      	mov	r6, r9
 800088c:	d314      	bcc.n	80008b8 <__udivmoddi4+0x2a8>
 800088e:	d029      	beq.n	80008e4 <__udivmoddi4+0x2d4>
 8000890:	b365      	cbz	r5, 80008ec <__udivmoddi4+0x2dc>
 8000892:	ebba 0304 	subs.w	r3, sl, r4
 8000896:	eb67 0706 	sbc.w	r7, r7, r6
 800089a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800089e:	40cb      	lsrs	r3, r1
 80008a0:	40cf      	lsrs	r7, r1
 80008a2:	ea4e 0303 	orr.w	r3, lr, r3
 80008a6:	e885 0088 	stmia.w	r5, {r3, r7}
 80008aa:	2100      	movs	r1, #0
 80008ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b0:	4613      	mov	r3, r2
 80008b2:	e6f8      	b.n	80006a6 <__udivmoddi4+0x96>
 80008b4:	4610      	mov	r0, r2
 80008b6:	e6e0      	b.n	800067a <__udivmoddi4+0x6a>
 80008b8:	ebb8 0402 	subs.w	r4, r8, r2
 80008bc:	eb69 0603 	sbc.w	r6, r9, r3
 80008c0:	3801      	subs	r0, #1
 80008c2:	e7e5      	b.n	8000890 <__udivmoddi4+0x280>
 80008c4:	4604      	mov	r4, r0
 80008c6:	e7d8      	b.n	800087a <__udivmoddi4+0x26a>
 80008c8:	4611      	mov	r1, r2
 80008ca:	e795      	b.n	80007f8 <__udivmoddi4+0x1e8>
 80008cc:	4681      	mov	r9, r0
 80008ce:	e7c0      	b.n	8000852 <__udivmoddi4+0x242>
 80008d0:	468a      	mov	sl, r1
 80008d2:	e77c      	b.n	80007ce <__udivmoddi4+0x1be>
 80008d4:	3b02      	subs	r3, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	e748      	b.n	800076c <__udivmoddi4+0x15c>
 80008da:	4608      	mov	r0, r1
 80008dc:	e70a      	b.n	80006f4 <__udivmoddi4+0xe4>
 80008de:	3802      	subs	r0, #2
 80008e0:	443e      	add	r6, r7
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x134>
 80008e4:	45c2      	cmp	sl, r8
 80008e6:	d3e7      	bcc.n	80008b8 <__udivmoddi4+0x2a8>
 80008e8:	463e      	mov	r6, r7
 80008ea:	e7d1      	b.n	8000890 <__udivmoddi4+0x280>
 80008ec:	4629      	mov	r1, r5
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	bf00      	nop

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_InitTick+0x24>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <HAL_InitTick+0x28>)
 8000902:	fba0 3003 	umull	r3, r0, r0, r3
 8000906:	0980      	lsrs	r0, r0, #6
 8000908:	f000 f876 	bl	80009f8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800090c:	2200      	movs	r2, #0
 800090e:	4621      	mov	r1, r4
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f83e 	bl	8000994 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000918:	2000      	movs	r0, #0
 800091a:	bd10      	pop	{r4, pc}
 800091c:	20000004 	.word	0x20000004
 8000920:	10624dd3 	.word	0x10624dd3

08000924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000926:	2003      	movs	r0, #3
 8000928:	f000 f822 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffe3 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000932:	f002 fd31 	bl	8003398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000936:	2000      	movs	r0, #0
 8000938:	bd08      	pop	{r3, pc}
 800093a:	bf00      	nop

0800093c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800093c:	4a02      	ldr	r2, [pc, #8]	; (8000948 <HAL_IncTick+0xc>)
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000009c 	.word	0x2000009c

0800094c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <HAL_GetTick+0x8>)
 800094e:	6818      	ldr	r0, [r3, #0]
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4605      	mov	r5, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800095c:	f7ff fff6 	bl	800094c <HAL_GetTick>
 8000960:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000962:	f7ff fff3 	bl	800094c <HAL_GetTick>
 8000966:	1b00      	subs	r0, r0, r4
 8000968:	42a8      	cmp	r0, r5
 800096a:	d3fa      	bcc.n	8000962 <HAL_Delay+0xa>
  {
  }
}
 800096c:	bd38      	pop	{r3, r4, r5, pc}
 800096e:	bf00      	nop

08000970 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000972:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000974:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000978:	041b      	lsls	r3, r3, #16
 800097a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800097c:	0200      	lsls	r0, r0, #8
 800097e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000982:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000984:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000988:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800098c:	60d0      	str	r0, [r2, #12]
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_NVIC_SetPriority+0x5c>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099e:	f1c3 0407 	rsb	r4, r3, #7
 80009a2:	2c04      	cmp	r4, #4
 80009a4:	bf28      	it	cs
 80009a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a8:	1d1d      	adds	r5, r3, #4
 80009aa:	2d06      	cmp	r5, #6
 80009ac:	d901      	bls.n	80009b2 <HAL_NVIC_SetPriority+0x1e>
 80009ae:	1edd      	subs	r5, r3, #3
 80009b0:	e000      	b.n	80009b4 <HAL_NVIC_SetPriority+0x20>
 80009b2:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	2301      	movs	r3, #1
 80009b6:	fa03 f404 	lsl.w	r4, r3, r4
 80009ba:	3c01      	subs	r4, #1
 80009bc:	4021      	ands	r1, r4
 80009be:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	40ab      	lsls	r3, r5
 80009c2:	3b01      	subs	r3, #1
 80009c4:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80009c6:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80009c8:	2800      	cmp	r0, #0
 80009ca:	da06      	bge.n	80009da <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	f000 000f 	and.w	r0, r0, #15
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_NVIC_SetPriority+0x60>)
 80009d6:	541a      	strb	r2, [r3, r0]
 80009d8:	e007      	b.n	80009ea <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009e2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009e6:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009ea:	bc30      	pop	{r4, r5}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	e000ed14 	.word	0xe000ed14

080009f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	3801      	subs	r0, #1
 80009fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009fe:	d20a      	bcs.n	8000a16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_SYSTICK_Config+0x24>)
 8000a02:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	21f0      	movs	r1, #240	; 0xf0
 8000a06:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_SYSTICK_Config+0x28>)
 8000a08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a24:	2804      	cmp	r0, #4
 8000a26:	d105      	bne.n	8000a34 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a34:	4a02      	ldr	r2, [pc, #8]	; (8000a40 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f023 0304 	bic.w	r3, r3, #4
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	4770      	bx	lr
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a48:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a4a:	f7ff fffb 	bl	8000a44 <HAL_SYSTICK_Callback>
 8000a4e:	bd08      	pop	{r3, pc}

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8000a54:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a56:	e0a9      	b.n	8000bac <HAL_GPIO_Init+0x15c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a58:	2401      	movs	r4, #1
 8000a5a:	409c      	lsls	r4, r3

    if(iocurrent)
 8000a5c:	4022      	ands	r2, r4
 8000a5e:	f000 80a4 	beq.w	8000baa <HAL_GPIO_Init+0x15a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a62:	684d      	ldr	r5, [r1, #4]
 8000a64:	2d02      	cmp	r5, #2
 8000a66:	d001      	beq.n	8000a6c <HAL_GPIO_Init+0x1c>
 8000a68:	2d12      	cmp	r5, #18
 8000a6a:	d110      	bne.n	8000a8e <HAL_GPIO_Init+0x3e>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a6c:	08de      	lsrs	r6, r3, #3
 8000a6e:	3608      	adds	r6, #8
 8000a70:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a74:	f003 0507 	and.w	r5, r3, #7
 8000a78:	00af      	lsls	r7, r5, #2
 8000a7a:	250f      	movs	r5, #15
 8000a7c:	40bd      	lsls	r5, r7
 8000a7e:	ea2c 0e05 	bic.w	lr, ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a82:	690d      	ldr	r5, [r1, #16]
 8000a84:	40bd      	lsls	r5, r7
 8000a86:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3] = temp;
 8000a8a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000a90:	005f      	lsls	r7, r3, #1
 8000a92:	2603      	movs	r6, #3
 8000a94:	40be      	lsls	r6, r7
 8000a96:	43f6      	mvns	r6, r6
 8000a98:	ea05 0e06 	and.w	lr, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a9c:	684d      	ldr	r5, [r1, #4]
 8000a9e:	f005 0503 	and.w	r5, r5, #3
 8000aa2:	40bd      	lsls	r5, r7
 8000aa4:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8000aa8:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aaa:	684d      	ldr	r5, [r1, #4]
 8000aac:	f105 3eff 	add.w	lr, r5, #4294967295
 8000ab0:	f1be 0f01 	cmp.w	lr, #1
 8000ab4:	d903      	bls.n	8000abe <HAL_GPIO_Init+0x6e>
 8000ab6:	2d11      	cmp	r5, #17
 8000ab8:	d001      	beq.n	8000abe <HAL_GPIO_Init+0x6e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aba:	2d12      	cmp	r5, #18
 8000abc:	d110      	bne.n	8000ae0 <HAL_GPIO_Init+0x90>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000abe:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000ac0:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ac4:	68cd      	ldr	r5, [r1, #12]
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->OSPEEDR = temp;
 8000acc:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ace:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ad0:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad4:	684d      	ldr	r5, [r1, #4]
 8000ad6:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8000ada:	409d      	lsls	r5, r3
 8000adc:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8000ade:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae0:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000ae2:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ae4:	688c      	ldr	r4, [r1, #8]
 8000ae6:	40bc      	lsls	r4, r7
 8000ae8:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000aea:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aec:	684c      	ldr	r4, [r1, #4]
 8000aee:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000af2:	d05a      	beq.n	8000baa <HAL_GPIO_Init+0x15a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	4c31      	ldr	r4, [pc, #196]	; (8000bbc <HAL_GPIO_Init+0x16c>)
 8000af6:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000af8:	f045 0501 	orr.w	r5, r5, #1
 8000afc:	6625      	str	r5, [r4, #96]	; 0x60
 8000afe:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8000b00:	f004 0401 	and.w	r4, r4, #1
 8000b04:	9401      	str	r4, [sp, #4]
 8000b06:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b08:	089e      	lsrs	r6, r3, #2
 8000b0a:	1cb5      	adds	r5, r6, #2
 8000b0c:	4c2c      	ldr	r4, [pc, #176]	; (8000bc0 <HAL_GPIO_Init+0x170>)
 8000b0e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b12:	f003 0403 	and.w	r4, r3, #3
 8000b16:	00a4      	lsls	r4, r4, #2
 8000b18:	270f      	movs	r7, #15
 8000b1a:	40a7      	lsls	r7, r4
 8000b1c:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000b20:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000b24:	d008      	beq.n	8000b38 <HAL_GPIO_Init+0xe8>
 8000b26:	4d27      	ldr	r5, [pc, #156]	; (8000bc4 <HAL_GPIO_Init+0x174>)
 8000b28:	42a8      	cmp	r0, r5
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0xec>
 8000b2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	d105      	bne.n	8000b40 <HAL_GPIO_Init+0xf0>
 8000b34:	2502      	movs	r5, #2
 8000b36:	e004      	b.n	8000b42 <HAL_GPIO_Init+0xf2>
 8000b38:	2500      	movs	r5, #0
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0xf2>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	e000      	b.n	8000b42 <HAL_GPIO_Init+0xf2>
 8000b40:	2507      	movs	r5, #7
 8000b42:	fa05 f404 	lsl.w	r4, r5, r4
 8000b46:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b48:	3602      	adds	r6, #2
 8000b4a:	4d1d      	ldr	r5, [pc, #116]	; (8000bc0 <HAL_GPIO_Init+0x170>)
 8000b4c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b50:	4c1d      	ldr	r4, [pc, #116]	; (8000bc8 <HAL_GPIO_Init+0x178>)
 8000b52:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b54:	43d4      	mvns	r4, r2
 8000b56:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5a:	684f      	ldr	r7, [r1, #4]
 8000b5c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b60:	d001      	beq.n	8000b66 <HAL_GPIO_Init+0x116>
        {
          temp |= iocurrent;
 8000b62:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8000b66:	4d18      	ldr	r5, [pc, #96]	; (8000bc8 <HAL_GPIO_Init+0x178>)
 8000b68:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8000b6a:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b6c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b70:	684f      	ldr	r7, [r1, #4]
 8000b72:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b76:	d001      	beq.n	8000b7c <HAL_GPIO_Init+0x12c>
        {
          temp |= iocurrent;
 8000b78:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000b7c:	4d12      	ldr	r5, [pc, #72]	; (8000bc8 <HAL_GPIO_Init+0x178>)
 8000b7e:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b80:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b82:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b86:	684f      	ldr	r7, [r1, #4]
 8000b88:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b8c:	d001      	beq.n	8000b92 <HAL_GPIO_Init+0x142>
        {
          temp |= iocurrent;
 8000b8e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000b92:	4d0d      	ldr	r5, [pc, #52]	; (8000bc8 <HAL_GPIO_Init+0x178>)
 8000b94:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000b96:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b98:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9a:	684e      	ldr	r6, [r1, #4]
 8000b9c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ba0:	d001      	beq.n	8000ba6 <HAL_GPIO_Init+0x156>
        {
          temp |= iocurrent;
 8000ba2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_GPIO_Init+0x178>)
 8000ba8:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000baa:	3301      	adds	r3, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000bac:	680a      	ldr	r2, [r1, #0]
 8000bae:	fa32 f403 	lsrs.w	r4, r2, r3
 8000bb2:	f47f af51 	bne.w	8000a58 <HAL_GPIO_Init+0x8>
      }
    }
    
    position++;
  }
}
 8000bb6:	b003      	add	sp, #12
 8000bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	40010400 	.word	0x40010400

08000bcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bcc:	6903      	ldr	r3, [r0, #16]
 8000bce:	4219      	tst	r1, r3
 8000bd0:	d001      	beq.n	8000bd6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bd6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	b10a      	cbz	r2, 8000be2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bde:	6181      	str	r1, [r0, #24]
 8000be0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be2:	6281      	str	r1, [r0, #40]	; 0x28
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <HAL_PWREx_GetVoltageRange+0xc>)
 8000bea:	6818      	ldr	r0, [r3, #0]
}
 8000bec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000bfc:	d12a      	bne.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x5c>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c0a:	d033      	beq.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x7c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c18:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000c22:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8000c26:	f202 2283 	addw	r2, r2, #643	; 0x283
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9a      	lsrs	r2, r3, #18
 8000c30:	2332      	movs	r3, #50	; 0x32
 8000c32:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000c36:	e000      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8000c38:	3b01      	subs	r3, #1
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000c3a:	b123      	cbz	r3, 8000c46 <HAL_PWREx_ControlVoltageScaling+0x4e>
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c3e:	6952      	ldr	r2, [r2, #20]
 8000c40:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000c44:	d1f8      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000c4e:	d013      	beq.n	8000c78 <HAL_PWREx_ControlVoltageScaling+0x80>
      {
        return HAL_TIMEOUT;
 8000c50:	2003      	movs	r0, #3
 8000c52:	4770      	bx	lr
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c60:	d00c      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c62:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr
 8000c74:	2000      	movs	r0, #0
 8000c76:	4770      	bx	lr
 8000c78:	2000      	movs	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	2000      	movs	r0, #0
}  
 8000c7e:	4770      	bx	lr
 8000c80:	40007000 	.word	0x40007000
 8000c84:	20000004 	.word	0x20000004

08000c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000c88:	b530      	push	{r4, r5, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c96:	d002      	beq.n	8000c9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000c98:	f7ff ffa6 	bl	8000be8 <HAL_PWREx_GetVoltageRange>
 8000c9c:	e00f      	b.n	8000cbe <RCC_SetFlashLatencyFromMSIRange+0x36>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4c1c      	ldr	r4, [pc, #112]	; (8000d10 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000cb2:	f7ff ff99 	bl	8000be8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	65a3      	str	r3, [r4, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cbe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000cc2:	d105      	bne.n	8000cd0 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000cc4:	2d80      	cmp	r5, #128	; 0x80
 8000cc6:	d90a      	bls.n	8000cde <RCC_SetFlashLatencyFromMSIRange+0x56>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000cc8:	2da0      	cmp	r5, #160	; 0xa0
 8000cca:	d90a      	bls.n	8000ce2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ccc:	2102      	movs	r1, #2
 8000cce:	e00f      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8000cd0:	2d80      	cmp	r5, #128	; 0x80
 8000cd2:	d808      	bhi.n	8000ce6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000cd4:	d009      	beq.n	8000cea <RCC_SetFlashLatencyFromMSIRange+0x62>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8000cd6:	2d70      	cmp	r5, #112	; 0x70
 8000cd8:	d009      	beq.n	8000cee <RCC_SetFlashLatencyFromMSIRange+0x66>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e008      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e006      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	e004      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	e002      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
    else
    {
      if(msirange == RCC_MSIRANGE_8)
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000cea:	2102      	movs	r1, #2
 8000cec:	e000      	b.n	8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x68>
      }
      else if(msirange == RCC_MSIRANGE_7) 
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000cee:	2101      	movs	r1, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	f023 0307 	bic.w	r3, r3, #7
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d001      	beq.n	8000d0a <RCC_SetFlashLatencyFromMSIRange+0x82>
  {
    return HAL_ERROR;
 8000d06:	2001      	movs	r0, #1
 8000d08:	e000      	b.n	8000d0c <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  
  return HAL_OK;
 8000d0a:	2000      	movs	r0, #0
}
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd30      	pop	{r4, r5, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40022000 	.word	0x40022000

08000d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d18:	b410      	push	{r4}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f013 0f0c 	tst.w	r3, #12
 8000d22:	d00b      	beq.n	8000d3c <HAL_RCC_GetSysClockFreq+0x24>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 030c 	and.w	r3, r3, #12
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	d12d      	bne.n	8000d8c <HAL_RCC_GetSysClockFreq+0x74>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000d30:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d127      	bne.n	8000d8c <HAL_RCC_GetSysClockFreq+0x74>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000d3c:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f013 0f08 	tst.w	r3, #8
 8000d44:	d10d      	bne.n	8000d62 <HAL_RCC_GetSysClockFreq+0x4a>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d4c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d50:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d54:	fa93 f3a3 	rbit	r3, r3
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	e00a      	b.n	8000d78 <HAL_RCC_GetSysClockFreq+0x60>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000d6a:	23f0      	movs	r3, #240	; 0xf0
 8000d6c:	fa93 f3a3 	rbit	r3, r3
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000d78:	4a41      	ldr	r2, [pc, #260]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x168>)
 8000d7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f013 0f0c 	tst.w	r3, #12
 8000d86:	d010      	beq.n	8000daa <HAL_RCC_GetSysClockFreq+0x92>
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e015      	b.n	8000db8 <HAL_RCC_GetSysClockFreq+0xa0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00a      	beq.n	8000dae <HAL_RCC_GetSysClockFreq+0x96>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d007      	beq.n	8000db4 <HAL_RCC_GetSysClockFreq+0x9c>
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;
 8000da4:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000da6:	4604      	mov	r4, r0
 8000da8:	e006      	b.n	8000db8 <HAL_RCC_GetSysClockFreq+0xa0>
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000daa:	4620      	mov	r0, r4
 8000dac:	e004      	b.n	8000db8 <HAL_RCC_GetSysClockFreq+0xa0>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000dae:	4835      	ldr	r0, [pc, #212]	; (8000e84 <HAL_RCC_GetSysClockFreq+0x16c>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000db0:	2400      	movs	r4, #0
 8000db2:	e001      	b.n	8000db8 <HAL_RCC_GetSysClockFreq+0xa0>
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000db4:	4834      	ldr	r0, [pc, #208]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x170>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000db6:	2400      	movs	r4, #0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000db8:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000dba:	6892      	ldr	r2, [r2, #8]
 8000dbc:	f002 020c 	and.w	r2, r2, #12
 8000dc0:	2a0c      	cmp	r2, #12
 8000dc2:	d157      	bne.n	8000e74 <HAL_RCC_GetSysClockFreq+0x15c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000dc6:	68d9      	ldr	r1, [r3, #12]
 8000dc8:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000dd2:	2370      	movs	r3, #112	; 0x70
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	3301      	adds	r3, #1

    switch (pllsource)
 8000de2:	2902      	cmp	r1, #2
 8000de4:	d002      	beq.n	8000dec <HAL_RCC_GetSysClockFreq+0xd4>
 8000de6:	2903      	cmp	r1, #3
 8000de8:	d012      	beq.n	8000e10 <HAL_RCC_GetSysClockFreq+0xf8>
 8000dea:	e023      	b.n	8000e34 <HAL_RCC_GetSysClockFreq+0x11c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000dec:	4825      	ldr	r0, [pc, #148]	; (8000e84 <HAL_RCC_GetSysClockFreq+0x16c>)
 8000dee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8000dfa:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000dfe:	fa91 f1a1 	rbit	r1, r1
 8000e02:	fab1 f181 	clz	r1, r1
 8000e06:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0a:	fb03 f300 	mul.w	r3, r3, r0
      break;
 8000e0e:	e021      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x13c>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000e10:	481d      	ldr	r0, [pc, #116]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x170>)
 8000e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e16:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000e18:	68d2      	ldr	r2, [r2, #12]
 8000e1a:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8000e1e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000e22:	fa92 f2a2 	rbit	r2, r2
 8000e26:	fab2 f282 	clz	r2, r2
 8000e2a:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
      break;
 8000e32:	e00f      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x13c>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000e34:	fbb4 f3f3 	udiv	r3, r4, r3
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000e3a:	68d2      	ldr	r2, [r2, #12]
 8000e3c:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8000e40:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000e44:	fa92 f2a2 	rbit	r2, r2
 8000e48:	fab2 f282 	clz	r2, r2
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x164>)
 8000e56:	68d0      	ldr	r0, [r2, #12]
 8000e58:	f000 62c0 	and.w	r2, r0, #100663296	; 0x6000000
 8000e5c:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8000e60:	fa90 f0a0 	rbit	r0, r0
 8000e64:	fab0 f080 	clz	r0, r0
 8000e68:	fa22 f000 	lsr.w	r0, r2, r0
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco/pllr;
 8000e70:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	08005738 	.word	0x08005738
 8000e84:	00f42400 	.word	0x00f42400
 8000e88:	007a1200 	.word	0x007a1200

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e92:	6803      	ldr	r3, [r0, #0]
 8000e94:	f013 0f10 	tst.w	r3, #16
 8000e98:	f000 80a4 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x158>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000e9c:	4bac      	ldr	r3, [pc, #688]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f013 0f0c 	tst.w	r3, #12
 8000ea4:	d161      	bne.n	8000f6a <HAL_RCC_OscConfig+0xde>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea6:	4baa      	ldr	r3, [pc, #680]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f013 0f02 	tst.w	r3, #2
 8000eae:	d003      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x2c>
 8000eb0:	6983      	ldr	r3, [r0, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 82ce 	beq.w	8001454 <HAL_RCC_OscConfig+0x5c8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb8:	6a20      	ldr	r0, [r4, #32]
 8000eba:	4ba5      	ldr	r3, [pc, #660]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f013 0f08 	tst.w	r3, #8
 8000ec2:	d004      	beq.n	8000ece <HAL_RCC_OscConfig+0x42>
 8000ec4:	4ba2      	ldr	r3, [pc, #648]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ecc:	e005      	b.n	8000eda <HAL_RCC_OscConfig+0x4e>
 8000ece:	4ba0      	ldr	r3, [pc, #640]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eda:	4283      	cmp	r3, r0
 8000edc:	d217      	bcs.n	8000f0e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ede:	f7ff fed3 	bl	8000c88 <RCC_SetFlashLatencyFromMSIRange>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f040 82b8 	bne.w	8001458 <HAL_RCC_OscConfig+0x5cc>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee8:	4b99      	ldr	r3, [pc, #612]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f042 0208 	orr.w	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000ef8:	6a22      	ldr	r2, [r4, #32]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f04:	69e1      	ldr	r1, [r4, #28]
 8000f06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	e017      	b.n	8000f3e <HAL_RCC_OscConfig+0xb2>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f0e:	4b90      	ldr	r3, [pc, #576]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f042 0208 	orr.w	r2, r2, #8
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000f1e:	6a22      	ldr	r2, [r4, #32]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f2a:	69e1      	ldr	r1, [r4, #28]
 8000f2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f30:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f32:	6a20      	ldr	r0, [r4, #32]
 8000f34:	f7ff fea8 	bl	8000c88 <RCC_SetFlashLatencyFromMSIRange>
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	f040 828f 	bne.w	800145c <HAL_RCC_OscConfig+0x5d0>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f3e:	f7ff feeb 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
 8000f42:	4b83      	ldr	r3, [pc, #524]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f4a:	23f0      	movs	r3, #240	; 0xf0
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	4a7e      	ldr	r2, [pc, #504]	; (8001154 <HAL_RCC_OscConfig+0x2c8>)
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	40d8      	lsrs	r0, r3
 8000f5e:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <HAL_RCC_OscConfig+0x2cc>)
 8000f60:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fcc8 	bl	80008f8 <HAL_InitTick>
 8000f68:	e03c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x158>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6a:	6983      	ldr	r3, [r0, #24]
 8000f6c:	b333      	cbz	r3, 8000fbc <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f6e:	4a78      	ldr	r2, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fce8 	bl	800094c <HAL_GetTick>
 8000f7c:	4605      	mov	r5, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f7e:	e005      	b.n	8000f8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f80:	f7ff fce4 	bl	800094c <HAL_GetTick>
 8000f84:	1b40      	subs	r0, r0, r5
 8000f86:	2802      	cmp	r0, #2
 8000f88:	f200 826a 	bhi.w	8001460 <HAL_RCC_OscConfig+0x5d4>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f8c:	4b70      	ldr	r3, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	d0f4      	beq.n	8000f80 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f96:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f042 0208 	orr.w	r2, r2, #8
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000fa6:	6a22      	ldr	r2, [r4, #32]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000fb2:	69e1      	ldr	r1, [r4, #28]
 8000fb4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	e013      	b.n	8000fe4 <HAL_RCC_OscConfig+0x158>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fbc:	4a64      	ldr	r2, [pc, #400]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fcc1 	bl	800094c <HAL_GetTick>
 8000fca:	4605      	mov	r5, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000fcc:	e005      	b.n	8000fda <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fce:	f7ff fcbd 	bl	800094c <HAL_GetTick>
 8000fd2:	1b40      	subs	r0, r0, r5
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	f200 8245 	bhi.w	8001464 <HAL_RCC_OscConfig+0x5d8>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f013 0f02 	tst.w	r3, #2
 8000fe2:	d1f4      	bne.n	8000fce <HAL_RCC_OscConfig+0x142>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	f013 0f01 	tst.w	r3, #1
 8000fea:	d05e      	beq.n	80010aa <HAL_RCC_OscConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000fec:	4b58      	ldr	r3, [pc, #352]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d00b      	beq.n	8001010 <HAL_RCC_OscConfig+0x184>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff8:	4b55      	ldr	r3, [pc, #340]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d10e      	bne.n	8001022 <HAL_RCC_OscConfig+0x196>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d108      	bne.n	8001022 <HAL_RCC_OscConfig+0x196>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001018:	d047      	beq.n	80010aa <HAL_RCC_OscConfig+0x21e>
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d144      	bne.n	80010aa <HAL_RCC_OscConfig+0x21e>
 8001020:	e222      	b.n	8001468 <HAL_RCC_OscConfig+0x5dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001022:	6863      	ldr	r3, [r4, #4]
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d105      	bne.n	8001036 <HAL_RCC_OscConfig+0x1aa>
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e018      	b.n	8001068 <HAL_RCC_OscConfig+0x1dc>
 8001036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0x1ca>
 800103c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001040:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x1dc>
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001066:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	b17b      	cbz	r3, 800108c <HAL_RCC_OscConfig+0x200>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fc6e 	bl	800094c <HAL_GetTick>
 8001070:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001072:	e005      	b.n	8001080 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fc6a 	bl	800094c <HAL_GetTick>
 8001078:	1b40      	subs	r0, r0, r5
 800107a:	2864      	cmp	r0, #100	; 0x64
 800107c:	f200 81f6 	bhi.w	800146c <HAL_RCC_OscConfig+0x5e0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001088:	d0f4      	beq.n	8001074 <HAL_RCC_OscConfig+0x1e8>
 800108a:	e00e      	b.n	80010aa <HAL_RCC_OscConfig+0x21e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc5e 	bl	800094c <HAL_GetTick>
 8001090:	4605      	mov	r5, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001092:	e005      	b.n	80010a0 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fc5a 	bl	800094c <HAL_GetTick>
 8001098:	1b40      	subs	r0, r0, r5
 800109a:	2864      	cmp	r0, #100	; 0x64
 800109c:	f200 81e8 	bhi.w	8001470 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010a8:	d1f4      	bne.n	8001094 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f013 0f02 	tst.w	r3, #2
 80010b0:	d068      	beq.n	8001184 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80010c6:	2b0c      	cmp	r3, #12
 80010c8:	d11d      	bne.n	8001106 <HAL_RCC_OscConfig+0x27a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d117      	bne.n	8001106 <HAL_RCC_OscConfig+0x27a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010de:	d003      	beq.n	80010e8 <HAL_RCC_OscConfig+0x25c>
 80010e0:	68e3      	ldr	r3, [r4, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 81c6 	beq.w	8001474 <HAL_RCC_OscConfig+0x5e8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 80010ea:	6843      	ldr	r3, [r0, #4]
 80010ec:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	4093      	lsls	r3, r2
 8001100:	430b      	orrs	r3, r1
 8001102:	6043      	str	r3, [r0, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001104:	e03e      	b.n	8001184 <HAL_RCC_OscConfig+0x2f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001106:	68e3      	ldr	r3, [r4, #12]
 8001108:	b343      	cbz	r3, 800115c <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc1a 	bl	800094c <HAL_GetTick>
 8001118:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800111a:	e005      	b.n	8001128 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fc16 	bl	800094c <HAL_GetTick>
 8001120:	1b40      	subs	r0, r0, r5
 8001122:	2802      	cmp	r0, #2
 8001124:	f200 81a8 	bhi.w	8001478 <HAL_RCC_OscConfig+0x5ec>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001130:	d0f4      	beq.n	800111c <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <HAL_RCC_OscConfig+0x2c4>)
 8001134:	6843      	ldr	r3, [r0, #4]
 8001136:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800113a:	6923      	ldr	r3, [r4, #16]
 800113c:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8001140:	fa92 f2a2 	rbit	r2, r2
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	4093      	lsls	r3, r2
 800114a:	430b      	orrs	r3, r1
 800114c:	6043      	str	r3, [r0, #4]
 800114e:	e019      	b.n	8001184 <HAL_RCC_OscConfig+0x2f8>
 8001150:	40021000 	.word	0x40021000
 8001154:	08005720 	.word	0x08005720
 8001158:	20000004 	.word	0x20000004
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115c:	4abb      	ldr	r2, [pc, #748]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fbf1 	bl	800094c <HAL_GetTick>
 800116a:	4605      	mov	r5, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800116c:	e005      	b.n	800117a <HAL_RCC_OscConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fbed 	bl	800094c <HAL_GetTick>
 8001172:	1b40      	subs	r0, r0, r5
 8001174:	2802      	cmp	r0, #2
 8001176:	f200 8181 	bhi.w	800147c <HAL_RCC_OscConfig+0x5f0>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800117a:	4bb4      	ldr	r3, [pc, #720]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001182:	d1f4      	bne.n	800116e <HAL_RCC_OscConfig+0x2e2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f013 0f08 	tst.w	r3, #8
 800118a:	d030      	beq.n	80011ee <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118c:	6963      	ldr	r3, [r4, #20]
 800118e:	b1bb      	cbz	r3, 80011c0 <HAL_RCC_OscConfig+0x334>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001190:	4aae      	ldr	r2, [pc, #696]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001192:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fbd5 	bl	800094c <HAL_GetTick>
 80011a2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80011a4:	e005      	b.n	80011b2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fbd1 	bl	800094c <HAL_GetTick>
 80011aa:	1b40      	subs	r0, r0, r5
 80011ac:	2802      	cmp	r0, #2
 80011ae:	f200 8167 	bhi.w	8001480 <HAL_RCC_OscConfig+0x5f4>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80011b2:	4ba6      	ldr	r3, [pc, #664]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80011b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b8:	f013 0f02 	tst.w	r3, #2
 80011bc:	d0f3      	beq.n	80011a6 <HAL_RCC_OscConfig+0x31a>
 80011be:	e016      	b.n	80011ee <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4aa2      	ldr	r2, [pc, #648]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80011c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff fbbd 	bl	800094c <HAL_GetTick>
 80011d2:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80011d4:	e005      	b.n	80011e2 <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fbb9 	bl	800094c <HAL_GetTick>
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	2802      	cmp	r0, #2
 80011de:	f200 8151 	bhi.w	8001484 <HAL_RCC_OscConfig+0x5f8>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80011e2:	4b9a      	ldr	r3, [pc, #616]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	f013 0f02 	tst.w	r3, #2
 80011ec:	d1f3      	bne.n	80011d6 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	f013 0f04 	tst.w	r3, #4
 80011f4:	d07f      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011f6:	4b95      	ldr	r3, [pc, #596]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x38c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001208:	659a      	str	r2, [r3, #88]	; 0x58
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001214:	2501      	movs	r5, #1
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x38e>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001218:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121a:	4b8d      	ldr	r3, [pc, #564]	; (8001450 <HAL_RCC_OscConfig+0x5c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001222:	d113      	bne.n	800124c <HAL_RCC_OscConfig+0x3c0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001224:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x5c4>)
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb8d 	bl	800094c <HAL_GetTick>
 8001232:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001234:	e005      	b.n	8001242 <HAL_RCC_OscConfig+0x3b6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fb89 	bl	800094c <HAL_GetTick>
 800123a:	1b80      	subs	r0, r0, r6
 800123c:	2802      	cmp	r0, #2
 800123e:	f200 8123 	bhi.w	8001488 <HAL_RCC_OscConfig+0x5fc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_RCC_OscConfig+0x5c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f413 7f80 	tst.w	r3, #256	; 0x100
 800124a:	d0f4      	beq.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	68a3      	ldr	r3, [r4, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_OscConfig+0x3d6>
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001254:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0x410>
 8001262:	2b05      	cmp	r3, #5
 8001264:	d10d      	bne.n	8001282 <HAL_RCC_OscConfig+0x3f6>
 8001266:	4b79      	ldr	r3, [pc, #484]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001268:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800126c:	f042 0204 	orr.w	r2, r2, #4
 8001270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001274:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001280:	e00c      	b.n	800129c <HAL_RCC_OscConfig+0x410>
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001284:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001290:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001294:	f022 0204 	bic.w	r2, r2, #4
 8001298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129c:	68a3      	ldr	r3, [r4, #8]
 800129e:	b193      	cbz	r3, 80012c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fb54 	bl	800094c <HAL_GetTick>
 80012a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80012a6:	e007      	b.n	80012b8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f7ff fb50 	bl	800094c <HAL_GetTick>
 80012ac:	1b80      	subs	r0, r0, r6
 80012ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b2:	4298      	cmp	r0, r3
 80012b4:	f200 80ea 	bhi.w	800148c <HAL_RCC_OscConfig+0x600>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	f013 0f02 	tst.w	r3, #2
 80012c2:	d0f1      	beq.n	80012a8 <HAL_RCC_OscConfig+0x41c>
 80012c4:	e011      	b.n	80012ea <HAL_RCC_OscConfig+0x45e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c6:	f7ff fb41 	bl	800094c <HAL_GetTick>
 80012ca:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80012cc:	e007      	b.n	80012de <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fb3d 	bl	800094c <HAL_GetTick>
 80012d2:	1b80      	subs	r0, r0, r6
 80012d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d8:	4298      	cmp	r0, r3
 80012da:	f200 80d9 	bhi.w	8001490 <HAL_RCC_OscConfig+0x604>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80012de:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e4:	f013 0f02 	tst.w	r3, #2
 80012e8:	d1f1      	bne.n	80012ce <HAL_RCC_OscConfig+0x442>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ea:	b125      	cbz	r5, 80012f6 <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80012ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	f013 0f20 	tst.w	r3, #32
 80012fc:	d030      	beq.n	8001360 <HAL_RCC_OscConfig+0x4d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001300:	b1bb      	cbz	r3, 8001332 <HAL_RCC_OscConfig+0x4a6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001304:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fb1c 	bl	800094c <HAL_GetTick>
 8001314:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001316:	e005      	b.n	8001324 <HAL_RCC_OscConfig+0x498>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001318:	f7ff fb18 	bl	800094c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2802      	cmp	r0, #2
 8001320:	f200 80b8 	bhi.w	8001494 <HAL_RCC_OscConfig+0x608>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800132a:	f013 0f02 	tst.w	r3, #2
 800132e:	d0f3      	beq.n	8001318 <HAL_RCC_OscConfig+0x48c>
 8001330:	e016      	b.n	8001360 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001332:	4a46      	ldr	r2, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001334:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fb04 	bl	800094c <HAL_GetTick>
 8001344:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001346:	e005      	b.n	8001354 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001348:	f7ff fb00 	bl	800094c <HAL_GetTick>
 800134c:	1b40      	subs	r0, r0, r5
 800134e:	2802      	cmp	r0, #2
 8001350:	f200 80a2 	bhi.w	8001498 <HAL_RCC_OscConfig+0x60c>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135a:	f013 0f02 	tst.w	r3, #2
 800135e:	d1f3      	bne.n	8001348 <HAL_RCC_OscConfig+0x4bc>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 809a 	beq.w	800149c <HAL_RCC_OscConfig+0x610>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800136a:	6892      	ldr	r2, [r2, #8]
 800136c:	f002 020c 	and.w	r2, r2, #12
 8001370:	2a0c      	cmp	r2, #12
 8001372:	f000 8095 	beq.w	80014a0 <HAL_RCC_OscConfig+0x614>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001376:	2b02      	cmp	r3, #2
 8001378:	d142      	bne.n	8001400 <HAL_RCC_OscConfig+0x574>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800137c:	6813      	ldr	r3, [r2, #0]
 800137e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fae2 	bl	800094c <HAL_GetTick>
 8001388:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800138a:	e005      	b.n	8001398 <HAL_RCC_OscConfig+0x50c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff fade 	bl	800094c <HAL_GetTick>
 8001390:	1b40      	subs	r0, r0, r5
 8001392:	2802      	cmp	r0, #2
 8001394:	f200 8086 	bhi.w	80014a4 <HAL_RCC_OscConfig+0x618>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013a0:	d1f4      	bne.n	800138c <HAL_RCC_OscConfig+0x500>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 80013ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013b4:	0852      	lsrs	r2, r2, #1
 80013b6:	3a01      	subs	r2, #1
 80013b8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80013bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013be:	0852      	lsrs	r2, r2, #1
 80013c0:	3a01      	subs	r2, #1
 80013c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80013c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013c8:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80013ce:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d0:	6813      	ldr	r3, [r2, #0]
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d8:	68d3      	ldr	r3, [r2, #12]
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fab4 	bl	800094c <HAL_GetTick>
 80013e4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_OscConfig+0x566>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fab0 	bl	800094c <HAL_GetTick>
 80013ec:	1b00      	subs	r0, r0, r4
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d85a      	bhi.n	80014a8 <HAL_RCC_OscConfig+0x61c>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013fa:	d0f5      	beq.n	80013e8 <HAL_RCC_OscConfig+0x55c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
 80013fe:	e056      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001408:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001410:	d104      	bne.n	800141c <HAL_RCC_OscConfig+0x590>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 8001414:	68d3      	ldr	r3, [r2, #12]
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800141e:	68d3      	ldr	r3, [r2, #12]
 8001420:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fa8f 	bl	800094c <HAL_GetTick>
 800142e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001430:	e004      	b.n	800143c <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fa8b 	bl	800094c <HAL_GetTick>
 8001436:	1b00      	subs	r0, r0, r4
 8001438:	2802      	cmp	r0, #2
 800143a:	d837      	bhi.n	80014ac <HAL_RCC_OscConfig+0x620>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_RCC_OscConfig+0x5c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001444:	d1f5      	bne.n	8001432 <HAL_RCC_OscConfig+0x5a6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001446:	2000      	movs	r0, #0
 8001448:	e031      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
      {
        return HAL_ERROR;
 8001454:	2001      	movs	r0, #1
 8001456:	e02a      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
          {
            return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
 800145a:	e028      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
          {
            return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
 800145e:	e026      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e024      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001464:	2003      	movs	r0, #3
 8001466:	e022      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	e020      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800146c:	2003      	movs	r0, #3
 800146e:	e01e      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001470:	2003      	movs	r0, #3
 8001472:	e01c      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
      {
        return HAL_ERROR;
 8001474:	2001      	movs	r0, #1
 8001476:	e01a      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001478:	2003      	movs	r0, #3
 800147a:	e018      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e016      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
 8001486:	e012      	b.n	80014ae <HAL_RCC_OscConfig+0x622>

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001488:	2003      	movs	r0, #3
 800148a:	e010      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e00e      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001490:	2003      	movs	r0, #3
 8001492:	e00c      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800149c:	2000      	movs	r0, #0
 800149e:	e006      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e004      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
 80014a6:	e002      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x622>
        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80014ac:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80014ae:	b002      	add	sp, #8
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
 80014b2:	bf00      	nop

080014b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	428b      	cmp	r3, r1
 80014c0:	d20b      	bcs.n	80014da <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4a6b      	ldr	r2, [pc, #428]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	430b      	orrs	r3, r1
 80014cc:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	4299      	cmp	r1, r3
 80014d6:	f040 80b6 	bne.w	8001646 <HAL_RCC_ClockConfig+0x192>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	f013 0f02 	tst.w	r3, #2
 80014e0:	d006      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e2:	4c64      	ldr	r4, [pc, #400]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	68a3      	ldr	r3, [r4, #8]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	6883      	ldr	r3, [r0, #8]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60a3      	str	r3, [r4, #8]
 80014f0:	460d      	mov	r5, r1
 80014f2:	4604      	mov	r4, r0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f4:	6803      	ldr	r3, [r0, #0]
 80014f6:	f013 0f01 	tst.w	r3, #1
 80014fa:	d065      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fc:	6843      	ldr	r3, [r0, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d105      	bne.n	800150e <HAL_RCC_ClockConfig+0x5a>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001502:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800150a:	d115      	bne.n	8001538 <HAL_RCC_ClockConfig+0x84>
 800150c:	e09d      	b.n	800164a <HAL_RCC_ClockConfig+0x196>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150e:	2b03      	cmp	r3, #3
 8001510:	d105      	bne.n	800151e <HAL_RCC_ClockConfig+0x6a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800151a:	d10d      	bne.n	8001538 <HAL_RCC_ClockConfig+0x84>
 800151c:	e097      	b.n	800164e <HAL_RCC_ClockConfig+0x19a>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800151e:	b92b      	cbnz	r3, 800152c <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001520:	4a54      	ldr	r2, [pc, #336]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	f012 0f02 	tst.w	r2, #2
 8001528:	d106      	bne.n	8001538 <HAL_RCC_ClockConfig+0x84>
 800152a:	e092      	b.n	8001652 <HAL_RCC_ClockConfig+0x19e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001534:	f000 808f 	beq.w	8001656 <HAL_RCC_ClockConfig+0x1a2>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001538:	494e      	ldr	r1, [pc, #312]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	688a      	ldr	r2, [r1, #8]
 800153c:	f022 0203 	bic.w	r2, r2, #3
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff fa02 	bl	800094c <HAL_GetTick>
 8001548:	4606      	mov	r6, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d10e      	bne.n	800156e <HAL_RCC_ClockConfig+0xba>
 8001550:	e006      	b.n	8001560 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001552:	f7ff f9fb 	bl	800094c <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	f241 3388 	movw	r3, #5000	; 0x1388
 800155c:	4298      	cmp	r0, r3
 800155e:	d87c      	bhi.n	800165a <HAL_RCC_ClockConfig+0x1a6>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001560:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d1f2      	bne.n	8001552 <HAL_RCC_ClockConfig+0x9e>
 800156c:	e02c      	b.n	80015c8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	2b03      	cmp	r3, #3
 8001570:	d10e      	bne.n	8001590 <HAL_RCC_ClockConfig+0xdc>
 8001572:	e006      	b.n	8001582 <HAL_RCC_ClockConfig+0xce>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff f9ea 	bl	800094c <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	f241 3388 	movw	r3, #5000	; 0x1388
 800157e:	4298      	cmp	r0, r3
 8001580:	d86d      	bhi.n	800165e <HAL_RCC_ClockConfig+0x1aa>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001582:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d1f2      	bne.n	8001574 <HAL_RCC_ClockConfig+0xc0>
 800158e:	e01b      	b.n	80015c8 <HAL_RCC_ClockConfig+0x114>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001590:	b13b      	cbz	r3, 80015a2 <HAL_RCC_ClockConfig+0xee>
 8001592:	e013      	b.n	80015bc <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f9da 	bl	800094c <HAL_GetTick>
 8001598:	1b80      	subs	r0, r0, r6
 800159a:	f241 3388 	movw	r3, #5000	; 0x1388
 800159e:	4298      	cmp	r0, r3
 80015a0:	d85f      	bhi.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f013 0f0c 	tst.w	r3, #12
 80015aa:	d1f3      	bne.n	8001594 <HAL_RCC_ClockConfig+0xe0>
 80015ac:	e00c      	b.n	80015c8 <HAL_RCC_ClockConfig+0x114>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7ff f9cd 	bl	800094c <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80015b8:	4298      	cmp	r0, r3
 80015ba:	d854      	bhi.n	8001666 <HAL_RCC_ClockConfig+0x1b2>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d1f2      	bne.n	80015ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	429d      	cmp	r5, r3
 80015d2:	d20a      	bcs.n	80015ea <HAL_RCC_ClockConfig+0x136>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d4:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f023 0307 	bic.w	r3, r3, #7
 80015dc:	432b      	orrs	r3, r5
 80015de:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	429d      	cmp	r5, r3
 80015e8:	d13f      	bne.n	800166a <HAL_RCC_ClockConfig+0x1b6>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	f013 0f04 	tst.w	r3, #4
 80015f0:	d006      	beq.n	8001600 <HAL_RCC_ClockConfig+0x14c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f2:	4920      	ldr	r1, [pc, #128]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	688b      	ldr	r3, [r1, #8]
 80015f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fa:	68e3      	ldr	r3, [r4, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	f013 0f08 	tst.w	r3, #8
 8001606:	d007      	beq.n	8001618 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	6893      	ldr	r3, [r2, #8]
 800160c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001610:	6921      	ldr	r1, [r4, #16]
 8001612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001616:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001618:	f7ff fb7e 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001624:	23f0      	movs	r3, #240	; 0xf0
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	40d8      	lsrs	r0, r3
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_ClockConfig+0x1c8>)
 800163a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff f95b 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001642:	2000      	movs	r0, #0
 8001644:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
      {
        return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
 800164c:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
      {
        return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800165a:	2003      	movs	r0, #3
 800165c:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001662:	2003      	movs	r0, #3
 8001664:	bd70      	pop	{r4, r5, r6, pc}
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
 8001668:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 800166a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	40021000 	.word	0x40021000
 8001678:	08005720 	.word	0x08005720
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <HAL_RCC_GetHCLKFreq+0x8>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800168c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800168e:	f7ff fff7 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800169a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	fa22 f303 	lsr.w	r3, r2, r3
 80016aa:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80016ae:	40d8      	lsrs	r0, r3
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08005730 	.word	0x08005730

080016bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80016be:	f7ff ffdf 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80016ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80016de:	40d8      	lsrs	r0, r3
 80016e0:	bd08      	pop	{r3, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	08005730 	.word	0x08005730

080016ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f013 0f03 	tst.w	r3, #3
 80016f6:	d018      	beq.n	800172a <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80016f8:	4b78      	ldr	r3, [pc, #480]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	6802      	ldr	r2, [r0, #0]
 8001702:	4293      	cmp	r3, r2
 8001704:	d151      	bne.n	80017aa <RCCEx_PLLSAI1_Config+0xbe>
       || 
 8001706:	2a00      	cmp	r2, #0
 8001708:	d051      	beq.n	80017ae <RCCEx_PLLSAI1_Config+0xc2>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800170a:	4b74      	ldr	r3, [pc, #464]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001712:	2270      	movs	r2, #112	; 0x70
 8001714:	fa92 f2a2 	rbit	r2, r2
 8001718:	fab2 f282 	clz	r2, r2
 800171c:	40d3      	lsrs	r3, r2
 800171e:	3301      	adds	r3, #1
 8001720:	6842      	ldr	r2, [r0, #4]
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001722:	4293      	cmp	r3, r2
 8001724:	d145      	bne.n	80017b2 <RCCEx_PLLSAI1_Config+0xc6>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2400      	movs	r4, #0
 8001728:	e044      	b.n	80017b4 <RCCEx_PLLSAI1_Config+0xc8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800172a:	6806      	ldr	r6, [r0, #0]
 800172c:	2e02      	cmp	r6, #2
 800172e:	d00a      	beq.n	8001746 <RCCEx_PLLSAI1_Config+0x5a>
 8001730:	2e03      	cmp	r6, #3
 8001732:	d00f      	beq.n	8001754 <RCCEx_PLLSAI1_Config+0x68>
 8001734:	2e01      	cmp	r6, #1
 8001736:	d119      	bne.n	800176c <RCCEx_PLLSAI1_Config+0x80>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f013 0f02 	tst.w	r3, #2
 8001740:	d016      	beq.n	8001770 <RCCEx_PLLSAI1_Config+0x84>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2400      	movs	r4, #0
 8001744:	e01b      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800174e:	d011      	beq.n	8001774 <RCCEx_PLLSAI1_Config+0x88>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2400      	movs	r4, #0
 8001752:	e014      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001754:	4b61      	ldr	r3, [pc, #388]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800175c:	d10c      	bne.n	8001778 <RCCEx_PLLSAI1_Config+0x8c>
 800175e:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001766:	d009      	beq.n	800177c <RCCEx_PLLSAI1_Config+0x90>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2400      	movs	r4, #0
 800176a:	e008      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      status = HAL_ERROR;
 800176c:	2401      	movs	r4, #1
 800176e:	e006      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
    switch(PllSai1->PLLSAI1Source)
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 8001770:	2401      	movs	r4, #1
 8001772:	e004      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
      {
        status = HAL_ERROR;
 8001774:	2401      	movs	r4, #1
 8001776:	e002      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2400      	movs	r4, #0
 800177a:	e000      	b.n	800177e <RCCEx_PLLSAI1_Config+0x92>
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
      {
        status = HAL_ERROR;
 800177c:	2401      	movs	r4, #1
    default:
      status = HAL_ERROR;
      break;
    }
    
    if(status == HAL_OK)
 800177e:	b9cc      	cbnz	r4, 80017b4 <RCCEx_PLLSAI1_Config+0xc8>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001780:	f8df e158 	ldr.w	lr, [pc, #344]	; 80018dc <RCCEx_PLLSAI1_Config+0x1f0>
 8001784:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001788:	f023 0773 	bic.w	r7, r3, #115	; 0x73
 800178c:	6843      	ldr	r3, [r0, #4]
 800178e:	1e5d      	subs	r5, r3, #1
 8001790:	2270      	movs	r2, #112	; 0x70
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	fa05 f202 	lsl.w	r2, r5, r2
 800179e:	ea46 0302 	orr.w	r3, r6, r2
 80017a2:	433b      	orrs	r3, r7
 80017a4:	f8ce 300c 	str.w	r3, [lr, #12]
 80017a8:	e004      	b.n	80017b4 <RCCEx_PLLSAI1_Config+0xc8>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
      )
    {
      status = HAL_ERROR;
 80017aa:	2401      	movs	r4, #1
 80017ac:	e002      	b.n	80017b4 <RCCEx_PLLSAI1_Config+0xc8>
 80017ae:	2401      	movs	r4, #1
 80017b0:	e000      	b.n	80017b4 <RCCEx_PLLSAI1_Config+0xc8>
 80017b2:	2401      	movs	r4, #1
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
    }
  }
  
  if(status == HAL_OK)
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	f040 808e 	bne.w	80018d6 <RCCEx_PLLSAI1_Config+0x1ea>
 80017ba:	460f      	mov	r7, r1
 80017bc:	4605      	mov	r5, r0
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c8:	f7ff f8c0 	bl	800094c <HAL_GetTick>
 80017cc:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80017ce:	e004      	b.n	80017da <RCCEx_PLLSAI1_Config+0xee>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80017d0:	f7ff f8bc 	bl	800094c <HAL_GetTick>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d805      	bhi.n	80017e6 <RCCEx_PLLSAI1_Config+0xfa>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80017e2:	d1f5      	bne.n	80017d0 <RCCEx_PLLSAI1_Config+0xe4>
 80017e4:	e000      	b.n	80017e8 <RCCEx_PLLSAI1_Config+0xfc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
 80017e6:	2403      	movs	r4, #3
        break;
      }
    }

    if(status == HAL_OK)    
 80017e8:	2c00      	cmp	r4, #0
 80017ea:	d174      	bne.n	80018d6 <RCCEx_PLLSAI1_Config+0x1ea>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80017ec:	b9d7      	cbnz	r7, 8001824 <RCCEx_PLLSAI1_Config+0x138>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80017ee:	483b      	ldr	r0, [pc, #236]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80017f0:	6903      	ldr	r3, [r0, #16]
 80017f2:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80017f6:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80017fa:	68a9      	ldr	r1, [r5, #8]
 80017fc:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	fa01 f603 	lsl.w	r6, r1, r3
 800180c:	68eb      	ldr	r3, [r5, #12]
 800180e:	f04f 4178 	mov.w	r1, #4160749568	; 0xf8000000
 8001812:	fa91 f1a1 	rbit	r1, r1
 8001816:	fab1 f181 	clz	r1, r1
 800181a:	408b      	lsls	r3, r1
 800181c:	4333      	orrs	r3, r6
 800181e:	4313      	orrs	r3, r2
 8001820:	6103      	str	r3, [r0, #16]
 8001822:	e03d      	b.n	80018a0 <RCCEx_PLLSAI1_Config+0x1b4>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001824:	2f01      	cmp	r7, #1
 8001826:	d11d      	bne.n	8001864 <RCCEx_PLLSAI1_Config+0x178>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001828:	4e2c      	ldr	r6, [pc, #176]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 800182a:	6933      	ldr	r3, [r6, #16]
 800182c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001830:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8001834:	68aa      	ldr	r2, [r5, #8]
 8001836:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	fa02 f703 	lsl.w	r7, r2, r3
 8001846:	692b      	ldr	r3, [r5, #16]
 8001848:	085a      	lsrs	r2, r3, #1
 800184a:	3a01      	subs	r2, #1
 800184c:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 8001850:	fa90 f0a0 	rbit	r0, r0
 8001854:	fab0 f080 	clz	r0, r0
 8001858:	4082      	lsls	r2, r0
 800185a:	ea47 0302 	orr.w	r3, r7, r2
 800185e:	430b      	orrs	r3, r1
 8001860:	6133      	str	r3, [r6, #16]
 8001862:	e01d      	b.n	80018a0 <RCCEx_PLLSAI1_Config+0x1b4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001864:	4e1d      	ldr	r6, [pc, #116]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 8001866:	6933      	ldr	r3, [r6, #16]
 8001868:	f023 60c0 	bic.w	r0, r3, #100663296	; 0x6000000
 800186c:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8001870:	68aa      	ldr	r2, [r5, #8]
 8001872:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	fa02 f703 	lsl.w	r7, r2, r3
 8001882:	696b      	ldr	r3, [r5, #20]
 8001884:	085a      	lsrs	r2, r3, #1
 8001886:	1e51      	subs	r1, r2, #1
 8001888:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800188c:	fa92 f2a2 	rbit	r2, r2
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	ea47 0302 	orr.w	r3, r7, r2
 800189c:	4303      	orrs	r3, r0
 800189e:	6133      	str	r3, [r6, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff f84f 	bl	800094c <HAL_GetTick>
 80018ae:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80018b0:	e004      	b.n	80018bc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018b2:	f7ff f84b 	bl	800094c <HAL_GetTick>
 80018b6:	1b80      	subs	r0, r0, r6
 80018b8:	2802      	cmp	r0, #2
 80018ba:	d805      	bhi.n	80018c8 <RCCEx_PLLSAI1_Config+0x1dc>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80018c4:	d0f5      	beq.n	80018b2 <RCCEx_PLLSAI1_Config+0x1c6>
 80018c6:	e000      	b.n	80018ca <RCCEx_PLLSAI1_Config+0x1de>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
        {
          status = HAL_TIMEOUT;
 80018c8:	2403      	movs	r4, #3
          break;
        }
      }

      if(status == HAL_OK)    
 80018ca:	b924      	cbnz	r4, 80018d6 <RCCEx_PLLSAI1_Config+0x1ea>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <RCCEx_PLLSAI1_Config+0x1f0>)
 80018ce:	6911      	ldr	r1, [r2, #16]
 80018d0:	69ab      	ldr	r3, [r5, #24]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6113      	str	r3, [r2, #16]
      }
    }
  }
  
  return status;
}
 80018d6:	4620      	mov	r0, r4
 80018d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018e8:	6803      	ldr	r3, [r0, #0]
 80018ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80018ee:	d024      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80018f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018f6:	d006      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018fc:	d001      	beq.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80018fe:	b97b      	cbnz	r3, 8001920 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001900:	e008      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x34>
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister = 0;
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001902:	2600      	movs	r6, #0
 8001904:	e00d      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x42>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001906:	4aab      	ldr	r2, [pc, #684]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001908:	68d3      	ldr	r3, [r2, #12]
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	60d3      	str	r3, [r2, #12]
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister = 0;
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001910:	2600      	movs	r6, #0
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001912:	e006      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x42>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001914:	2100      	movs	r1, #0
 8001916:	3004      	adds	r0, #4
 8001918:	f7ff fee8 	bl	80016ec <RCCEx_PLLSAI1_Config>
 800191c:	4606      	mov	r6, r0
      /* SAI1 clock source config set later after clock selection check */
      break;
 800191e:	e000      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x42>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001920:	2601      	movs	r6, #1
      break;
    }

    if(ret == HAL_OK)
 8001922:	b96e      	cbnz	r6, 8001940 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001924:	49a3      	ldr	r1, [pc, #652]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001926:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800192a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800192e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001930:	4313      	orrs	r3, r2
 8001932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister = 0;
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001936:	4637      	mov	r7, r6
 8001938:	e003      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800193a:	2700      	movs	r7, #0
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister = 0;
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800193c:	463e      	mov	r6, r7
 800193e:	e000      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001940:	4637      	mov	r7, r6
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001948:	d072      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b9a      	ldr	r3, [pc, #616]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001952:	d10c      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001956:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001958:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800195c:	659a      	str	r2, [r3, #88]	; 0x58
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001968:	f04f 0801 	mov.w	r8, #1
 800196c:	e001      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x92>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001972:	4a91      	ldr	r2, [pc, #580]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800197c:	f7fe ffe6 	bl	800094c <HAL_GetTick>
 8001980:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001982:	e004      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7fe ffe2 	bl	800094c <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	2802      	cmp	r0, #2
 800198c:	d805      	bhi.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xba>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800198e:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001996:	d0f5      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001998:	e000      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 800199a:	2603      	movs	r6, #3
        break;
      }
    }

    if(ret == HAL_OK)
 800199c:	2e00      	cmp	r6, #0
 800199e:	d13c      	bne.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019aa:	d015      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80019ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d012      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019b2:	4a80      	ldr	r2, [pc, #512]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80019b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019bc:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80019c0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80019c4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019c8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80019cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80019d0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019d8:	f013 0f01 	tst.w	r3, #1
 80019dc:	d012      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7fe ffb5 	bl	800094c <HAL_GetTick>
 80019e2:	4605      	mov	r5, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80019e4:	e006      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7fe ffb1 	bl	800094c <HAL_GetTick>
 80019ea:	1b40      	subs	r0, r0, r5
 80019ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80019f0:	4298      	cmp	r0, r3
 80019f2:	d806      	bhi.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	f013 0f02 	tst.w	r3, #2
 80019fe:	d0f2      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a00:	e000      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            ret = HAL_TIMEOUT;
 8001a02:	2603      	movs	r6, #3
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8001a04:	b95e      	cbnz	r6, 8001a1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a06:	496b      	ldr	r1, [pc, #428]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a08:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8001a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a18:	e002      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a1a:	4637      	mov	r7, r6
 8001a1c:	e000      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a1e:	4637      	mov	r7, r6
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a20:	f1b8 0f00 	cmp.w	r8, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a26:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	f013 0f01 	tst.w	r3, #1
 8001a36:	d008      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a38:	495e      	ldr	r1, [pc, #376]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a3a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	6a23      	ldr	r3, [r4, #32]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f013 0f02 	tst.w	r3, #2
 8001a50:	d008      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a52:	4958      	ldr	r1, [pc, #352]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a54:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a58:	f023 020c 	bic.w	r2, r3, #12
 8001a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	f013 0f20 	tst.w	r3, #32
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a6c:	4951      	ldr	r1, [pc, #324]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001a84:	d008      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a86:	494b      	ldr	r1, [pc, #300]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001a88:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001aa0:	4944      	ldr	r1, [pc, #272]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001aa2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ab8:	d008      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aba:	493e      	ldr	r1, [pc, #248]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001abc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ad4:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ad6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001aec:	d01a      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aee:	4931      	ldr	r1, [pc, #196]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001af0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001af4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b06:	d104      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b08:	68cb      	ldr	r3, [r1, #12]
 8001b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e008      	b.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b16:	d105      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	1d20      	adds	r0, r4, #4
 8001b1c:	f7ff fde6 	bl	80016ec <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 8001b20:	b100      	cbz	r0, 8001b24 <HAL_RCCEx_PeriphCLKConfig+0x244>
        {
          /* set overall return value */
          status = ret;
 8001b22:	4607      	mov	r7, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b2a:	d01a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b2c:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b44:	d104      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b46:	68cb      	ldr	r3, [r1, #12]
 8001b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b4c:	60cb      	str	r3, [r1, #12]
 8001b4e:	e008      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x282>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b54:	d105      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x282>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b56:	2101      	movs	r1, #1
 8001b58:	1d20      	adds	r0, r4, #4
 8001b5a:	f7ff fdc7 	bl	80016ec <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 8001b5e:	b100      	cbz	r0, 8001b62 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* set overall return value */
        status = ret;
 8001b60:	4607      	mov	r7, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001b68:	d012      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b6a:	4912      	ldr	r1, [pc, #72]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b6c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001b74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b82:	d105      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b84:	2102      	movs	r1, #2
 8001b86:	1d20      	adds	r0, r4, #4
 8001b88:	f7ff fdb0 	bl	80016ec <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001b8c:	b100      	cbz	r0, 8001b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      {
        /* set overall return value */
        status = ret;
 8001b8e:	4607      	mov	r7, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001b96:	d008      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ba2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001baa:	4638      	mov	r0, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40007000 	.word	0x40007000

08001bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bbc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bbe:	6a03      	ldr	r3, [r0, #32]
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bc8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bca:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bd4:	680c      	ldr	r4, [r1, #0]
 8001bd6:	4323      	orrs	r3, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bd8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bdc:	688c      	ldr	r4, [r1, #8]
 8001bde:	4322      	orrs	r2, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001be0:	4c14      	ldr	r4, [pc, #80]	; (8001c34 <TIM_OC1_SetConfig+0x78>)
 8001be2:	42a0      	cmp	r0, r4
 8001be4:	d007      	beq.n	8001bf6 <TIM_OC1_SetConfig+0x3a>
 8001be6:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8001bea:	42a0      	cmp	r0, r4
 8001bec:	d003      	beq.n	8001bf6 <TIM_OC1_SetConfig+0x3a>
 8001bee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001bf2:	42a0      	cmp	r0, r4
 8001bf4:	d105      	bne.n	8001c02 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bf6:	f022 0208 	bic.w	r2, r2, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bfa:	68cc      	ldr	r4, [r1, #12]
 8001bfc:	4322      	orrs	r2, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c02:	4c0c      	ldr	r4, [pc, #48]	; (8001c34 <TIM_OC1_SetConfig+0x78>)
 8001c04:	42a0      	cmp	r0, r4
 8001c06:	d007      	beq.n	8001c18 <TIM_OC1_SetConfig+0x5c>
 8001c08:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8001c0c:	42a0      	cmp	r0, r4
 8001c0e:	d003      	beq.n	8001c18 <TIM_OC1_SetConfig+0x5c>
 8001c10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d105      	bne.n	8001c24 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c18:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c1c:	694c      	ldr	r4, [r1, #20]
 8001c1e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c20:	698d      	ldr	r5, [r1, #24]
 8001c22:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c24:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c26:	6183      	str	r3, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c28:	684b      	ldr	r3, [r1, #4]
 8001c2a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c2c:	6202      	str	r2, [r0, #32]
}
 8001c2e:	bc30      	pop	{r4, r5}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40012c00 	.word	0x40012c00

08001c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c3a:	6a03      	ldr	r3, [r0, #32]
 8001c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c46:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c4c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c50:	680d      	ldr	r5, [r1, #0]
 8001c52:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001c58:	688d      	ldr	r5, [r1, #8]
 8001c5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c5e:	4d12      	ldr	r5, [pc, #72]	; (8001ca8 <TIM_OC3_SetConfig+0x70>)
 8001c60:	42a8      	cmp	r0, r5
 8001c62:	d106      	bne.n	8001c72 <TIM_OC3_SetConfig+0x3a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001c68:	68cd      	ldr	r5, [r1, #12]
 8001c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c72:	4d0d      	ldr	r5, [pc, #52]	; (8001ca8 <TIM_OC3_SetConfig+0x70>)
 8001c74:	42a8      	cmp	r0, r5
 8001c76:	d007      	beq.n	8001c88 <TIM_OC3_SetConfig+0x50>
 8001c78:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001c7c:	42a8      	cmp	r0, r5
 8001c7e:	d003      	beq.n	8001c88 <TIM_OC3_SetConfig+0x50>
 8001c80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c84:	42a8      	cmp	r0, r5
 8001c86:	d107      	bne.n	8001c98 <TIM_OC3_SetConfig+0x60>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c88:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001c8c:	694d      	ldr	r5, [r1, #20]
 8001c8e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001c92:	698d      	ldr	r5, [r1, #24]
 8001c94:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c9a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c9c:	684a      	ldr	r2, [r1, #4]
 8001c9e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ca0:	6203      	str	r3, [r0, #32]
}
 8001ca2:	bc30      	pop	{r4, r5}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40012c00 	.word	0x40012c00

08001cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cae:	6a03      	ldr	r3, [r0, #32]
 8001cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cb6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cba:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001cc4:	680d      	ldr	r5, [r1, #0]
 8001cc6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001cce:	688d      	ldr	r5, [r1, #8]
 8001cd0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001cd4:	4d0b      	ldr	r5, [pc, #44]	; (8001d04 <TIM_OC4_SetConfig+0x58>)
 8001cd6:	42a8      	cmp	r0, r5
 8001cd8:	d007      	beq.n	8001cea <TIM_OC4_SetConfig+0x3e>
 8001cda:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d003      	beq.n	8001cea <TIM_OC4_SetConfig+0x3e>
 8001ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d104      	bne.n	8001cf4 <TIM_OC4_SetConfig+0x48>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001cee:	694d      	ldr	r5, [r1, #20]
 8001cf0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cf4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cf6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cf8:	684b      	ldr	r3, [r1, #4]
 8001cfa:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cfc:	6202      	str	r2, [r0, #32]
}
 8001cfe:	bc30      	pop	{r4, r5}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40012c00 	.word	0x40012c00

08001d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001d08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001d0a:	6a03      	ldr	r3, [r0, #32]
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d14:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001d16:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001d18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d20:	680c      	ldr	r4, [r1, #0]
 8001d22:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001d28:	688c      	ldr	r4, [r1, #8]
 8001d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d2e:	4c0b      	ldr	r4, [pc, #44]	; (8001d5c <TIM_OC5_SetConfig+0x54>)
 8001d30:	42a0      	cmp	r0, r4
 8001d32:	d007      	beq.n	8001d44 <TIM_OC5_SetConfig+0x3c>
 8001d34:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8001d38:	42a0      	cmp	r0, r4
 8001d3a:	d003      	beq.n	8001d44 <TIM_OC5_SetConfig+0x3c>
 8001d3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d40:	42a0      	cmp	r0, r4
 8001d42:	d104      	bne.n	8001d4e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001d44:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001d48:	694c      	ldr	r4, [r1, #20]
 8001d4a:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d4e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001d50:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001d52:	684a      	ldr	r2, [r1, #4]
 8001d54:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d56:	6203      	str	r3, [r0, #32]
}
 8001d58:	bc30      	pop	{r4, r5}
 8001d5a:	4770      	bx	lr
 8001d5c:	40012c00 	.word	0x40012c00

08001d60 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001d60:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001d62:	6a03      	ldr	r3, [r0, #32]
 8001d64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d6a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d6c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001d6e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001d78:	680d      	ldr	r5, [r1, #0]
 8001d7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001d7e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001d82:	688d      	ldr	r5, [r1, #8]
 8001d84:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d88:	4d0b      	ldr	r5, [pc, #44]	; (8001db8 <TIM_OC6_SetConfig+0x58>)
 8001d8a:	42a8      	cmp	r0, r5
 8001d8c:	d007      	beq.n	8001d9e <TIM_OC6_SetConfig+0x3e>
 8001d8e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001d92:	42a8      	cmp	r0, r5
 8001d94:	d003      	beq.n	8001d9e <TIM_OC6_SetConfig+0x3e>
 8001d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d9a:	42a8      	cmp	r0, r5
 8001d9c:	d104      	bne.n	8001da8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001d9e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001da2:	694d      	ldr	r5, [r1, #20]
 8001da4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001daa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001dac:	684b      	ldr	r3, [r1, #4]
 8001dae:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db0:	6202      	str	r2, [r0, #32]
}
 8001db2:	bc30      	pop	{r4, r5}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001dbc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbe:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <TIM_Base_SetConfig+0x64>)
 8001dc0:	4290      	cmp	r0, r2
 8001dc2:	d002      	beq.n	8001dca <TIM_Base_SetConfig+0xe>
 8001dc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dc8:	d103      	bne.n	8001dd2 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dce:	684a      	ldr	r2, [r1, #4]
 8001dd0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <TIM_Base_SetConfig+0x64>)
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d00a      	beq.n	8001dee <TIM_Base_SetConfig+0x32>
 8001dd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ddc:	d007      	beq.n	8001dee <TIM_Base_SetConfig+0x32>
 8001dde:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001de2:	4290      	cmp	r0, r2
 8001de4:	d003      	beq.n	8001dee <TIM_Base_SetConfig+0x32>
 8001de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d103      	bne.n	8001df6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df2:	68ca      	ldr	r2, [r1, #12]
 8001df4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001df6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df8:	688b      	ldr	r3, [r1, #8]
 8001dfa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dfc:	680b      	ldr	r3, [r1, #0]
 8001dfe:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <TIM_Base_SetConfig+0x64>)
 8001e02:	4298      	cmp	r0, r3
 8001e04:	d007      	beq.n	8001e16 <TIM_Base_SetConfig+0x5a>
 8001e06:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	d003      	beq.n	8001e16 <TIM_Base_SetConfig+0x5a>
 8001e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e12:	4298      	cmp	r0, r3
 8001e14:	d101      	bne.n	8001e1a <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e16:	690b      	ldr	r3, [r1, #16]
 8001e18:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	6143      	str	r3, [r0, #20]
 8001e1e:	4770      	bx	lr
 8001e20:	40012c00 	.word	0x40012c00

08001e24 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001e24:	b1b8      	cbz	r0, 8001e56 <HAL_TIM_PWM_Init+0x32>
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e26:	b510      	push	{r4, lr}
 8001e28:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e3a:	f001 faf5 	bl	8003428 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	1d21      	adds	r1, r4, #4
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	f7ff ffb8 	bl	8001dbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001e52:	2000      	movs	r0, #0
 8001e54:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5e:	6a03      	ldr	r3, [r0, #32]
 8001e60:	f023 0310 	bic.w	r3, r3, #16
 8001e64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e6c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001e70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e74:	680d      	ldr	r5, [r1, #0]
 8001e76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e7a:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001e7e:	688d      	ldr	r5, [r1, #8]
 8001e80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e84:	4d11      	ldr	r5, [pc, #68]	; (8001ecc <TIM_OC2_SetConfig+0x70>)
 8001e86:	42a8      	cmp	r0, r5
 8001e88:	d106      	bne.n	8001e98 <TIM_OC2_SetConfig+0x3c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001e8e:	68cd      	ldr	r5, [r1, #12]
 8001e90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e98:	4d0c      	ldr	r5, [pc, #48]	; (8001ecc <TIM_OC2_SetConfig+0x70>)
 8001e9a:	42a8      	cmp	r0, r5
 8001e9c:	d007      	beq.n	8001eae <TIM_OC2_SetConfig+0x52>
 8001e9e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d003      	beq.n	8001eae <TIM_OC2_SetConfig+0x52>
 8001ea6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eaa:	42a8      	cmp	r0, r5
 8001eac:	d107      	bne.n	8001ebe <TIM_OC2_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001eb2:	694d      	ldr	r5, [r1, #20]
 8001eb4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001eb8:	698d      	ldr	r5, [r1, #24]
 8001eba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ebe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ec0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ec6:	6203      	str	r3, [r0, #32]
}
 8001ec8:	bc30      	pop	{r4, r5}
 8001eca:	4770      	bx	lr
 8001ecc:	40012c00 	.word	0x40012c00

08001ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f000 8093 	beq.w	8002002 <HAL_TIM_PWM_ConfigChannel+0x132>
 8001edc:	460d      	mov	r5, r1
 8001ede:	4604      	mov	r4, r0
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  switch (Channel)
 8001eec:	2a14      	cmp	r2, #20
 8001eee:	f200 8081 	bhi.w	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
 8001ef2:	e8df f002 	tbb	[pc, r2]
 8001ef6:	7f0b      	.short	0x7f0b
 8001ef8:	7f1e7f7f 	.word	0x7f1e7f7f
 8001efc:	7f327f7f 	.word	0x7f327f7f
 8001f00:	7f457f7f 	.word	0x7f457f7f
 8001f04:	7f597f7f 	.word	0x7f597f7f
 8001f08:	7f7f      	.short	0x7f7f
 8001f0a:	6c          	.byte	0x6c
 8001f0b:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f0c:	6800      	ldr	r0, [r0, #0]
 8001f0e:	f7ff fe55 	bl	8001bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	6993      	ldr	r3, [r2, #24]
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	6993      	ldr	r3, [r2, #24]
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	6991      	ldr	r1, [r2, #24]
 8001f2a:	692b      	ldr	r3, [r5, #16]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6193      	str	r3, [r2, #24]
    }
    break;
 8001f30:	e060      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f32:	6800      	ldr	r0, [r0, #0]
 8001f34:	f7ff ff92 	bl	8001e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	6993      	ldr	r3, [r2, #24]
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f40:	6193      	str	r3, [r2, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	6993      	ldr	r3, [r2, #24]
 8001f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	6993      	ldr	r3, [r2, #24]
 8001f50:	6929      	ldr	r1, [r5, #16]
 8001f52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f56:	6193      	str	r3, [r2, #24]
    }
    break;
 8001f58:	e04c      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	f7ff fe6c 	bl	8001c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	69d3      	ldr	r3, [r2, #28]
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	61d3      	str	r3, [r2, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f6a:	6822      	ldr	r2, [r4, #0]
 8001f6c:	69d3      	ldr	r3, [r2, #28]
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	69d1      	ldr	r1, [r2, #28]
 8001f78:	692b      	ldr	r3, [r5, #16]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	61d3      	str	r3, [r2, #28]
    }
    break;
 8001f7e:	e039      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f80:	6800      	ldr	r0, [r0, #0]
 8001f82:	f7ff fe93 	bl	8001cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	69d3      	ldr	r3, [r2, #28]
 8001f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f8e:	61d3      	str	r3, [r2, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f90:	6822      	ldr	r2, [r4, #0]
 8001f92:	69d3      	ldr	r3, [r2, #28]
 8001f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f98:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	69d3      	ldr	r3, [r2, #28]
 8001f9e:	6929      	ldr	r1, [r5, #16]
 8001fa0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fa4:	61d3      	str	r3, [r2, #28]
    }
    break;
 8001fa6:	e025      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fa8:	6800      	ldr	r0, [r0, #0]
 8001faa:	f7ff fead 	bl	8001d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6553      	str	r3, [r2, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fb8:	6822      	ldr	r2, [r4, #0]
 8001fba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001fc6:	692b      	ldr	r3, [r5, #16]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6553      	str	r3, [r2, #84]	; 0x54
    }
    break;
 8001fcc:	e012      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	f7ff fec6 	bl	8001d60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fdc:	6553      	str	r3, [r2, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001fde:	6822      	ldr	r2, [r4, #0]
 8001fe0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fe6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fec:	6929      	ldr	r1, [r5, #16]
 8001fee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ff2:	6553      	str	r3, [r2, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 8002000:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002002:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002004:	bd38      	pop	{r3, r4, r5, pc}
 8002006:	bf00      	nop

08002008 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002008:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800200a:	2301      	movs	r3, #1
 800200c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002010:	6a03      	ldr	r3, [r0, #32]
 8002012:	ea23 0304 	bic.w	r3, r3, r4
 8002016:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002018:	6a03      	ldr	r3, [r0, #32]
 800201a:	408a      	lsls	r2, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	6202      	str	r2, [r0, #32]
}
 8002020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800202c:	2200      	movs	r2, #0
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f7ff ffea 	bl	8002008 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_TIM_PWM_Stop+0x78>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_TIM_PWM_Stop+0x28>
 800203c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <HAL_TIM_PWM_Stop+0x2c>
 8002044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002048:	4293      	cmp	r3, r2
 800204a:	d105      	bne.n	8002058 <HAL_TIM_PWM_Stop+0x30>
 800204c:	2201      	movs	r2, #1
 800204e:	e004      	b.n	800205a <HAL_TIM_PWM_Stop+0x32>
 8002050:	2201      	movs	r2, #1
 8002052:	e002      	b.n	800205a <HAL_TIM_PWM_Stop+0x32>
 8002054:	2201      	movs	r2, #1
 8002056:	e000      	b.n	800205a <HAL_TIM_PWM_Stop+0x32>
 8002058:	2200      	movs	r2, #0
 800205a:	b16a      	cbz	r2, 8002078 <HAL_TIM_PWM_Stop+0x50>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800205c:	6a19      	ldr	r1, [r3, #32]
 800205e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002062:	4211      	tst	r1, r2
 8002064:	d108      	bne.n	8002078 <HAL_TIM_PWM_Stop+0x50>
 8002066:	6a19      	ldr	r1, [r3, #32]
 8002068:	f240 4244 	movw	r2, #1092	; 0x444
 800206c:	4211      	tst	r1, r2
 800206e:	d103      	bne.n	8002078 <HAL_TIM_PWM_Stop+0x50>
 8002070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	f241 1211 	movw	r2, #4369	; 0x1111
 8002080:	4211      	tst	r1, r2
 8002082:	d108      	bne.n	8002096 <HAL_TIM_PWM_Stop+0x6e>
 8002084:	6a19      	ldr	r1, [r3, #32]
 8002086:	f240 4244 	movw	r2, #1092	; 0x444
 800208a:	4211      	tst	r1, r2
 800208c:	d103      	bne.n	8002096 <HAL_TIM_PWM_Stop+0x6e>
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002096:	2301      	movs	r3, #1
 8002098:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 800209c:	2000      	movs	r0, #0
 800209e:	bd10      	pop	{r4, pc}
 80020a0:	40012c00 	.word	0x40012c00

080020a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d01d      	beq.n	80020e8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80020ac:	b430      	push	{r4, r5}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ae:	2301      	movs	r3, #1
 80020b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b4:	6803      	ldr	r3, [r0, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020ba:	4c0d      	ldr	r4, [pc, #52]	; (80020f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80020bc:	42a3      	cmp	r3, r4
 80020be:	d103      	bne.n	80020c8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020c4:	684c      	ldr	r4, [r1, #4]
 80020c6:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020cc:	680c      	ldr	r4, [r1, #0]
 80020ce:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020d0:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020d4:	6889      	ldr	r1, [r1, #8]
 80020d6:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020da:	6803      	ldr	r3, [r0, #0]
 80020dc:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 80020de:	2300      	movs	r3, #0
 80020e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80020e4:	4618      	mov	r0, r3
 80020e6:	e001      	b.n	80020ec <HAL_TIMEx_MasterConfigSynchronization+0x48>
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020e8:	2002      	movs	r0, #2
 80020ea:	4770      	bx	lr
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80020ec:	bc30      	pop	{r4, r5}
 80020ee:	4770      	bx	lr
 80020f0:	40012c00 	.word	0x40012c00

080020f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80020f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d03b      	beq.n	8002174 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80020fc:	b410      	push	{r4}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80020fe:	2301      	movs	r3, #1
 8002100:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002104:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800210a:	688b      	ldr	r3, [r1, #8]
 800210c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800210e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002112:	684b      	ldr	r3, [r1, #4]
 8002114:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002116:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800211a:	680b      	ldr	r3, [r1, #0]
 800211c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800211e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002122:	690b      	ldr	r3, [r1, #16]
 8002124:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002126:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800212a:	694b      	ldr	r3, [r1, #20]
 800212c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800212e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002132:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800213a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800213c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002140:	698a      	ldr	r2, [r1, #24]
 8002142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	4c0d      	ldr	r4, [pc, #52]	; (8002180 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800214a:	42a2      	cmp	r2, r4
 800214c:	d10c      	bne.n	8002168 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800214e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002152:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002154:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215c:	69cc      	ldr	r4, [r1, #28]
 800215e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002160:	f023 7400 	bic.w	r4, r3, #33554432	; 0x2000000
 8002164:	6a0b      	ldr	r3, [r1, #32]
 8002166:	4323      	orrs	r3, r4
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800216a:	2300      	movs	r3, #0
 800216c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002170:	4618      	mov	r0, r3
 8002172:	e001      	b.n	8002178 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002174:	2002      	movs	r0, #2
 8002176:	4770      	bx	lr
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40012c00 	.word	0x40012c00

08002184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002184:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002188:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218a:	6882      	ldr	r2, [r0, #8]
 800218c:	6903      	ldr	r3, [r0, #16]
 800218e:	431a      	orrs	r2, r3
 8002190:	6943      	ldr	r3, [r0, #20]
 8002192:	431a      	orrs	r2, r3
 8002194:	69c3      	ldr	r3, [r0, #28]
 8002196:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	6808      	ldr	r0, [r1, #0]
 800219c:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <UART_SetConfig+0x284>)
 800219e:	4003      	ands	r3, r0
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a4:	6821      	ldr	r1, [r4, #0]
 80021a6:	684b      	ldr	r3, [r1, #4]
 80021a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ac:	68e3      	ldr	r3, [r4, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021b2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	4b95      	ldr	r3, [pc, #596]	; (800240c <UART_SetConfig+0x288>)
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021bc:	6a23      	ldr	r3, [r4, #32]
 80021be:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021c0:	6893      	ldr	r3, [r2, #8]
 80021c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021c6:	430b      	orrs	r3, r1
 80021c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ca:	6825      	ldr	r5, [r4, #0]
 80021cc:	4b90      	ldr	r3, [pc, #576]	; (8002410 <UART_SetConfig+0x28c>)
 80021ce:	429d      	cmp	r5, r3
 80021d0:	d113      	bne.n	80021fa <UART_SetConfig+0x76>
 80021d2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d809      	bhi.n	80021f6 <UART_SetConfig+0x72>
 80021e2:	e8df f003 	tbb	[pc, r3]
 80021e6:	0402      	.short	0x0402
 80021e8:	0644      	.short	0x0644
 80021ea:	2601      	movs	r6, #1
 80021ec:	e046      	b.n	800227c <UART_SetConfig+0xf8>
 80021ee:	2604      	movs	r6, #4
 80021f0:	e044      	b.n	800227c <UART_SetConfig+0xf8>
 80021f2:	2608      	movs	r6, #8
 80021f4:	e042      	b.n	800227c <UART_SetConfig+0xf8>
 80021f6:	2610      	movs	r6, #16
 80021f8:	e040      	b.n	800227c <UART_SetConfig+0xf8>
 80021fa:	4b86      	ldr	r3, [pc, #536]	; (8002414 <UART_SetConfig+0x290>)
 80021fc:	429d      	cmp	r5, r3
 80021fe:	d118      	bne.n	8002232 <UART_SetConfig+0xae>
 8002200:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d80e      	bhi.n	800222e <UART_SetConfig+0xaa>
 8002210:	e8df f003 	tbb	[pc, r3]
 8002214:	0d0d0d07 	.word	0x0d0d0d07
 8002218:	0d0d0d09 	.word	0x0d0d0d09
 800221c:	0d0d0d2f 	.word	0x0d0d0d2f
 8002220:	0b          	.byte	0x0b
 8002221:	00          	.byte	0x00
 8002222:	2600      	movs	r6, #0
 8002224:	e02a      	b.n	800227c <UART_SetConfig+0xf8>
 8002226:	2604      	movs	r6, #4
 8002228:	e028      	b.n	800227c <UART_SetConfig+0xf8>
 800222a:	2608      	movs	r6, #8
 800222c:	e026      	b.n	800227c <UART_SetConfig+0xf8>
 800222e:	2610      	movs	r6, #16
 8002230:	e024      	b.n	800227c <UART_SetConfig+0xf8>
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <UART_SetConfig+0x288>)
 8002234:	429d      	cmp	r5, r3
 8002236:	d11e      	bne.n	8002276 <UART_SetConfig+0xf2>
 8002238:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d00b      	beq.n	8002262 <UART_SetConfig+0xde>
 800224a:	d801      	bhi.n	8002250 <UART_SetConfig+0xcc>
 800224c:	b13b      	cbz	r3, 800225e <UART_SetConfig+0xda>
 800224e:	e00c      	b.n	800226a <UART_SetConfig+0xe6>
 8002250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002254:	d011      	beq.n	800227a <UART_SetConfig+0xf6>
 8002256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800225a:	d004      	beq.n	8002266 <UART_SetConfig+0xe2>
 800225c:	e005      	b.n	800226a <UART_SetConfig+0xe6>
 800225e:	2600      	movs	r6, #0
 8002260:	e00c      	b.n	800227c <UART_SetConfig+0xf8>
 8002262:	2604      	movs	r6, #4
 8002264:	e00a      	b.n	800227c <UART_SetConfig+0xf8>
 8002266:	2608      	movs	r6, #8
 8002268:	e008      	b.n	800227c <UART_SetConfig+0xf8>
 800226a:	2610      	movs	r6, #16
 800226c:	e006      	b.n	800227c <UART_SetConfig+0xf8>
 800226e:	2602      	movs	r6, #2
 8002270:	e004      	b.n	800227c <UART_SetConfig+0xf8>
 8002272:	2602      	movs	r6, #2
 8002274:	e002      	b.n	800227c <UART_SetConfig+0xf8>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002276:	2610      	movs	r6, #16
 8002278:	e000      	b.n	800227c <UART_SetConfig+0xf8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800227a:	2602      	movs	r6, #2

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800227c:	4b63      	ldr	r3, [pc, #396]	; (800240c <UART_SetConfig+0x288>)
 800227e:	429d      	cmp	r5, r3
 8002280:	d16d      	bne.n	800235e <UART_SetConfig+0x1da>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 8002282:	2e08      	cmp	r6, #8
 8002284:	d811      	bhi.n	80022aa <UART_SetConfig+0x126>
 8002286:	e8df f006 	tbb	[pc, r6]
 800228a:	1008      	.short	0x1008
 800228c:	100c1005 	.word	0x100c1005
 8002290:	1010      	.short	0x1010
 8002292:	13          	.byte	0x13
 8002293:	00          	.byte	0x00
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002294:	2500      	movs	r5, #0
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8002296:	4860      	ldr	r0, [pc, #384]	; (8002418 <UART_SetConfig+0x294>)
 8002298:	e00d      	b.n	80022b6 <UART_SetConfig+0x132>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800229a:	f7ff f9f7 	bl	800168c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800229e:	2500      	movs	r5, #0

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
 80022a0:	e009      	b.n	80022b6 <UART_SetConfig+0x132>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80022a2:	f7fe fd39 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022a6:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
 80022a8:	e005      	b.n	80022b6 <UART_SetConfig+0x132>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80022aa:	2501      	movs	r5, #1

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 80022ac:	2000      	movs	r0, #0
      tmpreg = (uint32_t) LSE_VALUE;
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
      break;
 80022ae:	e002      	b.n	80022b6 <UART_SetConfig+0x132>
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022b0:	2500      	movs	r5, #0
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80022b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80022b6:	2800      	cmp	r0, #0
 80022b8:	f000 80f2 	beq.w	80024a0 <UART_SetConfig+0x31c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80022bc:	6862      	ldr	r2, [r4, #4]
 80022be:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80022c2:	4298      	cmp	r0, r3
 80022c4:	f0c0 80e5 	bcc.w	8002492 <UART_SetConfig+0x30e>
 80022c8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80022cc:	f200 80e3 	bhi.w	8002496 <UART_SetConfig+0x312>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 80022d0:	2e08      	cmp	r6, #8
 80022d2:	d83a      	bhi.n	800234a <UART_SetConfig+0x1c6>
 80022d4:	e8df f006 	tbb	[pc, r6]
 80022d8:	39153905 	.word	0x39153905
 80022dc:	3939391f 	.word	0x3939391f
 80022e0:	2f          	.byte	0x2f
 80022e1:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022e2:	f7ff f9d3 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 80022e6:	2300      	movs	r3, #0
 80022e8:	0e07      	lsrs	r7, r0, #24
 80022ea:	0206      	lsls	r6, r0, #8
 80022ec:	6862      	ldr	r2, [r4, #4]
 80022ee:	0850      	lsrs	r0, r2, #1
 80022f0:	eb16 0b00 	adds.w	fp, r6, r0
 80022f4:	f147 0c00 	adc.w	ip, r7, #0
 80022f8:	4658      	mov	r0, fp
 80022fa:	4661      	mov	r1, ip
 80022fc:	f7fe f970 	bl	80005e0 <__aeabi_uldivmod>
          break;
 8002300:	e024      	b.n	800234c <UART_SetConfig+0x1c8>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002302:	0856      	lsrs	r6, r2, #1
 8002304:	2300      	movs	r3, #0
 8002306:	4845      	ldr	r0, [pc, #276]	; (800241c <UART_SetConfig+0x298>)
 8002308:	2100      	movs	r1, #0
 800230a:	1980      	adds	r0, r0, r6
 800230c:	f141 0100 	adc.w	r1, r1, #0
 8002310:	f7fe f966 	bl	80005e0 <__aeabi_uldivmod>
          break;
 8002314:	e01a      	b.n	800234c <UART_SetConfig+0x1c8>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002316:	f7fe fcff 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
 800231a:	2300      	movs	r3, #0
 800231c:	0e07      	lsrs	r7, r0, #24
 800231e:	0206      	lsls	r6, r0, #8
 8002320:	6862      	ldr	r2, [r4, #4]
 8002322:	0850      	lsrs	r0, r2, #1
 8002324:	eb16 0b00 	adds.w	fp, r6, r0
 8002328:	f147 0c00 	adc.w	ip, r7, #0
 800232c:	4658      	mov	r0, fp
 800232e:	4661      	mov	r1, ip
 8002330:	f7fe f956 	bl	80005e0 <__aeabi_uldivmod>
          break;
 8002334:	e00a      	b.n	800234c <UART_SetConfig+0x1c8>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002336:	0850      	lsrs	r0, r2, #1
 8002338:	2100      	movs	r1, #0
 800233a:	2300      	movs	r3, #0
 800233c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002340:	f141 0100 	adc.w	r1, r1, #0
 8002344:	f7fe f94c 	bl	80005e0 <__aeabi_uldivmod>
          break;
 8002348:	e000      	b.n	800234c <UART_SetConfig+0x1c8>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 800234a:	2501      	movs	r5, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800234c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <UART_SetConfig+0x29c>)
 8002352:	429a      	cmp	r2, r3
 8002354:	f200 80a1 	bhi.w	800249a <UART_SetConfig+0x316>
        {
           huart->Instance->BRR = tmpreg;
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	60d8      	str	r0, [r3, #12]
 800235c:	e0a0      	b.n	80024a0 <UART_SetConfig+0x31c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235e:	69e3      	ldr	r3, [r4, #28]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	d147      	bne.n	80023f6 <UART_SetConfig+0x272>
  {
    switch (clocksource)
 8002366:	2e08      	cmp	r6, #8
 8002368:	d83b      	bhi.n	80023e2 <UART_SetConfig+0x25e>
 800236a:	e8df f006 	tbb	[pc, r6]
 800236e:	1005      	.short	0x1005
 8002370:	3a263a1b 	.word	0x3a263a1b
 8002374:	3a3a      	.short	0x3a3a
 8002376:	31          	.byte	0x31
 8002377:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002378:	f7ff f988 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 800237c:	6863      	ldr	r3, [r4, #4]
 800237e:	085a      	lsrs	r2, r3, #1
 8002380:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002384:	fbb0 f3f3 	udiv	r3, r0, r3
 8002388:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800238a:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
 800238c:	e02b      	b.n	80023e6 <UART_SetConfig+0x262>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800238e:	f7ff f995 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8002392:	6863      	ldr	r3, [r4, #4]
 8002394:	085a      	lsrs	r2, r3, #1
 8002396:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800239a:	fbb0 f3f3 	udiv	r3, r0, r3
 800239e:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a0:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
 80023a2:	e020      	b.n	80023e6 <UART_SetConfig+0x262>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023a4:	6861      	ldr	r1, [r4, #4]
 80023a6:	084a      	lsrs	r2, r1, #1
 80023a8:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 80023ac:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80023b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b4:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023b6:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
 80023b8:	e015      	b.n	80023e6 <UART_SetConfig+0x262>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023ba:	f7fe fcad 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
 80023be:	6863      	ldr	r3, [r4, #4]
 80023c0:	085a      	lsrs	r2, r3, #1
 80023c2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023cc:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
 80023ce:	e00a      	b.n	80023e6 <UART_SetConfig+0x262>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023d0:	6862      	ldr	r2, [r4, #4]
 80023d2:	0853      	lsrs	r3, r2, #1
 80023d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80023dc:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023de:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 80023e0:	e001      	b.n	80023e6 <UART_SetConfig+0x262>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80023e2:	2501      	movs	r5, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 80023e4:	2300      	movs	r3, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
 80023e6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80023ea:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80023ee:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	60d3      	str	r3, [r2, #12]
 80023f4:	e054      	b.n	80024a0 <UART_SetConfig+0x31c>
  }
  else
  {
    switch (clocksource)
 80023f6:	2e08      	cmp	r6, #8
 80023f8:	d851      	bhi.n	800249e <UART_SetConfig+0x31a>
 80023fa:	e8df f006 	tbb	[pc, r6]
 80023fe:	1e13      	.short	0x1e13
 8002400:	50355029 	.word	0x50355029
 8002404:	5050      	.short	0x5050
 8002406:	40          	.byte	0x40
 8002407:	00          	.byte	0x00
 8002408:	efff69f3 	.word	0xefff69f3
 800240c:	40008000 	.word	0x40008000
 8002410:	40013800 	.word	0x40013800
 8002414:	40004400 	.word	0x40004400
 8002418:	00f42400 	.word	0x00f42400
 800241c:	f4240000 	.word	0xf4240000
 8002420:	000ffcff 	.word	0x000ffcff
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002424:	f7ff f932 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800242e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002432:	b280      	uxth	r0, r0
 8002434:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002436:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
 8002438:	e032      	b.n	80024a0 <UART_SetConfig+0x31c>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800243a:	f7ff f93f 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 800243e:	6863      	ldr	r3, [r4, #4]
 8002440:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002444:	fbb0 f0f3 	udiv	r0, r0, r3
 8002448:	b280      	uxth	r0, r0
 800244a:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800244c:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
 800244e:	e027      	b.n	80024a0 <UART_SetConfig+0x31c>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	084a      	lsrs	r2, r1, #1
 8002454:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002458:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800245c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002460:	b29b      	uxth	r3, r3
 8002462:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002464:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      break;
 8002466:	e01b      	b.n	80024a0 <UART_SetConfig+0x31c>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002468:	f7fe fc56 	bl	8000d18 <HAL_RCC_GetSysClockFreq>
 800246c:	6863      	ldr	r3, [r4, #4]
 800246e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002472:	fbb0 f0f3 	udiv	r0, r0, r3
 8002476:	b280      	uxth	r0, r0
 8002478:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800247a:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
 800247c:	e010      	b.n	80024a0 <UART_SetConfig+0x31c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800247e:	6862      	ldr	r2, [r4, #4]
 8002480:	0853      	lsrs	r3, r2, #1
 8002482:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002486:	fbb3 f3f2 	udiv	r3, r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 800248e:	2500      	movs	r5, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002490:	e006      	b.n	80024a0 <UART_SetConfig+0x31c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
           (tmpreg > (4096 * huart->Init.BaudRate) ))
      {
        ret = HAL_ERROR;
 8002492:	2501      	movs	r5, #1
 8002494:	e004      	b.n	80024a0 <UART_SetConfig+0x31c>
 8002496:	2501      	movs	r5, #1
 8002498:	e002      	b.n	80024a0 <UART_SetConfig+0x31c>
        {
           huart->Instance->BRR = tmpreg;
        }
        else
        {
          ret = HAL_ERROR;
 800249a:	2501      	movs	r5, #1
 800249c:	e000      	b.n	80024a0 <UART_SetConfig+0x31c>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800249e:	2501      	movs	r5, #1
    }
  }

  return ret;

}
 80024a0:	4628      	mov	r0, r5
 80024a2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80024a6:	bf00      	nop

080024a8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024aa:	f013 0f01 	tst.w	r3, #1
 80024ae:	d006      	beq.n	80024be <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024b0:	6801      	ldr	r1, [r0, #0]
 80024b2:	684b      	ldr	r3, [r1, #4]
 80024b4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	d006      	beq.n	80024d4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024c6:	6801      	ldr	r1, [r0, #0]
 80024c8:	684b      	ldr	r3, [r1, #4]
 80024ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024d6:	f013 0f04 	tst.w	r3, #4
 80024da:	d006      	beq.n	80024ea <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024dc:	6801      	ldr	r1, [r0, #0]
 80024de:	684b      	ldr	r3, [r1, #4]
 80024e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80024e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024ec:	f013 0f08 	tst.w	r3, #8
 80024f0:	d006      	beq.n	8002500 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024f2:	6801      	ldr	r1, [r0, #0]
 80024f4:	684b      	ldr	r3, [r1, #4]
 80024f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002502:	f013 0f10 	tst.w	r3, #16
 8002506:	d006      	beq.n	8002516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002508:	6801      	ldr	r1, [r0, #0]
 800250a:	688b      	ldr	r3, [r1, #8]
 800250c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002510:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002516:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002518:	f013 0f20 	tst.w	r3, #32
 800251c:	d006      	beq.n	800252c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800251e:	6801      	ldr	r1, [r0, #0]
 8002520:	688b      	ldr	r3, [r1, #8]
 8002522:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002526:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800252c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800252e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002532:	d011      	beq.n	8002558 <UART_AdvFeatureConfig+0xb0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002534:	6801      	ldr	r1, [r0, #0]
 8002536:	684b      	ldr	r3, [r1, #4]
 8002538:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800253c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002542:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002548:	d106      	bne.n	8002558 <UART_AdvFeatureConfig+0xb0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800254a:	6801      	ldr	r1, [r0, #0]
 800254c:	684b      	ldr	r3, [r1, #4]
 800254e:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8002552:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800255a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800255e:	d006      	beq.n	800256e <UART_AdvFeatureConfig+0xc6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002560:	6801      	ldr	r1, [r0, #0]
 8002562:	684b      	ldr	r3, [r1, #4]
 8002564:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002568:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
 800256e:	4770      	bx	lr

08002570 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002574:	4605      	mov	r5, r0
 8002576:	460f      	mov	r7, r1
 8002578:	4616      	mov	r6, r2
 800257a:	4698      	mov	r8, r3
 800257c:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257e:	e01e      	b.n	80025be <UART_WaitOnFlagUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002580:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002584:	d01b      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0x4e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002586:	b12c      	cbz	r4, 8002594 <UART_WaitOnFlagUntilTimeout+0x24>
 8002588:	f7fe f9e0 	bl	800094c <HAL_GetTick>
 800258c:	ebc8 0000 	rsb	r0, r8, r0
 8002590:	4284      	cmp	r4, r0
 8002592:	d214      	bcs.n	80025be <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002594:	682a      	ldr	r2, [r5, #0]
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800259c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259e:	682a      	ldr	r2, [r5, #0]
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6093      	str	r3, [r2, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80025a8:	2320      	movs	r3, #32
 80025aa:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80025ae:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b2:	2300      	movs	r3, #0
 80025b4:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80025b8:	2003      	movs	r0, #3
 80025ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	ea37 0303 	bics.w	r3, r7, r3
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	42b3      	cmp	r3, r6
 80025ce:	d0d7      	beq.n	8002580 <UART_WaitOnFlagUntilTimeout+0x10>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025d0:	2000      	movs	r0, #0
}
 80025d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d6:	bf00      	nop

080025d8 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80025e0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d14f      	bne.n	800268a <HAL_UART_Transmit+0xb2>
 80025ea:	4604      	mov	r4, r0
 80025ec:	460d      	mov	r5, r1
 80025ee:	4690      	mov	r8, r2
  {
    if((pData == NULL ) || (Size == 0))
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d04c      	beq.n	800268e <HAL_UART_Transmit+0xb6>
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d04c      	beq.n	8002692 <HAL_UART_Transmit+0xba>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d04a      	beq.n	8002696 <HAL_UART_Transmit+0xbe>
 8002600:	2301      	movs	r3, #1
 8002602:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260a:	2321      	movs	r3, #33	; 0x21
 800260c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002610:	f7fe f99c 	bl	800094c <HAL_GetTick>
 8002614:	4607      	mov	r7, r0

    huart->TxXferSize = Size;
 8002616:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800261a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800261e:	e01f      	b.n	8002660 <HAL_UART_Transmit+0x88>
    {
      huart->TxXferCount--;
 8002620:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29b      	uxth	r3, r3
 800262a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	9600      	str	r6, [sp, #0]
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff ff9a 	bl	8002570 <UART_WaitOnFlagUntilTimeout>
 800263c:	bb68      	cbnz	r0, 800269a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263e:	68a3      	ldr	r3, [r4, #8]
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002644:	d108      	bne.n	8002658 <HAL_UART_Transmit+0x80>
 8002646:	6923      	ldr	r3, [r4, #16]
 8002648:	b933      	cbnz	r3, 8002658 <HAL_UART_Transmit+0x80>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002654:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8002656:	e003      	b.n	8002660 <HAL_UART_Transmit+0x88>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	782a      	ldrb	r2, [r5, #0]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
 800265e:	3501      	adds	r5, #1
    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 8002660:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1da      	bne.n	8002620 <HAL_UART_Transmit+0x48>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	9600      	str	r6, [sp, #0]
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff ff7c 	bl	8002570 <UART_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	b980      	cbnz	r0, 800269e <HAL_UART_Transmit+0xc6>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800267c:	2220      	movs	r2, #32
 800267e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002682:	2200      	movs	r2, #0
 8002684:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68

    return HAL_OK;
 8002688:	e00a      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	e008      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e006      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
 8002692:	2301      	movs	r3, #1
 8002694:	e004      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e000      	b.n	80026a0 <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
    {
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	b002      	add	sp, #8
 80026a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026a8 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80026b0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d171      	bne.n	800279e <HAL_UART_Receive+0xf6>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	4690      	mov	r8, r2
  {
    if((pData == NULL ) || (Size == 0))
 80026c0:	2900      	cmp	r1, #0
 80026c2:	d06e      	beq.n	80027a2 <HAL_UART_Receive+0xfa>
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d06e      	beq.n	80027a6 <HAL_UART_Receive+0xfe>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026c8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d06c      	beq.n	80027aa <HAL_UART_Receive+0x102>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026da:	2322      	movs	r3, #34	; 0x22
 80026dc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe f934 	bl	800094c <HAL_GetTick>
 80026e4:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
 80026e6:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80026ea:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026ee:	68a3      	ldr	r3, [r4, #8]
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f4:	d10a      	bne.n	800270c <HAL_UART_Receive+0x64>
 80026f6:	6923      	ldr	r3, [r4, #16]
 80026f8:	b923      	cbnz	r3, 8002704 <HAL_UART_Receive+0x5c>
 80026fa:	f240 13ff 	movw	r3, #511	; 0x1ff
 80026fe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002702:	e01a      	b.n	800273a <HAL_UART_Receive+0x92>
 8002704:	23ff      	movs	r3, #255	; 0xff
 8002706:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800270a:	e016      	b.n	800273a <HAL_UART_Receive+0x92>
 800270c:	b94b      	cbnz	r3, 8002722 <HAL_UART_Receive+0x7a>
 800270e:	6923      	ldr	r3, [r4, #16]
 8002710:	b91b      	cbnz	r3, 800271a <HAL_UART_Receive+0x72>
 8002712:	23ff      	movs	r3, #255	; 0xff
 8002714:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002718:	e00f      	b.n	800273a <HAL_UART_Receive+0x92>
 800271a:	237f      	movs	r3, #127	; 0x7f
 800271c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002720:	e00b      	b.n	800273a <HAL_UART_Receive+0x92>
 8002722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002726:	d108      	bne.n	800273a <HAL_UART_Receive+0x92>
 8002728:	6923      	ldr	r3, [r4, #16]
 800272a:	b91b      	cbnz	r3, 8002734 <HAL_UART_Receive+0x8c>
 800272c:	237f      	movs	r3, #127	; 0x7f
 800272e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8002732:	e002      	b.n	800273a <HAL_UART_Receive+0x92>
 8002734:	233f      	movs	r3, #63	; 0x3f
 8002736:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800273a:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 800273e:	e022      	b.n	8002786 <HAL_UART_Receive+0xde>
    {
      huart->RxXferCount--;
 8002740:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	9600      	str	r6, [sp, #0]
 8002750:	463b      	mov	r3, r7
 8002752:	2200      	movs	r2, #0
 8002754:	2120      	movs	r1, #32
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff ff0a 	bl	8002570 <UART_WaitOnFlagUntilTimeout>
 800275c:	bb38      	cbnz	r0, 80027ae <HAL_UART_Receive+0x106>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800275e:	68a3      	ldr	r3, [r4, #8]
 8002760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002764:	d108      	bne.n	8002778 <HAL_UART_Receive+0xd0>
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	b933      	cbnz	r3, 8002778 <HAL_UART_Receive+0xd0>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800276e:	ea08 0303 	and.w	r3, r8, r3
 8002772:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8002776:	e006      	b.n	8002786 <HAL_UART_Receive+0xde>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800277c:	fa5f f288 	uxtb.w	r2, r8
 8002780:	4013      	ands	r3, r2
 8002782:	702b      	strb	r3, [r5, #0]
 8002784:	3501      	adds	r5, #1
    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 8002786:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1d7      	bne.n	8002740 <HAL_UART_Receive+0x98>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002790:	2320      	movs	r3, #32
 8002792:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002796:	2000      	movs	r0, #0
 8002798:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800279c:	e008      	b.n	80027b0 <HAL_UART_Receive+0x108>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2002      	movs	r0, #2
 80027a0:	e006      	b.n	80027b0 <HAL_UART_Receive+0x108>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
 80027a4:	e004      	b.n	80027b0 <HAL_UART_Receive+0x108>
 80027a6:	2001      	movs	r0, #1
 80027a8:	e002      	b.n	80027b0 <HAL_UART_Receive+0x108>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027aa:	2002      	movs	r0, #2
 80027ac:	e000      	b.n	80027b0 <HAL_UART_Receive+0x108>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 80027ae:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027b0:	b002      	add	sp, #8
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b6:	bf00      	nop

080027b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027b8:	b530      	push	{r4, r5, lr}
 80027ba:	b083      	sub	sp, #12
 80027bc:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	2300      	movs	r3, #0
 80027c0:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80027c2:	f7fe f8c3 	bl	800094c <HAL_GetTick>
 80027c6:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f013 0f08 	tst.w	r3, #8
 80027d0:	d00a      	beq.n	80027e8 <UART_CheckIdleState+0x30>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4603      	mov	r3, r0
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fec5 	bl	8002570 <UART_WaitOnFlagUntilTimeout>
 80027e6:	b9c0      	cbnz	r0, 800281a <UART_CheckIdleState+0x62>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f013 0f04 	tst.w	r3, #4
 80027f0:	d00a      	beq.n	8002808 <UART_CheckIdleState+0x50>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	462b      	mov	r3, r5
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff feb5 	bl	8002570 <UART_WaitOnFlagUntilTimeout>
 8002806:	b950      	cbnz	r0, 800281e <UART_CheckIdleState+0x66>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002808:	2320      	movs	r3, #32
 800280a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002812:	2000      	movs	r0, #0
 8002814:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
 8002818:	e002      	b.n	8002820 <UART_CheckIdleState+0x68>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800281a:	2003      	movs	r0, #3
 800281c:	e000      	b.n	8002820 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800281e:	2003      	movs	r0, #3

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002820:	b003      	add	sp, #12
 8002822:	bd30      	pop	{r4, r5, pc}

08002824 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002824:	b380      	cbz	r0, 8002888 <HAL_UART_Init+0x64>
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002826:	b510      	push	{r4, lr}
 8002828:	4604      	mov	r4, r0
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800282a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800282e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002832:	d104      	bne.n	800283e <HAL_UART_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002834:	2300      	movs	r3, #0
 8002836:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283a:	f000 fe23 	bl	8003484 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800283e:	2324      	movs	r3, #36	; 0x24
 8002840:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fc98 	bl	8002184 <UART_SetConfig>
 8002854:	2801      	cmp	r0, #1
 8002856:	d019      	beq.n	800288c <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800285a:	b113      	cbz	r3, 8002862 <HAL_UART_Init+0x3e>
  {
    UART_AdvFeatureConfig(huart);
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff fe23 	bl	80024a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	6853      	ldr	r3, [r2, #4]
 8002866:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800286a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	6893      	ldr	r3, [r2, #8]
 8002870:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002874:	6093      	str	r3, [r2, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff ff99 	bl	80027b8 <UART_CheckIdleState>
 8002886:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
 800288a:	4770      	bx	lr
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800288c:	bd10      	pop	{r4, pc}
 800288e:	bf00      	nop

08002890 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002890:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f7fe f9a2 	bl	8000bdc <HAL_GPIO_WritePin>
 8002898:	bd08      	pop	{r3, pc}
 800289a:	bf00      	nop

0800289c <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800289c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f7fe f99c 	bl	8000bdc <HAL_GPIO_WritePin>
 80028a4:	bd08      	pop	{r3, pc}
 80028a6:	bf00      	nop

080028a8 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4604      	mov	r4, r0
	if (data & 0x10) {
 80028ac:	f010 0f10 	tst.w	r0, #16
 80028b0:	d004      	beq.n	80028bc <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80028b2:	2110      	movs	r1, #16
 80028b4:	481d      	ldr	r0, [pc, #116]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028b6:	f7ff ffeb 	bl	8002890 <GPIO_SetBits>
 80028ba:	e003      	b.n	80028c4 <hd44780_wr_hi_nibble+0x1c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80028bc:	2110      	movs	r1, #16
 80028be:	481b      	ldr	r0, [pc, #108]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028c0:	f7ff ffec 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80028c4:	f014 0f20 	tst.w	r4, #32
 80028c8:	d004      	beq.n	80028d4 <hd44780_wr_hi_nibble+0x2c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80028ca:	2120      	movs	r1, #32
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028ce:	f7ff ffdf 	bl	8002890 <GPIO_SetBits>
 80028d2:	e003      	b.n	80028dc <hd44780_wr_hi_nibble+0x34>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80028d4:	2120      	movs	r1, #32
 80028d6:	4815      	ldr	r0, [pc, #84]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028d8:	f7ff ffe0 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80028dc:	f014 0f40 	tst.w	r4, #64	; 0x40
 80028e0:	d004      	beq.n	80028ec <hd44780_wr_hi_nibble+0x44>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	4811      	ldr	r0, [pc, #68]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028e6:	f7ff ffd3 	bl	8002890 <GPIO_SetBits>
 80028ea:	e003      	b.n	80028f4 <hd44780_wr_hi_nibble+0x4c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	480f      	ldr	r0, [pc, #60]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028f0:	f7ff ffd4 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x80) {
 80028f4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80028f8:	d004      	beq.n	8002904 <hd44780_wr_hi_nibble+0x5c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 80028fe:	f7ff ffc7 	bl	8002890 <GPIO_SetBits>
 8002902:	e003      	b.n	800290c <hd44780_wr_hi_nibble+0x64>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 8002908:	f7ff ffc8 	bl	800289c <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 800290c:	4c07      	ldr	r4, [pc, #28]	; (800292c <hd44780_wr_hi_nibble+0x84>)
 800290e:	2201      	movs	r2, #1
 8002910:	2102      	movs	r1, #2
 8002912:	4620      	mov	r0, r4
 8002914:	f7fe f962 	bl	8000bdc <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8002918:	2002      	movs	r0, #2
 800291a:	f7fe f81d 	bl	8000958 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800291e:	2200      	movs	r2, #0
 8002920:	2102      	movs	r1, #2
 8002922:	4620      	mov	r0, r4
 8002924:	f7fe f95a 	bl	8000bdc <HAL_GPIO_WritePin>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	48000400 	.word	0x48000400

08002930 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
	if (data & 0x01) {
 8002934:	f010 0f01 	tst.w	r0, #1
 8002938:	d004      	beq.n	8002944 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800293a:	2110      	movs	r1, #16
 800293c:	481d      	ldr	r0, [pc, #116]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 800293e:	f7ff ffa7 	bl	8002890 <GPIO_SetBits>
 8002942:	e003      	b.n	800294c <hd44780_wr_lo_nibble+0x1c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002944:	2110      	movs	r1, #16
 8002946:	481b      	ldr	r0, [pc, #108]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002948:	f7ff ffa8 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x02) {
 800294c:	f014 0f02 	tst.w	r4, #2
 8002950:	d004      	beq.n	800295c <hd44780_wr_lo_nibble+0x2c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002952:	2120      	movs	r1, #32
 8002954:	4817      	ldr	r0, [pc, #92]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002956:	f7ff ff9b 	bl	8002890 <GPIO_SetBits>
 800295a:	e003      	b.n	8002964 <hd44780_wr_lo_nibble+0x34>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800295c:	2120      	movs	r1, #32
 800295e:	4815      	ldr	r0, [pc, #84]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002960:	f7ff ff9c 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8002964:	f014 0f04 	tst.w	r4, #4
 8002968:	d004      	beq.n	8002974 <hd44780_wr_lo_nibble+0x44>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	4811      	ldr	r0, [pc, #68]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 800296e:	f7ff ff8f 	bl	8002890 <GPIO_SetBits>
 8002972:	e003      	b.n	800297c <hd44780_wr_lo_nibble+0x4c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	480f      	ldr	r0, [pc, #60]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002978:	f7ff ff90 	bl	800289c <GPIO_ResetBits>
	}
	if (data & 0x08) {
 800297c:	f014 0f08 	tst.w	r4, #8
 8002980:	d004      	beq.n	800298c <hd44780_wr_lo_nibble+0x5c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002986:	f7ff ff83 	bl	8002890 <GPIO_SetBits>
 800298a:	e003      	b.n	8002994 <hd44780_wr_lo_nibble+0x64>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002990:	f7ff ff84 	bl	800289c <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002994:	4c07      	ldr	r4, [pc, #28]	; (80029b4 <hd44780_wr_lo_nibble+0x84>)
 8002996:	2201      	movs	r2, #1
 8002998:	2102      	movs	r1, #2
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe f91e 	bl	8000bdc <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80029a0:	2002      	movs	r0, #2
 80029a2:	f7fd ffd9 	bl	8000958 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80029a6:	2200      	movs	r2, #0
 80029a8:	2102      	movs	r1, #2
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe f916 	bl	8000bdc <HAL_GPIO_WritePin>
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	bf00      	nop
 80029b4:	48000400 	.word	0x48000400

080029b8 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80029bc:	f7ff ff74 	bl	80028a8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff ffb5 	bl	8002930 <hd44780_wr_lo_nibble>
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4604      	mov	r4, r0
	hd44780_RS_Off();
 80029cc:	2200      	movs	r2, #0
 80029ce:	2101      	movs	r1, #1
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <hd44780_wr_cmd+0x18>)
 80029d2:	f7fe f903 	bl	8000bdc <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ffee 	bl	80029b8 <hd44780_write>
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	bf00      	nop
 80029e0:	48000400 	.word	0x48000400

080029e4 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
	hd44780_RS_On();
 80029e8:	2201      	movs	r2, #1
 80029ea:	4611      	mov	r1, r2
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <hd44780_wr_data+0x18>)
 80029ee:	f7fe f8f5 	bl	8000bdc <HAL_GPIO_WritePin>
	hd44780_write(data);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7ff ffe0 	bl	80029b8 <hd44780_write>
 80029f8:	bd10      	pop	{r4, pc}
 80029fa:	bf00      	nop
 80029fc:	48000400 	.word	0x48000400

08002a00 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HD44780_Init+0xa8>)
 8002a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a08:	f042 0202 	orr.w	r2, r2, #2
 8002a0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002a18:	23f0      	movs	r3, #240	; 0xf0
 8002a1a:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2401      	movs	r4, #1
 8002a1e:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002a20:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002a22:	2603      	movs	r6, #3
 8002a24:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002a26:	4d21      	ldr	r5, [pc, #132]	; (8002aac <HD44780_Init+0xac>)
 8002a28:	a901      	add	r1, sp, #4
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f7fe f810 	bl	8000a50 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002a30:	230b      	movs	r3, #11
 8002a32:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002a36:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002a38:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8002a3a:	a901      	add	r1, sp, #4
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f7fe f807 	bl	8000a50 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8002a42:	2200      	movs	r2, #0
 8002a44:	2102      	movs	r1, #2
 8002a46:	4628      	mov	r0, r5
 8002a48:	f7fe f8c8 	bl	8000bdc <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4621      	mov	r1, r4
 8002a50:	4628      	mov	r0, r5
 8002a52:	f7fe f8c3 	bl	8000bdc <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8002a56:	2200      	movs	r2, #0
 8002a58:	2108      	movs	r1, #8
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7fe f8be 	bl	8000bdc <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8002a60:	2010      	movs	r0, #16
 8002a62:	f7fd ff79 	bl	8000958 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002a66:	2030      	movs	r0, #48	; 0x30
 8002a68:	f7ff ff1e 	bl	80028a8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8002a6c:	2005      	movs	r0, #5
 8002a6e:	f7fd ff73 	bl	8000958 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002a72:	2030      	movs	r0, #48	; 0x30
 8002a74:	f7ff ff18 	bl	80028a8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7fd ff6d 	bl	8000958 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002a7e:	2030      	movs	r0, #48	; 0x30
 8002a80:	f7ff ff12 	bl	80028a8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8002a84:	2020      	movs	r0, #32
 8002a86:	f7ff ff0f 	bl	80028a8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8002a8a:	2028      	movs	r0, #40	; 0x28
 8002a8c:	f7ff ff9c 	bl	80029c8 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8002a90:	200c      	movs	r0, #12
 8002a92:	f7ff ff99 	bl	80029c8 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ff96 	bl	80029c8 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8002a9c:	2006      	movs	r0, #6
 8002a9e:	f7ff ff93 	bl	80029c8 <hd44780_wr_cmd>

}
 8002aa2:	b006      	add	sp, #24
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	48000400 	.word	0x48000400

08002ab0 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8002ab0:	b508      	push	{r3, lr}
	hd44780_wr_data(c & 0xff);
 8002ab2:	f7ff ff97 	bl	80029e4 <hd44780_wr_data>
 8002ab6:	bd08      	pop	{r3, pc}

08002ab8 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8002ab8:	b508      	push	{r3, lr}
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
 8002aba:	280f      	cmp	r0, #15
 8002abc:	d900      	bls.n	8002ac0 <HD44780_GotoXY+0x8>
		x = 0;
 8002abe:	2000      	movs	r0, #0

	if (y > (HD44780_DISP_ROWS - 1))
 8002ac0:	2901      	cmp	r1, #1
 8002ac2:	d900      	bls.n	8002ac6 <HD44780_GotoXY+0xe>
		y = 0;
 8002ac4:	2100      	movs	r1, #0

	switch (y) {
 8002ac6:	2903      	cmp	r1, #3
 8002ac8:	d803      	bhi.n	8002ad2 <HD44780_GotoXY+0x1a>
 8002aca:	e8df f001 	tbb	[pc, r1]
 8002ace:	040a      	.short	0x040a
 8002ad0:	0806      	.short	0x0806
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e006      	b.n	8002ae4 <HD44780_GotoXY+0x2c>
	switch (y) {
	case 0:
		copy_y = 0x80;
		break;
	case 1:
		copy_y = 0xc0;
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
		break;
 8002ad8:	e004      	b.n	8002ae4 <HD44780_GotoXY+0x2c>
	case 2:
		copy_y = 0x94;
 8002ada:	2394      	movs	r3, #148	; 0x94
		break;
 8002adc:	e002      	b.n	8002ae4 <HD44780_GotoXY+0x2c>
	case 3:
		copy_y = 0xd4;
 8002ade:	23d4      	movs	r3, #212	; 0xd4
		break;
 8002ae0:	e000      	b.n	8002ae4 <HD44780_GotoXY+0x2c>
	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;

	switch (y) {
	case 0:
		copy_y = 0x80;
 8002ae2:	2380      	movs	r3, #128	; 0x80
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8002ae4:	4418      	add	r0, r3
 8002ae6:	b2c0      	uxtb	r0, r0
 8002ae8:	f7ff ff6e 	bl	80029c8 <hd44780_wr_cmd>
 8002aec:	bd08      	pop	{r3, pc}
 8002aee:	bf00      	nop

08002af0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8002af0:	b510      	push	{r4, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	5ce0      	ldrb	r0, [r4, r3]
 8002afe:	f7ff ffd7 	bl	8002ab0 <HD44780_PutChar>
		i++;
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	3301      	adds	r3, #1
 8002b06:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8002b08:	9b01      	ldr	r3, [sp, #4]
 8002b0a:	5ce3      	ldrb	r3, [r4, r3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f4      	bne.n	8002afa <HD44780_PutStr+0xa>
}
 8002b10:	b002      	add	sp, #8
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8002b14:	b508      	push	{r3, lr}
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7ff ff56 	bl	80029c8 <hd44780_wr_cmd>
 8002b1c:	bd08      	pop	{r3, pc}
 8002b1e:	bf00      	nop

08002b20 <deBounceInit>:
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8002b20:	b500      	push	{lr}
 8002b22:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 8002b24:	280f      	cmp	r0, #15
 8002b26:	d840      	bhi.n	8002baa <deBounceInit+0x8a>
 8002b28:	e8df f000 	tbb	[pc, r0]
 8002b2c:	110e0b08 	.word	0x110e0b08
 8002b30:	1d1a1714 	.word	0x1d1a1714
 8002b34:	2c282420 	.word	0x2c282420
 8002b38:	3c383430 	.word	0x3c383430
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	e033      	b.n	8002baa <deBounceInit+0x8a>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002b42:	2302      	movs	r3, #2
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	e030      	b.n	8002baa <deBounceInit+0x8a>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	e02d      	b.n	8002baa <deBounceInit+0x8a>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002b4e:	2308      	movs	r3, #8
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e02a      	b.n	8002baa <deBounceInit+0x8a>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002b54:	2310      	movs	r3, #16
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	e027      	b.n	8002baa <deBounceInit+0x8a>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	e024      	b.n	8002baa <deBounceInit+0x8a>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	e021      	b.n	8002baa <deBounceInit+0x8a>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	e01e      	b.n	8002baa <deBounceInit+0x8a>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	e01a      	b.n	8002baa <deBounceInit+0x8a>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	e016      	b.n	8002baa <deBounceInit+0x8a>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	e012      	b.n	8002baa <deBounceInit+0x8a>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	e00e      	b.n	8002baa <deBounceInit+0x8a>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	e00a      	b.n	8002baa <deBounceInit+0x8a>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	e006      	b.n	8002baa <deBounceInit+0x8a>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	e002      	b.n	8002baa <deBounceInit+0x8a>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba8:	9301      	str	r3, [sp, #4]
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002baa:	2300      	movs	r3, #0
 8002bac:	9302      	str	r3, [sp, #8]
	switch (mode)
 8002bae:	b112      	cbz	r2, 8002bb6 <deBounceInit+0x96>
 8002bb0:	2a01      	cmp	r2, #1
 8002bb2:	d003      	beq.n	8002bbc <deBounceInit+0x9c>
 8002bb4:	e004      	b.n	8002bc0 <deBounceInit+0xa0>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	9303      	str	r3, [sp, #12]
 8002bba:	e001      	b.n	8002bc0 <deBounceInit+0xa0>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9303      	str	r3, [sp, #12]
	}
	switch (port)
 8002bc0:	2942      	cmp	r1, #66	; 0x42
 8002bc2:	d009      	beq.n	8002bd8 <deBounceInit+0xb8>
 8002bc4:	2943      	cmp	r1, #67	; 0x43
 8002bc6:	d00c      	beq.n	8002be2 <deBounceInit+0xc2>
 8002bc8:	2941      	cmp	r1, #65	; 0x41
 8002bca:	d10e      	bne.n	8002bea <deBounceInit+0xca>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8002bcc:	a901      	add	r1, sp, #4
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd2:	f7fd ff3d 	bl	8000a50 <HAL_GPIO_Init>
 8002bd6:	e008      	b.n	8002bea <deBounceInit+0xca>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8002bd8:	a901      	add	r1, sp, #4
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <deBounceInit+0xdc>)
 8002bdc:	f7fd ff38 	bl	8000a50 <HAL_GPIO_Init>
 8002be0:	e003      	b.n	8002bea <deBounceInit+0xca>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8002be2:	a901      	add	r1, sp, #4
 8002be4:	4806      	ldr	r0, [pc, #24]	; (8002c00 <deBounceInit+0xe0>)
 8002be6:	f7fd ff33 	bl	8000a50 <HAL_GPIO_Init>
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	a901      	add	r1, sp, #4
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf0:	f7fd ff2e 	bl	8000a50 <HAL_GPIO_Init>
}
 8002bf4:	b007      	add	sp, #28
 8002bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bfa:	bf00      	nop
 8002bfc:	48000400 	.word	0x48000400
 8002c00:	48000800 	.word	0x48000800

08002c04 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8002c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	4690      	mov	r8, r2
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
	int8_t pinStateWeAreLookingFor = 0;
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8002c10:	f7fd fe9c 	bl	800094c <HAL_GetTick>
 8002c14:	4607      	mov	r7, r0

	GPIO_InitTypeDef GPIO_InitStruct;
		/*Configure GPIO pin : */
		switch(pin)
 8002c16:	2d0f      	cmp	r5, #15
 8002c18:	d840      	bhi.n	8002c9c <deBounceReadPin+0x98>
 8002c1a:	e8df f005 	tbb	[pc, r5]
 8002c1e:	0b08      	.short	0x0b08
 8002c20:	1714110e 	.word	0x1714110e
 8002c24:	24201d1a 	.word	0x24201d1a
 8002c28:	34302c28 	.word	0x34302c28
 8002c2c:	3c38      	.short	0x3c38
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	e033      	b.n	8002c9c <deBounceReadPin+0x98>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002c34:	2302      	movs	r3, #2
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	e030      	b.n	8002c9c <deBounceReadPin+0x98>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	e02d      	b.n	8002c9c <deBounceReadPin+0x98>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002c40:	2308      	movs	r3, #8
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	e02a      	b.n	8002c9c <deBounceReadPin+0x98>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002c46:	2310      	movs	r3, #16
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	e027      	b.n	8002c9c <deBounceReadPin+0x98>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	e024      	b.n	8002c9c <deBounceReadPin+0x98>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	e021      	b.n	8002c9c <deBounceReadPin+0x98>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	e01e      	b.n	8002c9c <deBounceReadPin+0x98>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	e01a      	b.n	8002c9c <deBounceReadPin+0x98>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	e016      	b.n	8002c9c <deBounceReadPin+0x98>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	e012      	b.n	8002c9c <deBounceReadPin+0x98>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	e00e      	b.n	8002c9c <deBounceReadPin+0x98>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	e00a      	b.n	8002c9c <deBounceReadPin+0x98>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	e006      	b.n	8002c9c <deBounceReadPin+0x98>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	e002      	b.n	8002c9c <deBounceReadPin+0x98>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9a:	9301      	str	r3, [sp, #4]
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	switch (port)
 8002c9c:	2c42      	cmp	r4, #66	; 0x42
 8002c9e:	d00b      	beq.n	8002cb8 <deBounceReadPin+0xb4>
 8002ca0:	2c43      	cmp	r4, #67	; 0x43
 8002ca2:	d010      	beq.n	8002cc6 <deBounceReadPin+0xc2>
 8002ca4:	2c41      	cmp	r4, #65	; 0x41
 8002ca6:	d115      	bne.n	8002cd4 <deBounceReadPin+0xd0>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8002ca8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f7fd ff8c 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	e00e      	b.n	8002cd6 <deBounceReadPin+0xd2>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002cb8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002cbc:	481e      	ldr	r0, [pc, #120]	; (8002d38 <deBounceReadPin+0x134>)
 8002cbe:	f7fd ff85 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002cc2:	4606      	mov	r6, r0
 8002cc4:	e007      	b.n	8002cd6 <deBounceReadPin+0xd2>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8002cc6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002cca:	481c      	ldr	r0, [pc, #112]	; (8002d3c <deBounceReadPin+0x138>)
 8002ccc:	f7fd ff7e 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002cd0:	4606      	mov	r6, r0
 8002cd2:	e000      	b.n	8002cd6 <deBounceReadPin+0xd2>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 8002cd4:	2600      	movs	r6, #0
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 8002cd6:	b90e      	cbnz	r6, 8002cdc <deBounceReadPin+0xd8>
	{
		pinStateWeAreLookingFor = 0;
 8002cd8:	2500      	movs	r5, #0
 8002cda:	e023      	b.n	8002d24 <deBounceReadPin+0x120>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 8002cdc:	2501      	movs	r5, #1
 8002cde:	e021      	b.n	8002d24 <deBounceReadPin+0x120>

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
	{

		switch (port)
 8002ce0:	2c42      	cmp	r4, #66	; 0x42
 8002ce2:	d00b      	beq.n	8002cfc <deBounceReadPin+0xf8>
 8002ce4:	2c43      	cmp	r4, #67	; 0x43
 8002ce6:	d010      	beq.n	8002d0a <deBounceReadPin+0x106>
 8002ce8:	2c41      	cmp	r4, #65	; 0x41
 8002cea:	d114      	bne.n	8002d16 <deBounceReadPin+0x112>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8002cec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f7fd ff6a 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	e00c      	b.n	8002d16 <deBounceReadPin+0x112>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002cfc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <deBounceReadPin+0x134>)
 8002d02:	f7fd ff63 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002d06:	4606      	mov	r6, r0
 8002d08:	e005      	b.n	8002d16 <deBounceReadPin+0x112>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8002d0a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8002d0e:	480b      	ldr	r0, [pc, #44]	; (8002d3c <deBounceReadPin+0x138>)
 8002d10:	f7fd ff5c 	bl	8000bcc <HAL_GPIO_ReadPin>
 8002d14:	4606      	mov	r6, r0
		}
		if(pinState != pinStateWeAreLookingFor)
 8002d16:	42ae      	cmp	r6, r5
 8002d18:	d004      	beq.n	8002d24 <deBounceReadPin+0x120>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8002d1a:	f085 0501 	eor.w	r5, r5, #1
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8002d1e:	f7fd fe15 	bl	800094c <HAL_GetTick>
 8002d22:	4607      	mov	r7, r0
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8002d24:	f7fd fe12 	bl	800094c <HAL_GetTick>
 8002d28:	eb08 0307 	add.w	r3, r8, r7
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d3d7      	bcc.n	8002ce0 <deBounceReadPin+0xdc>
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
		}
	}
	return (pinStateWeAreLookingFor);
}
 8002d30:	4628      	mov	r0, r5
 8002d32:	b006      	add	sp, #24
 8002d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800

08002d40 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void) {
 8002d40:	b510      	push	{r4, lr}
 8002d42:	b088      	sub	sp, #32

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <MX_GPIO_Init+0x64>)
 8002d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d48:	f042 0204 	orr.w	r2, r2, #4
 8002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d50:	f002 0204 	and.w	r2, r2, #4
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d62:	f002 0201 	and.w	r2, r2, #1
 8002d66:	9201      	str	r2, [sp, #4]
 8002d68:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d6c:	f042 0202 	orr.w	r2, r2, #2
 8002d70:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	9302      	str	r3, [sp, #8]
 8002d7a:	9b02      	ldr	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <MX_GPIO_Init+0x68>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2108      	movs	r1, #8
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7fd ff2a 	bl	8000bdc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d96:	a903      	add	r1, sp, #12
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7fd fe59 	bl	8000a50 <HAL_GPIO_Init>

}
 8002d9e:	b008      	add	sp, #32
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	48000400 	.word	0x48000400

08002dac <pushButtonInit>:
//
//                   Note: Don't use PA2 as it is connected to VCP TX and you'll
//                   lose printf output ability.
//   PARAMETERS    : None
//   RETURNS       : nothing
void pushButtonInit() {
 8002dac:	b508      	push	{r3, lr}
	deBounceInit(chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002dae:	2201      	movs	r2, #1
 8002db0:	2141      	movs	r1, #65	; 0x41
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7ff feb4 	bl	8002b20 <deBounceInit>
	deBounceInit(savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002db8:	2201      	movs	r2, #1
 8002dba:	2141      	movs	r1, #65	; 0x41
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7ff feaf 	bl	8002b20 <deBounceInit>
	deBounceInit(okPbPin, 'A', 1); 			//1 = pullup resistor enabled
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2141      	movs	r1, #65	; 0x41
 8002dc6:	2004      	movs	r0, #4
 8002dc8:	f7ff feaa 	bl	8002b20 <deBounceInit>
	deBounceInit(cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2141      	movs	r1, #65	; 0x41
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f7ff fea5 	bl	8002b20 <deBounceInit>
 8002dd6:	bd08      	pop	{r3, pc}

08002dd8 <displayWelcome>:
// FUNCTION      : displayWelcome()
// DESCRIPTION   : clears the LCD display and displays
//                 Welcome on line 1 of the display
// PARAMETERS    : None
// RETURNS       : nothing
void displayWelcome() {
 8002dd8:	b500      	push	{lr}
 8002dda:	b085      	sub	sp, #20
	char stringBuffer[16] = { 0 };
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	9303      	str	r3, [sp, #12]
	HD44780_ClrScr();
 8002de6:	f7ff fe95 	bl	8002b14 <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "Welcome ! ");
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <displayWelcome+0x30>)
 8002dec:	466b      	mov	r3, sp
 8002dee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df0:	c303      	stmia	r3!, {r0, r1}
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	0c12      	lsrs	r2, r2, #16
 8002df6:	f88d 200a 	strb.w	r2, [sp, #10]
	HD44780_PutStr(stringBuffer);
 8002dfa:	4668      	mov	r0, sp
 8002dfc:	f7ff fe78 	bl	8002af0 <HD44780_PutStr>

}
 8002e00:	b005      	add	sp, #20
 8002e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e06:	bf00      	nop
 8002e08:	08005580 	.word	0x08005580

08002e0c <displayAmount>:
// FUNCTION      : displayAmount()
// DESCRIPTION   : clears the LCD display and displays
//                 the $amount received on line 1 of the display
// PARAMETERS    : float - amount to display
// RETURNS       : nothing
void displayAmount(float amount) {
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	ee10 4a10 	vmov	r4, s0
	char stringBuffer[16] = { 0 };
 8002e14:	2300      	movs	r3, #0
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	9303      	str	r3, [sp, #12]
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	9305      	str	r3, [sp, #20]
	HD44780_ClrScr();
 8002e1e:	f7ff fe79 	bl	8002b14 <HD44780_ClrScr>
	snprintf(stringBuffer, 16, "$%.2f", amount);
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fd fb88 	bl	8000538 <__aeabi_f2d>
 8002e28:	e9cd 0100 	strd	r0, r1, [sp]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <displayAmount+0x34>)
 8002e2e:	2110      	movs	r1, #16
 8002e30:	a802      	add	r0, sp, #8
 8002e32:	f000 fdf7 	bl	8003a24 <sniprintf>
	HD44780_PutStr(stringBuffer);
 8002e36:	a802      	add	r0, sp, #8
 8002e38:	f7ff fe5a 	bl	8002af0 <HD44780_PutStr>
}
 8002e3c:	b006      	add	sp, #24
 8002e3e:	bd10      	pop	{r4, pc}
 8002e40:	0800558c 	.word	0x0800558c

08002e44 <checkIfAmountRecd>:

// FUNCTION      : checkIfAmountRecd()
// DESCRIPTION   : accept the Amount entered by user
// PARAMETERS    : none
// RETURNS       : float, the amount in $ to be debited
float checkIfAmountRecd() {
 8002e44:	b510      	push	{r4, lr}
 8002e46:	b082      	sub	sp, #8
	float debitAmount = 0;
 8002e48:	ac02      	add	r4, sp, #8
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f844 3d04 	str.w	r3, [r4, #-4]!
	printf("waiting for debit Amount to be received on serial port\r\n");
 8002e50:	4810      	ldr	r0, [pc, #64]	; (8002e94 <checkIfAmountRecd+0x50>)
 8002e52:	f000 fd8b 	bl	800396c <puts>
	printf("Enter the Amount");
 8002e56:	4810      	ldr	r0, [pc, #64]	; (8002e98 <checkIfAmountRecd+0x54>)
 8002e58:	f000 fd16 	bl	8003888 <iprintf>
	HD44780_GotoXY(0, 0);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4608      	mov	r0, r1
 8002e60:	f7ff fe2a 	bl	8002ab8 <HD44780_GotoXY>
	displayWelcome();
 8002e64:	f7ff ffb8 	bl	8002dd8 <displayWelcome>
	HD44780_GotoXY(0, 1);
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff fe24 	bl	8002ab8 <HD44780_GotoXY>
	HD44780_PutStr("Enter Amount");
 8002e70:	480a      	ldr	r0, [pc, #40]	; (8002e9c <checkIfAmountRecd+0x58>)
 8002e72:	f7ff fe3d 	bl	8002af0 <HD44780_PutStr>
	int16_t result = 0;
	result = scanf("%f", &debitAmount);
 8002e76:	4621      	mov	r1, r4
 8002e78:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <checkIfAmountRecd+0x5c>)
 8002e7a:	f000 fdbb 	bl	80039f4 <iscanf>
 8002e7e:	b200      	sxth	r0, r0
	if (result == 0)		//then somehow non-float chars were entered
 8002e80:	b920      	cbnz	r0, 8002e8c <checkIfAmountRecd+0x48>
			{						//and nothing was assigned to %f
		fpurge(stdin); 	//clear the last erroneous char(s) from the input stream
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <checkIfAmountRecd+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6858      	ldr	r0, [r3, #4]
 8002e88:	f000 fc24 	bl	80036d4 <fpurge>
	}
	return debitAmount;
}
 8002e8c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8002e90:	b002      	add	sp, #8
 8002e92:	bd10      	pop	{r4, pc}
 8002e94:	08005594 	.word	0x08005594
 8002e98:	080055cc 	.word	0x080055cc
 8002e9c:	080055e0 	.word	0x080055e0
 8002ea0:	080055f0 	.word	0x080055f0
 8002ea4:	20000068 	.word	0x20000068

08002ea8 <checkOkOrCancel>:
//                 button has been pressed.
// PARAMETERS    : none
// RETURNS       : int8_t, 3 if cancel pressed, 4 if ok
//                 ok pressed. 0 returned if neither
//                 has pressed.
int8_t checkOkOrCancel() {
 8002ea8:	b508      	push	{r3, lr}
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0) {
 8002eaa:	220a      	movs	r2, #10
 8002eac:	2141      	movs	r1, #65	; 0x41
 8002eae:	2003      	movs	r0, #3
 8002eb0:	f7ff fea8 	bl	8002c04 <deBounceReadPin>
 8002eb4:	b138      	cbz	r0, 8002ec6 <checkOkOrCancel+0x1e>
		//then the cancel pushbutton has been pressed
		return cancel;
	} else if (deBounceReadPin(okPbPin, 'A', 10) == 0) {
 8002eb6:	220a      	movs	r2, #10
 8002eb8:	2141      	movs	r1, #65	; 0x41
 8002eba:	2004      	movs	r0, #4
 8002ebc:	f7ff fea2 	bl	8002c04 <deBounceReadPin>
 8002ec0:	b918      	cbnz	r0, 8002eca <checkOkOrCancel+0x22>
		//then ok pressed
		return ok;
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	bd08      	pop	{r3, pc}
//                 ok pressed. 0 returned if neither
//                 has pressed.
int8_t checkOkOrCancel() {
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0) {
		//then the cancel pushbutton has been pressed
		return cancel;
 8002ec6:	2004      	movs	r0, #4
 8002ec8:	bd08      	pop	{r3, pc}
	} else if (deBounceReadPin(okPbPin, 'A', 10) == 0) {
		//then ok pressed
		return ok;

	} else {
		return None; //as ok or cancel was not pressed.
 8002eca:	2000      	movs	r0, #0
	}
}
 8002ecc:	bd08      	pop	{r3, pc}
 8002ece:	bf00      	nop

08002ed0 <checkorSaving>:
int8_t checkorSaving() {
 8002ed0:	b508      	push	{r3, lr}
	if (deBounceReadPin(chequingPbPin, 'A', 10) == 0) {
 8002ed2:	220a      	movs	r2, #10
 8002ed4:	2141      	movs	r1, #65	; 0x41
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff fe94 	bl	8002c04 <deBounceReadPin>
 8002edc:	b168      	cbz	r0, 8002efa <checkorSaving+0x2a>
		return chequing;
	}
	if (deBounceReadPin(savingsPbPin, 'A', 10) == 0) {
 8002ede:	220a      	movs	r2, #10
 8002ee0:	2141      	movs	r1, #65	; 0x41
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7ff fe8e 	bl	8002c04 <deBounceReadPin>
 8002ee8:	b148      	cbz	r0, 8002efe <checkorSaving+0x2e>
		return savings;
	}
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0) {
 8002eea:	220a      	movs	r2, #10
 8002eec:	2141      	movs	r1, #65	; 0x41
 8002eee:	2003      	movs	r0, #3
 8002ef0:	f7ff fe88 	bl	8002c04 <deBounceReadPin>
 8002ef4:	b928      	cbnz	r0, 8002f02 <checkorSaving+0x32>
		return cancel;
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	bd08      	pop	{r3, pc}
		return None; //as ok or cancel was not pressed.
	}
}
int8_t checkorSaving() {
	if (deBounceReadPin(chequingPbPin, 'A', 10) == 0) {
		return chequing;
 8002efa:	2001      	movs	r0, #1
 8002efc:	bd08      	pop	{r3, pc}
	}
	if (deBounceReadPin(savingsPbPin, 'A', 10) == 0) {
		return savings;
 8002efe:	2002      	movs	r0, #2
 8002f00:	bd08      	pop	{r3, pc}
	}
	if (deBounceReadPin(cancelPbPin, 'A', 10) == 0) {
		return cancel;
	}
	return None;     // as chequing,savings and cancel none is pressed
 8002f02:	2000      	movs	r0, #0
}
 8002f04:	bd08      	pop	{r3, pc}
 8002f06:	bf00      	nop

08002f08 <displayOkCancel>:
// FUNCTION      : displayOkOrCancel()
// DESCRIPTION   : displays "OK or Cancel?" on line 2 of LCD
// PARAMETERS    : none
// RETURNS       : none.
void displayOkCancel() {
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	b084      	sub	sp, #16
	char stringBuffer[16] = { 0 };
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	9000      	str	r0, [sp, #0]
 8002f10:	9001      	str	r0, [sp, #4]
 8002f12:	9002      	str	r0, [sp, #8]
 8002f14:	9003      	str	r0, [sp, #12]
	HD44780_GotoXY(0, 1); //move to second line first position
 8002f16:	2101      	movs	r1, #1
 8002f18:	f7ff fdce 	bl	8002ab8 <HD44780_GotoXY>
	snprintf(stringBuffer, 16, "OK or Cancel?");
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <displayOkCancel+0x28>)
 8002f1e:	466c      	mov	r4, sp
 8002f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f22:	c407      	stmia	r4!, {r0, r1, r2}
 8002f24:	8023      	strh	r3, [r4, #0]
	HD44780_PutStr(stringBuffer);
 8002f26:	4668      	mov	r0, sp
 8002f28:	f7ff fde2 	bl	8002af0 <HD44780_PutStr>
}
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	080055f4 	.word	0x080055f4

08002f34 <displayCheckOrSaving>:
// FUNCTION      : displayCheckOrSaving()
// DESCRIPTION   : display Check Or Saving on  LCD
// PARAMETERS    : none
// RETURNS       : none.
void displayCheckOrSaving() {
 8002f34:	b510      	push	{r4, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
	char StringBuffer[16] = { 0 };
 8002f38:	2400      	movs	r4, #0
 8002f3a:	9406      	str	r4, [sp, #24]
 8002f3c:	9407      	str	r4, [sp, #28]
 8002f3e:	9408      	str	r4, [sp, #32]
 8002f40:	9409      	str	r4, [sp, #36]	; 0x24
	char stringBuffer[20]={0};
 8002f42:	9401      	str	r4, [sp, #4]
 8002f44:	9402      	str	r4, [sp, #8]
 8002f46:	9403      	str	r4, [sp, #12]
 8002f48:	9404      	str	r4, [sp, #16]
 8002f4a:	9405      	str	r4, [sp, #20]
	HD44780_GotoXY(0, 0);
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff fdb2 	bl	8002ab8 <HD44780_GotoXY>
	snprintf(StringBuffer, 16, "Check or");
 8002f54:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <displayCheckOrSaving+0x54>)
 8002f56:	ab06      	add	r3, sp, #24
 8002f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f5a:	c303      	stmia	r3!, {r0, r1}
 8002f5c:	701a      	strb	r2, [r3, #0]
	HD44780_PutStr(StringBuffer);
 8002f5e:	a806      	add	r0, sp, #24
 8002f60:	f7ff fdc6 	bl	8002af0 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8002f64:	2101      	movs	r1, #1
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff fda6 	bl	8002ab8 <HD44780_GotoXY>
	snprintf(StringBuffer, 16, "Saving");
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <displayCheckOrSaving+0x58>)
 8002f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f72:	9006      	str	r0, [sp, #24]
 8002f74:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002f78:	0c09      	lsrs	r1, r1, #16
 8002f7a:	f88d 101e 	strb.w	r1, [sp, #30]
	HD44780_PutStr(stringBuffer);
 8002f7e:	a801      	add	r0, sp, #4
 8002f80:	f7ff fdb6 	bl	8002af0 <HD44780_PutStr>
}
 8002f84:	b00a      	add	sp, #40	; 0x28
 8002f86:	bd10      	pop	{r4, pc}
 8002f88:	08005604 	.word	0x08005604
 8002f8c:	08005610 	.word	0x08005610

08002f90 <displayTransactionCancelled>:
// FUNCTION      : displayTransactionCancelled()
// DESCRIPTION   : this function dispalys the Transaction Cancelled on LCD
// PARAMETERS    : none
// RETURNS       : none.
void displayTransactionCancelled() {
 8002f90:	b508      	push	{r3, lr}
	printf("Transaction Cancelled \r\n");
 8002f92:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <displayTransactionCancelled+0x38>)
 8002f94:	f000 fcea 	bl	800396c <puts>
	HD44780_ClrScr();
 8002f98:	f7ff fdbc 	bl	8002b14 <HD44780_ClrScr>
	HD44780_GotoXY(0, 0);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	f7ff fd8a 	bl	8002ab8 <HD44780_GotoXY>
	HD44780_PutStr("Transaction");
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <displayTransactionCancelled+0x3c>)
 8002fa6:	f7ff fda3 	bl	8002af0 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8002faa:	2101      	movs	r1, #1
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff fd83 	bl	8002ab8 <HD44780_GotoXY>
	HD44780_PutStr("Cancelled");
 8002fb2:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <displayTransactionCancelled+0x40>)
 8002fb4:	f7ff fd9c 	bl	8002af0 <HD44780_PutStr>
	HAL_Delay(1000);
 8002fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fbc:	f7fd fccc 	bl	8000958 <HAL_Delay>
	HD44780_ClrScr();
 8002fc0:	f7ff fda8 	bl	8002b14 <HD44780_ClrScr>
 8002fc4:	bd08      	pop	{r3, pc}
 8002fc6:	bf00      	nop
 8002fc8:	08005618 	.word	0x08005618
 8002fcc:	08005630 	.word	0x08005630
 8002fd0:	0800563c 	.word	0x0800563c

08002fd4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
 8002fd4:	e7fe      	b.n	8002fd4 <Error_Handler>
 8002fd6:	bf00      	nop

08002fd8 <MX_USART2_UART_Init>:
	HAL_TIM_MspPostInit(&htim1);

}

/* USART2 init function */
static void MX_USART2_UART_Init(void) {
 8002fd8:	b508      	push	{r3, lr}

	huart2.Instance = USART2;
 8002fda:	480b      	ldr	r0, [pc, #44]	; (8003008 <MX_USART2_UART_Init+0x30>)
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <MX_USART2_UART_Init+0x34>)
 8002fde:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 9600;
 8002fe0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002fe4:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002fea:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002fec:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002fee:	220c      	movs	r2, #12
 8002ff0:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff6:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002ffa:	f7ff fc13 	bl	8002824 <HAL_UART_Init>
 8002ffe:	b108      	cbz	r0, 8003004 <MX_USART2_UART_Init+0x2c>
		Error_Handler();
 8003000:	f7ff ffe8 	bl	8002fd4 <Error_Handler>
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	20000144 	.word	0x20000144
 800300c:	40004400 	.word	0x40004400

08003010 <MX_TIM1_Init>:
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* TIM1 init function */
static void MX_TIM1_Init(void) {
 8003010:	b530      	push	{r4, r5, lr}
 8003012:	b097      	sub	sp, #92	; 0x5c

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 8003014:	4827      	ldr	r0, [pc, #156]	; (80030b4 <MX_TIM1_Init+0xa4>)
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <MX_TIM1_Init+0xa8>)
 8003018:	6003      	str	r3, [r0, #0]
	htim1.Init.Prescaler = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301e:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 9090;
 8003020:	f242 3282 	movw	r2, #9090	; 0x2382
 8003024:	60c2      	str	r2, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003026:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 8003028:	6143      	str	r3, [r0, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800302a:	f7fe fefb 	bl	8001e24 <HAL_TIM_PWM_Init>
 800302e:	b108      	cbz	r0, 8003034 <MX_TIM1_Init+0x24>
		Error_Handler();
 8003030:	f7ff ffd0 	bl	8002fd4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003034:	2300      	movs	r3, #0
 8003036:	9313      	str	r3, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003038:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303a:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800303c:	a913      	add	r1, sp, #76	; 0x4c
 800303e:	481d      	ldr	r0, [pc, #116]	; (80030b4 <MX_TIM1_Init+0xa4>)
 8003040:	f7ff f830 	bl	80020a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003044:	b108      	cbz	r0, 800304a <MX_TIM1_Init+0x3a>
			!= HAL_OK) {
		Error_Handler();
 8003046:	f7ff ffc5 	bl	8002fd4 <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304a:	2360      	movs	r3, #96	; 0x60
 800304c:	930c      	str	r3, [sp, #48]	; 0x30
	sConfigOC.Pulse = 4045;
 800304e:	f640 73cd 	movw	r3, #4045	; 0xfcd
 8003052:	930d      	str	r3, [sp, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003054:	2400      	movs	r4, #0
 8003056:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003058:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305a:	9410      	str	r4, [sp, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800305c:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800305e:	9412      	str	r4, [sp, #72]	; 0x48
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003060:	4d14      	ldr	r5, [pc, #80]	; (80030b4 <MX_TIM1_Init+0xa4>)
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f7fe ffdf 	bl	8002028 <HAL_TIM_PWM_Stop>
	/*************************************/
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800306a:	4622      	mov	r2, r4
 800306c:	a90c      	add	r1, sp, #48	; 0x30
 800306e:	4628      	mov	r0, r5
 8003070:	f7fe ff2e 	bl	8001ed0 <HAL_TIM_PWM_ConfigChannel>
 8003074:	b108      	cbz	r0, 800307a <MX_TIM1_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8003076:	f7ff ffad 	bl	8002fd4 <Error_Handler>
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	9301      	str	r3, [sp, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800307e:	9302      	str	r3, [sp, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003080:	9303      	str	r3, [sp, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003082:	9304      	str	r3, [sp, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003084:	9305      	str	r3, [sp, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800308a:	9206      	str	r2, [sp, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800308c:	9307      	str	r3, [sp, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800308e:	9308      	str	r3, [sp, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003094:	9209      	str	r2, [sp, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003096:	930a      	str	r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003098:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800309a:	a901      	add	r1, sp, #4
 800309c:	4805      	ldr	r0, [pc, #20]	; (80030b4 <MX_TIM1_Init+0xa4>)
 800309e:	f7ff f829 	bl	80020f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80030a2:	b108      	cbz	r0, 80030a8 <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80030a4:	f7ff ff96 	bl	8002fd4 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <MX_TIM1_Init+0xa4>)
 80030aa:	f000 f9d1 	bl	8003450 <HAL_TIM_MspPostInit>

}
 80030ae:	b017      	add	sp, #92	; 0x5c
 80030b0:	bd30      	pop	{r4, r5, pc}
 80030b2:	bf00      	nop
 80030b4:	20000108 	.word	0x20000108
 80030b8:	40012c00 	.word	0x40012c00

080030bc <SystemClock_Config>:
	} //closing brace for while(1)
//		/* USER CODE END 3 */
} //closing brace for main

/** System Clock Configuration **/
void SystemClock_Config(void) {
 80030bc:	b500      	push	{lr}
 80030be:	b0ad      	sub	sp, #180	; 0xb4
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80030c0:	2110      	movs	r1, #16
 80030c2:	911b      	str	r1, [sp, #108]	; 0x6c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030c4:	2201      	movs	r2, #1
 80030c6:	9221      	str	r2, [sp, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	9322      	str	r3, [sp, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80030cc:	2360      	movs	r3, #96	; 0x60
 80030ce:	9323      	str	r3, [sp, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030d0:	2302      	movs	r3, #2
 80030d2:	9325      	str	r3, [sp, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80030d4:	9226      	str	r2, [sp, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 80030d6:	9227      	str	r2, [sp, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 80030d8:	9128      	str	r1, [sp, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80030da:	2207      	movs	r2, #7
 80030dc:	9229      	str	r2, [sp, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030de:	932a      	str	r3, [sp, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030e0:	932b      	str	r3, [sp, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030e2:	a81b      	add	r0, sp, #108	; 0x6c
 80030e4:	f7fd fed2 	bl	8000e8c <HAL_RCC_OscConfig>
 80030e8:	b108      	cbz	r0, 80030ee <SystemClock_Config+0x32>
		Error_Handler();
 80030ea:	f7ff ff73 	bl	8002fd4 <Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030ee:	230f      	movs	r3, #15
 80030f0:	9316      	str	r3, [sp, #88]	; 0x58
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f2:	2303      	movs	r3, #3
 80030f4:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030fa:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80030fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003100:	931a      	str	r3, [sp, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003102:	2101      	movs	r1, #1
 8003104:	a816      	add	r0, sp, #88	; 0x58
 8003106:	f7fe f9d5 	bl	80014b4 <HAL_RCC_ClockConfig>
 800310a:	b108      	cbz	r0, 8003110 <SystemClock_Config+0x54>
		Error_Handler();
 800310c:	f7ff ff62 	bl	8002fd4 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8003110:	f244 0302 	movw	r3, #16386	; 0x4002
 8003114:	9301      	str	r3, [sp, #4]
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003116:	2300      	movs	r3, #0
 8003118:	930a      	str	r3, [sp, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800311a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800311e:	9313      	str	r3, [sp, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003120:	2301      	movs	r3, #1
 8003122:	9302      	str	r3, [sp, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003124:	9303      	str	r3, [sp, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003126:	2310      	movs	r3, #16
 8003128:	9304      	str	r3, [sp, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800312a:	2307      	movs	r3, #7
 800312c:	9305      	str	r3, [sp, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800312e:	2302      	movs	r3, #2
 8003130:	9306      	str	r3, [sp, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003132:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003138:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800313a:	a801      	add	r0, sp, #4
 800313c:	f7fe fbd0 	bl	80018e0 <HAL_RCCEx_PeriphCLKConfig>
 8003140:	b108      	cbz	r0, 8003146 <SystemClock_Config+0x8a>
		Error_Handler();
 8003142:	f7ff ff47 	bl	8002fd4 <Error_Handler>
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	f44f 7000 	mov.w	r0, #512	; 0x200
 800314a:	f7fd fd55 	bl	8000bf8 <HAL_PWREx_ControlVoltageScaling>
 800314e:	b108      	cbz	r0, 8003154 <SystemClock_Config+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003150:	f7ff ff40 	bl	8002fd4 <Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003154:	f7fe fa94 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <SystemClock_Config+0xc0>)
 800315a:	fba3 3000 	umull	r3, r0, r3, r0
 800315e:	0980      	lsrs	r0, r0, #6
 8003160:	f7fd fc4a 	bl	80009f8 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003164:	2004      	movs	r0, #4
 8003166:	f7fd fc5d 	bl	8000a24 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	4611      	mov	r1, r2
 800316e:	f04f 30ff 	mov.w	r0, #4294967295
 8003172:	f7fd fc0f 	bl	8000994 <HAL_NVIC_SetPriority>
}
 8003176:	b02d      	add	sp, #180	; 0xb4
 8003178:	f85d fb04 	ldr.w	pc, [sp], #4
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <main>:




/* USER CODE END 0 */
int main(void) {
 8003180:	b530      	push	{r4, r5, lr}
 8003182:	b08d      	sub	sp, #52	; 0x34
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003184:	f7fd fbce 	bl	8000924 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003188:	f7ff ff98 	bl	80030bc <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800318c:	f7ff fdd8 	bl	8002d40 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003190:	f7ff ff22 	bl	8002fd8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8003194:	f7ff ff3c 	bl	8003010 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	printf("Debit Card State Machine\r\n");
 8003198:	4871      	ldr	r0, [pc, #452]	; (8003360 <main+0x1e0>)
 800319a:	f000 fbe7 	bl	800396c <puts>
	HD44780_Init();
 800319e:	f7ff fc2f 	bl	8002a00 <HD44780_Init>
	/* setup Port A bits 0,1,2 and 3, i.e.: PA0-PA3 for input */
	pushButtonInit();
 80031a2:	f7ff fe03 	bl	8002dac <pushButtonInit>
		static int8_t transactionState = 1;  //initialise the state from state 1
		int8_t pbPressed = 0;  //will hold pushbutton defined above depending on
							   //the pushbutton pressed
		int Account;           //hold the account Number enter by user
		int32_t buffer[10] = { 0 };
		int32_t AccountNumber[10]={111,2222,3333,4444,5555,6666,7777,8888,9999,0000}; //account number of the user should be from that array
 80031a6:	ac02      	add	r4, sp, #8
 80031a8:	4d6e      	ldr	r5, [pc, #440]	; (8003364 <main+0x1e4>)
 80031aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b6:	e884 0003 	stmia.w	r4, {r0, r1}
		 Reciept, Record transaction. Move back to State 1.
		 6   Cancel Pressed. Display "Transaction Cancelled" back to
		 state 1
		 */

		switch (transactionState) {
 80031ba:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <main+0x1e8>)
 80031bc:	f993 3000 	ldrsb.w	r3, [r3]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d8ef      	bhi.n	80031a6 <main+0x26>
 80031c6:	e8df f003 	tbb	[pc, r3]
 80031ca:	3b03      	.short	0x3b03
 80031cc:	c5b87b59 	.word	0xc5b87b59
		case 1: 		//check if an entered Account number is in the database if yes ask for amount and display it
			putchar("Enter Account Number");
 80031d0:	4966      	ldr	r1, [pc, #408]	; (800336c <main+0x1ec>)
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <main+0x1f0>)
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80031d8:	6893      	ldr	r3, [r2, #8]
 80031da:	3b01      	subs	r3, #1
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da05      	bge.n	80031ee <main+0x6e>
 80031e2:	6994      	ldr	r4, [r2, #24]
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	db07      	blt.n	80031f8 <main+0x78>
 80031e8:	b2cb      	uxtb	r3, r1
 80031ea:	2b0a      	cmp	r3, #10
 80031ec:	d004      	beq.n	80031f8 <main+0x78>
		return (*_p->_p++ = _c);
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	1c58      	adds	r0, r3, #1
 80031f2:	6010      	str	r0, [r2, #0]
 80031f4:	7019      	strb	r1, [r3, #0]
 80031f6:	e001      	b.n	80031fc <main+0x7c>
	else
		return (__swbuf_r(_ptr, _c, _p));
 80031f8:	f000 fc46 	bl	8003a88 <__swbuf_r>
		    scanf("%i",&Account);
 80031fc:	a901      	add	r1, sp, #4
 80031fe:	485d      	ldr	r0, [pc, #372]	; (8003374 <main+0x1f4>)
 8003200:	f000 fbf8 	bl	80039f4 <iscanf>
			for (int i = 0; i < 10; i++) {
 8003204:	2400      	movs	r4, #0
 8003206:	e018      	b.n	800323a <main+0xba>
				if (Account = AccountNumber[i]) {
 8003208:	ab0c      	add	r3, sp, #48	; 0x30
 800320a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800320e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	b183      	cbz	r3, 8003238 <main+0xb8>
					amount = checkIfAmountRecd();
 8003216:	f7ff fe15 	bl	8002e44 <checkIfAmountRecd>
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <main+0x1f8>)
 800321c:	ed83 0a00 	vstr	s0, [r3]
					if (amount != 0)  //returns a 0 if an transaction amount has
 8003220:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	d006      	beq.n	8003238 <main+0xb8>
							{ 			//NOT been received on the serial port.
						displayAmount(amount); //but if we're we've received a debitAmount
 800322a:	f7ff fdef 	bl	8002e0c <displayAmount>
						displayOkCancel();//so display it and the prompt ok or cancel
 800322e:	f7ff fe6b 	bl	8002f08 <displayOkCancel>
						transactionState = 2;//and do that before we move on to state 2
 8003232:	2202      	movs	r2, #2
 8003234:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <main+0x1e8>)
 8003236:	701a      	strb	r2, [r3, #0]

		switch (transactionState) {
		case 1: 		//check if an entered Account number is in the database if yes ask for amount and display it
			putchar("Enter Account Number");
		    scanf("%i",&Account);
			for (int i = 0; i < 10; i++) {
 8003238:	3401      	adds	r4, #1
 800323a:	2c09      	cmp	r4, #9
 800323c:	dde4      	ble.n	8003208 <main+0x88>
 800323e:	e7b2      	b.n	80031a6 <main+0x26>
				}
			}

			break;
		case 2: 						//amount has been received waiting for Ok or cancel pressed
			pbPressed = checkOkOrCancel();
 8003240:	f7ff fe32 	bl	8002ea8 <checkOkOrCancel>

			if (pbPressed != 0) {
 8003244:	4604      	mov	r4, r0
 8003246:	2800      	cmp	r0, #0
 8003248:	d0ad      	beq.n	80031a6 <main+0x26>
				if (pbPressed == cancel) {
 800324a:	2804      	cmp	r0, #4
 800324c:	d10b      	bne.n	8003266 <main+0xe6>
					//then cancel was pressed.
					printf("Cancel Pressed\r\n");
 800324e:	484b      	ldr	r0, [pc, #300]	; (800337c <main+0x1fc>)
 8003250:	f000 fb8c 	bl	800396c <puts>
					HD44780_ClrScr();
 8003254:	f7ff fc5e 	bl	8002b14 <HD44780_ClrScr>
					HD44780_GotoXY(0, 0);
 8003258:	2100      	movs	r1, #0
 800325a:	4608      	mov	r0, r1
 800325c:	f7ff fc2c 	bl	8002ab8 <HD44780_GotoXY>

					transactionState = 6;
 8003260:	2206      	movs	r2, #6
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <main+0x1e8>)
 8003264:	701a      	strb	r2, [r3, #0]
				}
				if (pbPressed == ok) {
 8003266:	2c03      	cmp	r4, #3
 8003268:	d19d      	bne.n	80031a6 <main+0x26>
					//then ok pressed
					printf("OK Pressed\r\n");
 800326a:	4845      	ldr	r0, [pc, #276]	; (8003380 <main+0x200>)
 800326c:	f000 fb7e 	bl	800396c <puts>

					transactionState = 3;
 8003270:	2203      	movs	r2, #3
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <main+0x1e8>)
 8003274:	701a      	strb	r2, [r3, #0]
					HD44780_ClrScr();
 8003276:	f7ff fc4d 	bl	8002b14 <HD44780_ClrScr>
 800327a:	e794      	b.n	80031a6 <main+0x26>

			}
			break;
		case 3:
                                      //ask for check or saving on lcd and wait for it
			displayCheckOrSaving();
 800327c:	f7ff fe5a 	bl	8002f34 <displayCheckOrSaving>
			pbPressed = checkorSaving();
 8003280:	f7ff fe26 	bl	8002ed0 <checkorSaving>
			if (pbPressed != 0) {
 8003284:	4604      	mov	r4, r0
 8003286:	2800      	cmp	r0, #0
 8003288:	d08d      	beq.n	80031a6 <main+0x26>
				if (pbPressed == savings) {
 800328a:	2802      	cmp	r0, #2
 800328c:	d109      	bne.n	80032a2 <main+0x122>
					//savings is pressed
					printf("savings pressed\r\n");
 800328e:	483d      	ldr	r0, [pc, #244]	; (8003384 <main+0x204>)
 8003290:	f000 fb6c 	bl	800396c <puts>
					transactionState = 4;
 8003294:	2204      	movs	r2, #4
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <main+0x1e8>)
 8003298:	701a      	strb	r2, [r3, #0]
					HAL_Delay(1000);
 800329a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329e:	f7fd fb5b 	bl	8000958 <HAL_Delay>

				}
				if (pbPressed == chequing) {
 80032a2:	2c01      	cmp	r4, #1
 80032a4:	d105      	bne.n	80032b2 <main+0x132>
					//chequing is pressed
					printf("chequing pressed\r\n ");
 80032a6:	4838      	ldr	r0, [pc, #224]	; (8003388 <main+0x208>)
 80032a8:	f000 faee 	bl	8003888 <iprintf>
					transactionState = 4;
 80032ac:	2204      	movs	r2, #4
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <main+0x1e8>)
 80032b0:	701a      	strb	r2, [r3, #0]
				}
				if (pbPressed == cancel) {
 80032b2:	2c04      	cmp	r4, #4
 80032b4:	f47f af77 	bne.w	80031a6 <main+0x26>
					//cancel is pressed
					transactionState = 6;
 80032b8:	2206      	movs	r2, #6
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <main+0x1e8>)
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e772      	b.n	80031a6 <main+0x26>
				}

			}
			break;
		case 4:                      //ask for user pin using getchar function
			HD44780_ClrScr();
 80032c0:	f7ff fc28 	bl	8002b14 <HD44780_ClrScr>
			HD44780_GotoXY(0, 0);
 80032c4:	2100      	movs	r1, #0
 80032c6:	4608      	mov	r0, r1
 80032c8:	f7ff fbf6 	bl	8002ab8 <HD44780_GotoXY>
			HD44780_PutStr("Enter Pin");
 80032cc:	482f      	ldr	r0, [pc, #188]	; (800338c <main+0x20c>)
 80032ce:	f7ff fc0f 	bl	8002af0 <HD44780_PutStr>

			pbPressed = checkOkOrCancel();
 80032d2:	f7ff fde9 	bl	8002ea8 <checkOkOrCancel>
			printf("Enter your Pin\r\n");
 80032d6:	482e      	ldr	r0, [pc, #184]	; (8003390 <main+0x210>)
 80032d8:	f000 fb48 	bl	800396c <puts>
			 for(int j=0; j<5; j++){
 80032dc:	2400      	movs	r4, #0
 80032de:	e029      	b.n	8003334 <main+0x1b4>
			while ((Pin[i] = getchar()) != '\n'){       //get the char on serial port using getchar()
				i++;                                   //get the data till enter is pressed
			getchar();
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <main+0x1f0>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	6842      	ldr	r2, [r0, #4]
 80032e6:	6853      	ldr	r3, [r2, #4]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	6053      	str	r3, [r2, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da03      	bge.n	80032f8 <main+0x178>
 80032f0:	6841      	ldr	r1, [r0, #4]
 80032f2:	f000 fb43 	bl	800397c <__srget_r>
 80032f6:	e003      	b.n	8003300 <main+0x180>
 80032f8:	6842      	ldr	r2, [r0, #4]
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	6013      	str	r3, [r2, #0]
			HD44780_PutStr("Enter Pin");

			pbPressed = checkOkOrCancel();
			printf("Enter your Pin\r\n");
			 for(int j=0; j<5; j++){
			while ((Pin[i] = getchar()) != '\n'){       //get the char on serial port using getchar()
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <main+0x1f0>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	6842      	ldr	r2, [r0, #4]
 8003306:	6853      	ldr	r3, [r2, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	6053      	str	r3, [r2, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	da04      	bge.n	800331a <main+0x19a>
 8003310:	6841      	ldr	r1, [r0, #4]
 8003312:	f000 fb33 	bl	800397c <__srget_r>
 8003316:	b2c0      	uxtb	r0, r0
 8003318:	e004      	b.n	8003324 <main+0x1a4>
 800331a:	6842      	ldr	r2, [r0, #4]
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	7818      	ldrb	r0, [r3, #0]
 8003324:	280a      	cmp	r0, #10
 8003326:	d1db      	bne.n	80032e0 <main+0x160>
				i++;                                   //get the data till enter is pressed
			getchar();
			}
			HD44780_ClrScr();
 8003328:	f7ff fbf4 	bl	8002b14 <HD44780_ClrScr>
			transactionState = 5;
 800332c:	2205      	movs	r2, #5
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <main+0x1e8>)
 8003330:	701a      	strb	r2, [r3, #0]
			HD44780_GotoXY(0, 0);
			HD44780_PutStr("Enter Pin");

			pbPressed = checkOkOrCancel();
			printf("Enter your Pin\r\n");
			 for(int j=0; j<5; j++){
 8003332:	3401      	adds	r4, #1
 8003334:	2c04      	cmp	r4, #4
 8003336:	dde3      	ble.n	8003300 <main+0x180>
 8003338:	e735      	b.n	80031a6 <main+0x26>
					Balance = Balance - amount;
					snprintf(balance, 30, "Balance is %.2d");
					HD44780_PutStr(balance);
				transactionState = 1;
			} else {
				HD44780_ClrScr();                    //displays incorrect pin on LCD if pin is pressed other than 4554
 800333a:	f7ff fbeb 	bl	8002b14 <HD44780_ClrScr>
				HD44780_GotoXY(0, 0);
 800333e:	2100      	movs	r1, #0
 8003340:	4608      	mov	r0, r1
 8003342:	f7ff fbb9 	bl	8002ab8 <HD44780_GotoXY>
			 HD44780_PutStr("Incorect Pin");
 8003346:	4813      	ldr	r0, [pc, #76]	; (8003394 <main+0x214>)
 8003348:	f7ff fbd2 	bl	8002af0 <HD44780_PutStr>
				transactionState = 6;
 800334c:	2206      	movs	r2, #6
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <main+0x1e8>)
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e728      	b.n	80031a6 <main+0x26>
			}
			break;
		case 6:
			displayTransactionCancelled();
 8003354:	f7ff fe1c 	bl	8002f90 <displayTransactionCancelled>
			transactionState = 1;
 8003358:	2201      	movs	r2, #1
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <main+0x1e8>)
 800335c:	701a      	strb	r2, [r3, #0]
			break;

		} 	//closing brace for switch
	} //closing brace for while(1)
 800335e:	e722      	b.n	80031a6 <main+0x26>
 8003360:	0800566c 	.word	0x0800566c
 8003364:	0800553c 	.word	0x0800553c
 8003368:	20000000 	.word	0x20000000
 800336c:	08005688 	.word	0x08005688
 8003370:	20000068 	.word	0x20000068
 8003374:	080056a0 	.word	0x080056a0
 8003378:	2000008c 	.word	0x2000008c
 800337c:	080056a4 	.word	0x080056a4
 8003380:	080056b4 	.word	0x080056b4
 8003384:	080056c0 	.word	0x080056c0
 8003388:	080056d4 	.word	0x080056d4
 800338c:	080056e8 	.word	0x080056e8
 8003390:	080056f4 	.word	0x080056f4
 8003394:	08005704 	.word	0x08005704

08003398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003398:	b500      	push	{lr}
 800339a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <HAL_MspInit+0x8c>)
 800339e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
 80033a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a8:	f002 0201 	and.w	r2, r2, #1
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033b6:	659a      	str	r2, [r3, #88]	; 0x58
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c2:	2003      	movs	r0, #3
 80033c4:	f7fd fad4 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	4611      	mov	r1, r2
 80033cc:	f06f 000b 	mvn.w	r0, #11
 80033d0:	f7fd fae0 	bl	8000994 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	4611      	mov	r1, r2
 80033d8:	f06f 000a 	mvn.w	r0, #10
 80033dc:	f7fd fada 	bl	8000994 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	4611      	mov	r1, r2
 80033e4:	f06f 0009 	mvn.w	r0, #9
 80033e8:	f7fd fad4 	bl	8000994 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	4611      	mov	r1, r2
 80033f0:	f06f 0004 	mvn.w	r0, #4
 80033f4:	f7fd face 	bl	8000994 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	4611      	mov	r1, r2
 80033fc:	f06f 0003 	mvn.w	r0, #3
 8003400:	f7fd fac8 	bl	8000994 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	4611      	mov	r1, r2
 8003408:	f06f 0001 	mvn.w	r0, #1
 800340c:	f7fd fac2 	bl	8000994 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003410:	2200      	movs	r2, #0
 8003412:	4611      	mov	r1, r2
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f7fd fabc 	bl	8000994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341c:	b003      	add	sp, #12
 800341e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8003428:	6802      	ldr	r2, [r0, #0]
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_TIM_PWM_MspInit+0x24>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d10c      	bne.n	800344a <HAL_TIM_PWM_MspInit+0x22>
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003430:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003432:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343c:	661a      	str	r2, [r3, #96]	; 0x60
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003448:	b002      	add	sp, #8
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003450:	6802      	ldr	r2, [r0, #0]
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_TIM_MspPostInit+0x30>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d112      	bne.n	800347e <HAL_TIM_MspPostInit+0x2e>
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003458:	b500      	push	{lr}
 800345a:	b087      	sub	sp, #28
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800346a:	2301      	movs	r3, #1
 800346c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	a901      	add	r1, sp, #4
 8003470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003474:	f7fd faec 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003478:	b007      	add	sp, #28
 800347a:	f85d fb04 	ldr.w	pc, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40012c00 	.word	0x40012c00

08003484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003484:	6802      	ldr	r2, [r0, #0]
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <HAL_UART_MspInit+0x60>)
 8003488:	429a      	cmp	r2, r3
 800348a:	d129      	bne.n	80034e0 <HAL_UART_MspInit+0x5c>
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003490:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003496:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800349a:	659a      	str	r2, [r3, #88]	; 0x58
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034a6:	2304      	movs	r3, #4
 80034a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2602      	movs	r6, #2
 80034ac:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ae:	2501      	movs	r5, #1
 80034b0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b2:	2403      	movs	r4, #3
 80034b4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b6:	2307      	movs	r3, #7
 80034b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034ba:	a901      	add	r1, sp, #4
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f7fd fac6 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034cc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80034d0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	a901      	add	r1, sp, #4
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f7fd faba 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034dc:	b006      	add	sp, #24
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40004400 	.word	0x40004400

080034e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ea:	f7fd fa27 	bl	800093c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80034ee:	f7fd faab 	bl	8000a48 <HAL_SYSTICK_IRQHandler>
 80034f2:	bd08      	pop	{r3, pc}

080034f4 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80034f4:	b530      	push	{r4, r5, lr}
 80034f6:	b085      	sub	sp, #20
 80034f8:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 80034fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034fe:	b292      	uxth	r2, r2
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <_write+0x48>)
 8003502:	f7ff f869 	bl	80025d8 <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 8003506:	1e43      	subs	r3, r0, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d813      	bhi.n	8003536 <_write+0x42>
 800350e:	4605      	mov	r5, r0
	{
		char stringBuffer[16] = {0};
 8003510:	2100      	movs	r1, #0
 8003512:	9100      	str	r1, [sp, #0]
 8003514:	9101      	str	r1, [sp, #4]
 8003516:	9102      	str	r1, [sp, #8]
 8003518:	9103      	str	r1, [sp, #12]
		HD44780_GotoXY(1,0); //move to second line first position
 800351a:	2001      	movs	r0, #1
 800351c:	f7ff facc 	bl	8002ab8 <HD44780_GotoXY>
		snprintf(stringBuffer,16,"Error: %i",result);
 8003520:	462b      	mov	r3, r5
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <_write+0x4c>)
 8003524:	2110      	movs	r1, #16
 8003526:	4668      	mov	r0, sp
 8003528:	f000 fa7c 	bl	8003a24 <sniprintf>
		HD44780_PutStr(stringBuffer);
 800352c:	4668      	mov	r0, sp
 800352e:	f7ff fadf 	bl	8002af0 <HD44780_PutStr>

		Error_Handler();
 8003532:	f7ff fd4f 	bl	8002fd4 <Error_Handler>
	}
	return len;
}
 8003536:	4620      	mov	r0, r4
 8003538:	b005      	add	sp, #20
 800353a:	bd30      	pop	{r4, r5, pc}
 800353c:	20000144 	.word	0x20000144
 8003540:	08005714 	.word	0x08005714

08003544 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003544:	4603      	mov	r3, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <_sbrk+0x18>)
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	b912      	cbnz	r2, 8003552 <_sbrk+0xe>
		heap_end = & end;
 800354c:	4904      	ldr	r1, [pc, #16]	; (8003560 <_sbrk+0x1c>)
 800354e:	4a03      	ldr	r2, [pc, #12]	; (800355c <_sbrk+0x18>)
 8003550:	6011      	str	r1, [r2, #0]
	}

	prev_heap_end = heap_end;
 8003552:	4a02      	ldr	r2, [pc, #8]	; (800355c <_sbrk+0x18>)
 8003554:	6810      	ldr	r0, [r2, #0]
	heap_end += incr;
 8003556:	4403      	add	r3, r0
 8003558:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
}
 800355a:	4770      	bx	lr
 800355c:	20000090 	.word	0x20000090
 8003560:	200001b8 	.word	0x200001b8

08003564 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003564:	2258      	movs	r2, #88	; 0x58
 8003566:	4b02      	ldr	r3, [pc, #8]	; (8003570 <_close+0xc>)
 8003568:	601a      	str	r2, [r3, #0]
	return -1;
}
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	4770      	bx	lr
 8003570:	200001b4 	.word	0x200001b4

08003574 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003574:	2258      	movs	r2, #88	; 0x58
 8003576:	4b02      	ldr	r3, [pc, #8]	; (8003580 <_fstat+0xc>)
 8003578:	601a      	str	r2, [r3, #0]
	return -1;
}
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	4770      	bx	lr
 8003580:	200001b4 	.word	0x200001b4

08003584 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003584:	2258      	movs	r2, #88	; 0x58
 8003586:	4b02      	ldr	r3, [pc, #8]	; (8003590 <_isatty+0xc>)
 8003588:	601a      	str	r2, [r3, #0]
	return 0;
}
 800358a:	2000      	movs	r0, #0
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	200001b4 	.word	0x200001b4

08003594 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003594:	2258      	movs	r2, #88	; 0x58
 8003596:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <_lseek+0xc>)
 8003598:	601a      	str	r2, [r3, #0]
	return -1;
}
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	4770      	bx	lr
 80035a0:	200001b4 	.word	0x200001b4

080035a4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80035a4:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	2201      	movs	r2, #1
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <_read+0x14>)
 80035ae:	f7ff f87b 	bl	80026a8 <HAL_UART_Receive>
	return 1;
}
 80035b2:	2001      	movs	r0, #1
 80035b4:	bd08      	pop	{r3, pc}
 80035b6:	bf00      	nop
 80035b8:	20000144 	.word	0x20000144

080035bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035bc:	490f      	ldr	r1, [pc, #60]	; (80035fc <SystemInit+0x40>)
 80035be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <SystemInit+0x44>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035d4:	2000      	movs	r0, #0
 80035d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80035de:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80035e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80035e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035f2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035f8:	608b      	str	r3, [r1, #8]
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00
 8003600:	40021000 	.word	0x40021000

08003604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800363c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003608:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800360a:	e003      	b.n	8003614 <LoopCopyDataInit>

0800360c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800360e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003610:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003612:	3104      	adds	r1, #4

08003614 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003614:	480b      	ldr	r0, [pc, #44]	; (8003644 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003618:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800361a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800361c:	d3f6      	bcc.n	800360c <CopyDataInit>
	ldr	r2, =_sbss
 800361e:	4a0b      	ldr	r2, [pc, #44]	; (800364c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003620:	e002      	b.n	8003628 <LoopFillZerobss>

08003622 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003622:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003624:	f842 3b04 	str.w	r3, [r2], #4

08003628 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <LoopForever+0x16>)
	cmp	r2, r3
 800362a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800362c:	d3f9      	bcc.n	8003622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800362e:	f7ff ffc5 	bl	80035bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003632:	f000 f857 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003636:	f7ff fda3 	bl	8003180 <main>

0800363a <LoopForever>:

LoopForever:
    b LoopForever
 800363a:	e7fe      	b.n	800363a <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800363c:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003640:	08005930 	.word	0x08005930
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003644:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003648:	20000070 	.word	0x20000070
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800364c:	20000070 	.word	0x20000070
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003650:	200001b8 	.word	0x200001b8

08003654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003654:	e7fe      	b.n	8003654 <ADC1_IRQHandler>
	...

08003658 <_fpurge_r>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	460c      	mov	r4, r1
 800365c:	4606      	mov	r6, r0
 800365e:	b118      	cbz	r0, 8003668 <_fpurge_r+0x10>
 8003660:	6983      	ldr	r3, [r0, #24]
 8003662:	b90b      	cbnz	r3, 8003668 <_fpurge_r+0x10>
 8003664:	f000 fbd6 	bl	8003e14 <__sinit>
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <_fpurge_r+0x70>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d101      	bne.n	8003672 <_fpurge_r+0x1a>
 800366e:	6874      	ldr	r4, [r6, #4]
 8003670:	e008      	b.n	8003684 <_fpurge_r+0x2c>
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <_fpurge_r+0x74>)
 8003674:	429c      	cmp	r4, r3
 8003676:	d101      	bne.n	800367c <_fpurge_r+0x24>
 8003678:	68b4      	ldr	r4, [r6, #8]
 800367a:	e003      	b.n	8003684 <_fpurge_r+0x2c>
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <_fpurge_r+0x78>)
 800367e:	429c      	cmp	r4, r3
 8003680:	bf08      	it	eq
 8003682:	68f4      	ldreq	r4, [r6, #12]
 8003684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003688:	b922      	cbnz	r2, 8003694 <_fpurge_r+0x3c>
 800368a:	2309      	movs	r3, #9
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	f04f 30ff 	mov.w	r0, #4294967295
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	f002 0308 	and.w	r3, r2, #8
 800369c:	b21b      	sxth	r3, r3
 800369e:	b96b      	cbnz	r3, 80036bc <_fpurge_r+0x64>
 80036a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036a2:	6063      	str	r3, [r4, #4]
 80036a4:	461d      	mov	r5, r3
 80036a6:	b139      	cbz	r1, 80036b8 <_fpurge_r+0x60>
 80036a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ac:	4299      	cmp	r1, r3
 80036ae:	d002      	beq.n	80036b6 <_fpurge_r+0x5e>
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 f83d 	bl	8003730 <_free_r>
 80036b6:	6365      	str	r5, [r4, #52]	; 0x34
 80036b8:	2000      	movs	r0, #0
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	0793      	lsls	r3, r2, #30
 80036be:	bf0c      	ite	eq
 80036c0:	6963      	ldreq	r3, [r4, #20]
 80036c2:	2300      	movne	r3, #0
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	e7f7      	b.n	80036b8 <_fpurge_r+0x60>
 80036c8:	08005770 	.word	0x08005770
 80036cc:	08005790 	.word	0x08005790
 80036d0:	080057b0 	.word	0x080057b0

080036d4 <fpurge>:
 80036d4:	4b02      	ldr	r3, [pc, #8]	; (80036e0 <fpurge+0xc>)
 80036d6:	4601      	mov	r1, r0
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f7ff bfbd 	b.w	8003658 <_fpurge_r>
 80036de:	bf00      	nop
 80036e0:	20000068 	.word	0x20000068

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <__libc_init_array+0x3c>)
 80036e8:	4c0e      	ldr	r4, [pc, #56]	; (8003724 <__libc_init_array+0x40>)
 80036ea:	1ae4      	subs	r4, r4, r3
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2500      	movs	r5, #0
 80036f0:	461e      	mov	r6, r3
 80036f2:	42a5      	cmp	r5, r4
 80036f4:	d004      	beq.n	8003700 <__libc_init_array+0x1c>
 80036f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fa:	4798      	blx	r3
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7f8      	b.n	80036f2 <__libc_init_array+0xe>
 8003700:	f001 ff10 	bl	8005524 <_init>
 8003704:	4c08      	ldr	r4, [pc, #32]	; (8003728 <__libc_init_array+0x44>)
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <__libc_init_array+0x48>)
 8003708:	1ae4      	subs	r4, r4, r3
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2500      	movs	r5, #0
 800370e:	461e      	mov	r6, r3
 8003710:	42a5      	cmp	r5, r4
 8003712:	d004      	beq.n	800371e <__libc_init_array+0x3a>
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7f8      	b.n	8003710 <__libc_init_array+0x2c>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	08005928 	.word	0x08005928
 8003724:	08005928 	.word	0x08005928
 8003728:	0800592c 	.word	0x0800592c
 800372c:	08005928 	.word	0x08005928

08003730 <_free_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4605      	mov	r5, r0
 8003734:	2900      	cmp	r1, #0
 8003736:	d046      	beq.n	80037c6 <_free_r+0x96>
 8003738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373c:	1f0c      	subs	r4, r1, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfb8      	it	lt
 8003742:	18e4      	addlt	r4, r4, r3
 8003744:	f000 fc74 	bl	8004030 <__malloc_lock>
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <_free_r+0x98>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	4611      	mov	r1, r2
 800374e:	b913      	cbnz	r3, 8003756 <_free_r+0x26>
 8003750:	6063      	str	r3, [r4, #4]
 8003752:	6014      	str	r4, [r2, #0]
 8003754:	e032      	b.n	80037bc <_free_r+0x8c>
 8003756:	42a3      	cmp	r3, r4
 8003758:	d90e      	bls.n	8003778 <_free_r+0x48>
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	18a0      	adds	r0, r4, r2
 800375e:	4283      	cmp	r3, r0
 8003760:	bf04      	itt	eq
 8003762:	6818      	ldreq	r0, [r3, #0]
 8003764:	685b      	ldreq	r3, [r3, #4]
 8003766:	6063      	str	r3, [r4, #4]
 8003768:	bf04      	itt	eq
 800376a:	1812      	addeq	r2, r2, r0
 800376c:	6022      	streq	r2, [r4, #0]
 800376e:	600c      	str	r4, [r1, #0]
 8003770:	e024      	b.n	80037bc <_free_r+0x8c>
 8003772:	42a2      	cmp	r2, r4
 8003774:	d803      	bhi.n	800377e <_free_r+0x4e>
 8003776:	4613      	mov	r3, r2
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	2a00      	cmp	r2, #0
 800377c:	d1f9      	bne.n	8003772 <_free_r+0x42>
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	1819      	adds	r1, r3, r0
 8003782:	42a1      	cmp	r1, r4
 8003784:	d10b      	bne.n	800379e <_free_r+0x6e>
 8003786:	6821      	ldr	r1, [r4, #0]
 8003788:	4401      	add	r1, r0
 800378a:	1858      	adds	r0, r3, r1
 800378c:	4282      	cmp	r2, r0
 800378e:	6019      	str	r1, [r3, #0]
 8003790:	d114      	bne.n	80037bc <_free_r+0x8c>
 8003792:	6810      	ldr	r0, [r2, #0]
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	4401      	add	r1, r0
 800379a:	6019      	str	r1, [r3, #0]
 800379c:	e00e      	b.n	80037bc <_free_r+0x8c>
 800379e:	d902      	bls.n	80037a6 <_free_r+0x76>
 80037a0:	230c      	movs	r3, #12
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	e00a      	b.n	80037bc <_free_r+0x8c>
 80037a6:	6821      	ldr	r1, [r4, #0]
 80037a8:	1860      	adds	r0, r4, r1
 80037aa:	4282      	cmp	r2, r0
 80037ac:	bf04      	itt	eq
 80037ae:	6810      	ldreq	r0, [r2, #0]
 80037b0:	6852      	ldreq	r2, [r2, #4]
 80037b2:	6062      	str	r2, [r4, #4]
 80037b4:	bf04      	itt	eq
 80037b6:	1809      	addeq	r1, r1, r0
 80037b8:	6021      	streq	r1, [r4, #0]
 80037ba:	605c      	str	r4, [r3, #4]
 80037bc:	4628      	mov	r0, r5
 80037be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c2:	f000 bc36 	b.w	8004032 <__malloc_unlock>
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20000098 	.word	0x20000098

080037cc <_malloc_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	1ccd      	adds	r5, r1, #3
 80037d0:	f025 0503 	bic.w	r5, r5, #3
 80037d4:	3508      	adds	r5, #8
 80037d6:	2d0c      	cmp	r5, #12
 80037d8:	bf38      	it	cc
 80037da:	250c      	movcc	r5, #12
 80037dc:	2d00      	cmp	r5, #0
 80037de:	4606      	mov	r6, r0
 80037e0:	db01      	blt.n	80037e6 <_malloc_r+0x1a>
 80037e2:	42a9      	cmp	r1, r5
 80037e4:	d902      	bls.n	80037ec <_malloc_r+0x20>
 80037e6:	230c      	movs	r3, #12
 80037e8:	6033      	str	r3, [r6, #0]
 80037ea:	e046      	b.n	800387a <_malloc_r+0xae>
 80037ec:	f000 fc20 	bl	8004030 <__malloc_lock>
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <_malloc_r+0xb4>)
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4621      	mov	r1, r4
 80037f8:	b1a1      	cbz	r1, 8003824 <_malloc_r+0x58>
 80037fa:	680b      	ldr	r3, [r1, #0]
 80037fc:	1b5b      	subs	r3, r3, r5
 80037fe:	d40e      	bmi.n	800381e <_malloc_r+0x52>
 8003800:	2b0b      	cmp	r3, #11
 8003802:	d903      	bls.n	800380c <_malloc_r+0x40>
 8003804:	600b      	str	r3, [r1, #0]
 8003806:	18cc      	adds	r4, r1, r3
 8003808:	50cd      	str	r5, [r1, r3]
 800380a:	e01e      	b.n	800384a <_malloc_r+0x7e>
 800380c:	428c      	cmp	r4, r1
 800380e:	bf0d      	iteet	eq
 8003810:	6863      	ldreq	r3, [r4, #4]
 8003812:	684b      	ldrne	r3, [r1, #4]
 8003814:	6063      	strne	r3, [r4, #4]
 8003816:	6013      	streq	r3, [r2, #0]
 8003818:	bf18      	it	ne
 800381a:	460c      	movne	r4, r1
 800381c:	e015      	b.n	800384a <_malloc_r+0x7e>
 800381e:	460c      	mov	r4, r1
 8003820:	6849      	ldr	r1, [r1, #4]
 8003822:	e7e9      	b.n	80037f8 <_malloc_r+0x2c>
 8003824:	4c17      	ldr	r4, [pc, #92]	; (8003884 <_malloc_r+0xb8>)
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	b91b      	cbnz	r3, 8003832 <_malloc_r+0x66>
 800382a:	4630      	mov	r0, r6
 800382c:	f000 f8d2 	bl	80039d4 <_sbrk_r>
 8003830:	6020      	str	r0, [r4, #0]
 8003832:	4629      	mov	r1, r5
 8003834:	4630      	mov	r0, r6
 8003836:	f000 f8cd 	bl	80039d4 <_sbrk_r>
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	d018      	beq.n	8003870 <_malloc_r+0xa4>
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d10d      	bne.n	8003864 <_malloc_r+0x98>
 8003848:	6025      	str	r5, [r4, #0]
 800384a:	4630      	mov	r0, r6
 800384c:	f000 fbf1 	bl	8004032 <__malloc_unlock>
 8003850:	f104 000b 	add.w	r0, r4, #11
 8003854:	1d23      	adds	r3, r4, #4
 8003856:	f020 0007 	bic.w	r0, r0, #7
 800385a:	1ac3      	subs	r3, r0, r3
 800385c:	d00e      	beq.n	800387c <_malloc_r+0xb0>
 800385e:	425a      	negs	r2, r3
 8003860:	50e2      	str	r2, [r4, r3]
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	1a21      	subs	r1, r4, r0
 8003866:	4630      	mov	r0, r6
 8003868:	f000 f8b4 	bl	80039d4 <_sbrk_r>
 800386c:	3001      	adds	r0, #1
 800386e:	d1eb      	bne.n	8003848 <_malloc_r+0x7c>
 8003870:	230c      	movs	r3, #12
 8003872:	6033      	str	r3, [r6, #0]
 8003874:	4630      	mov	r0, r6
 8003876:	f000 fbdc 	bl	8004032 <__malloc_unlock>
 800387a:	2000      	movs	r0, #0
 800387c:	bd70      	pop	{r4, r5, r6, pc}
 800387e:	bf00      	nop
 8003880:	20000098 	.word	0x20000098
 8003884:	20000094 	.word	0x20000094

08003888 <iprintf>:
 8003888:	b40f      	push	{r0, r1, r2, r3}
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <iprintf+0x2c>)
 800388c:	b513      	push	{r0, r1, r4, lr}
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	b124      	cbz	r4, 800389c <iprintf+0x14>
 8003892:	69a3      	ldr	r3, [r4, #24]
 8003894:	b913      	cbnz	r3, 800389c <iprintf+0x14>
 8003896:	4620      	mov	r0, r4
 8003898:	f000 fabc 	bl	8003e14 <__sinit>
 800389c:	ab05      	add	r3, sp, #20
 800389e:	9a04      	ldr	r2, [sp, #16]
 80038a0:	68a1      	ldr	r1, [r4, #8]
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 fd3d 	bl	8004324 <_vfiprintf_r>
 80038aa:	b002      	add	sp, #8
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b0:	b004      	add	sp, #16
 80038b2:	4770      	bx	lr
 80038b4:	20000068 	.word	0x20000068

080038b8 <_puts_r>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	460e      	mov	r6, r1
 80038bc:	4605      	mov	r5, r0
 80038be:	b118      	cbz	r0, 80038c8 <_puts_r+0x10>
 80038c0:	6983      	ldr	r3, [r0, #24]
 80038c2:	b90b      	cbnz	r3, 80038c8 <_puts_r+0x10>
 80038c4:	f000 faa6 	bl	8003e14 <__sinit>
 80038c8:	69ab      	ldr	r3, [r5, #24]
 80038ca:	68ac      	ldr	r4, [r5, #8]
 80038cc:	b913      	cbnz	r3, 80038d4 <_puts_r+0x1c>
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 faa0 	bl	8003e14 <__sinit>
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <_puts_r+0xa8>)
 80038d6:	429c      	cmp	r4, r3
 80038d8:	d101      	bne.n	80038de <_puts_r+0x26>
 80038da:	686c      	ldr	r4, [r5, #4]
 80038dc:	e008      	b.n	80038f0 <_puts_r+0x38>
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <_puts_r+0xac>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	d101      	bne.n	80038e8 <_puts_r+0x30>
 80038e4:	68ac      	ldr	r4, [r5, #8]
 80038e6:	e003      	b.n	80038f0 <_puts_r+0x38>
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <_puts_r+0xb0>)
 80038ea:	429c      	cmp	r4, r3
 80038ec:	bf08      	it	eq
 80038ee:	68ec      	ldreq	r4, [r5, #12]
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	071b      	lsls	r3, r3, #28
 80038f4:	d501      	bpl.n	80038fa <_puts_r+0x42>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	b93b      	cbnz	r3, 800390a <_puts_r+0x52>
 80038fa:	4621      	mov	r1, r4
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 f917 	bl	8003b30 <__swsetup_r>
 8003902:	b110      	cbz	r0, 800390a <_puts_r+0x52>
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	3e01      	subs	r6, #1
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003912:	3b01      	subs	r3, #1
 8003914:	60a3      	str	r3, [r4, #8]
 8003916:	b191      	cbz	r1, 800393e <_puts_r+0x86>
 8003918:	2b00      	cmp	r3, #0
 800391a:	da04      	bge.n	8003926 <_puts_r+0x6e>
 800391c:	69a2      	ldr	r2, [r4, #24]
 800391e:	4293      	cmp	r3, r2
 8003920:	db06      	blt.n	8003930 <_puts_r+0x78>
 8003922:	290a      	cmp	r1, #10
 8003924:	d004      	beq.n	8003930 <_puts_r+0x78>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	6022      	str	r2, [r4, #0]
 800392c:	7019      	strb	r1, [r3, #0]
 800392e:	e7ed      	b.n	800390c <_puts_r+0x54>
 8003930:	4622      	mov	r2, r4
 8003932:	4628      	mov	r0, r5
 8003934:	f000 f8a8 	bl	8003a88 <__swbuf_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d1e7      	bne.n	800390c <_puts_r+0x54>
 800393c:	e7e2      	b.n	8003904 <_puts_r+0x4c>
 800393e:	2b00      	cmp	r3, #0
 8003940:	da08      	bge.n	8003954 <_puts_r+0x9c>
 8003942:	4622      	mov	r2, r4
 8003944:	210a      	movs	r1, #10
 8003946:	4628      	mov	r0, r5
 8003948:	f000 f89e 	bl	8003a88 <__swbuf_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d0d9      	beq.n	8003904 <_puts_r+0x4c>
 8003950:	200a      	movs	r0, #10
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	200a      	movs	r0, #10
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	6022      	str	r2, [r4, #0]
 800395c:	7018      	strb	r0, [r3, #0]
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	08005770 	.word	0x08005770
 8003964:	08005790 	.word	0x08005790
 8003968:	080057b0 	.word	0x080057b0

0800396c <puts>:
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <puts+0xc>)
 800396e:	4601      	mov	r1, r0
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	f7ff bfa1 	b.w	80038b8 <_puts_r>
 8003976:	bf00      	nop
 8003978:	20000068 	.word	0x20000068

0800397c <__srget_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	460c      	mov	r4, r1
 8003980:	4605      	mov	r5, r0
 8003982:	b118      	cbz	r0, 800398c <__srget_r+0x10>
 8003984:	6983      	ldr	r3, [r0, #24]
 8003986:	b90b      	cbnz	r3, 800398c <__srget_r+0x10>
 8003988:	f000 fa44 	bl	8003e14 <__sinit>
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <__srget_r+0x4c>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d101      	bne.n	8003996 <__srget_r+0x1a>
 8003992:	686c      	ldr	r4, [r5, #4]
 8003994:	e008      	b.n	80039a8 <__srget_r+0x2c>
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <__srget_r+0x50>)
 8003998:	429c      	cmp	r4, r3
 800399a:	d101      	bne.n	80039a0 <__srget_r+0x24>
 800399c:	68ac      	ldr	r4, [r5, #8]
 800399e:	e003      	b.n	80039a8 <__srget_r+0x2c>
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <__srget_r+0x54>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	bf08      	it	eq
 80039a6:	68ec      	ldreq	r4, [r5, #12]
 80039a8:	4621      	mov	r1, r4
 80039aa:	4628      	mov	r0, r5
 80039ac:	f001 fa4e 	bl	8004e4c <__srefill_r>
 80039b0:	b938      	cbnz	r0, 80039c2 <__srget_r+0x46>
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	7818      	ldrb	r0, [r3, #0]
 80039c0:	bd38      	pop	{r3, r4, r5, pc}
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	08005770 	.word	0x08005770
 80039cc:	08005790 	.word	0x08005790
 80039d0:	080057b0 	.word	0x080057b0

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4c06      	ldr	r4, [pc, #24]	; (80039f0 <_sbrk_r+0x1c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	4605      	mov	r5, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	f7ff fdb0 	bl	8003544 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	200001b4 	.word	0x200001b4

080039f4 <iscanf>:
 80039f4:	b40f      	push	{r0, r1, r2, r3}
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <iscanf+0x2c>)
 80039f8:	b513      	push	{r0, r1, r4, lr}
 80039fa:	681c      	ldr	r4, [r3, #0]
 80039fc:	b124      	cbz	r4, 8003a08 <iscanf+0x14>
 80039fe:	69a3      	ldr	r3, [r4, #24]
 8003a00:	b913      	cbnz	r3, 8003a08 <iscanf+0x14>
 8003a02:	4620      	mov	r0, r4
 8003a04:	f000 fa06 	bl	8003e14 <__sinit>
 8003a08:	ab05      	add	r3, sp, #20
 8003a0a:	9a04      	ldr	r2, [sp, #16]
 8003a0c:	6861      	ldr	r1, [r4, #4]
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	4620      	mov	r0, r4
 8003a12:	f001 f893 	bl	8004b3c <_vfiscanf_r>
 8003a16:	b002      	add	sp, #8
 8003a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a1c:	b004      	add	sp, #16
 8003a1e:	4770      	bx	lr
 8003a20:	20000068 	.word	0x20000068

08003a24 <sniprintf>:
 8003a24:	b40c      	push	{r2, r3}
 8003a26:	b530      	push	{r4, r5, lr}
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <sniprintf+0x60>)
 8003a2a:	1e0c      	subs	r4, r1, #0
 8003a2c:	b09d      	sub	sp, #116	; 0x74
 8003a2e:	681d      	ldr	r5, [r3, #0]
 8003a30:	da04      	bge.n	8003a3c <sniprintf+0x18>
 8003a32:	238b      	movs	r3, #139	; 0x8b
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3a:	e01e      	b.n	8003a7a <sniprintf+0x56>
 8003a3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a44:	bf14      	ite	ne
 8003a46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a4a:	4623      	moveq	r3, r4
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	9307      	str	r3, [sp, #28]
 8003a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a5e:	ab21      	add	r3, sp, #132	; 0x84
 8003a60:	a902      	add	r1, sp, #8
 8003a62:	4628      	mov	r0, r5
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	f000 fb3f 	bl	80040e8 <_svfiprintf_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	bfbc      	itt	lt
 8003a6e:	238b      	movlt	r3, #139	; 0x8b
 8003a70:	602b      	strlt	r3, [r5, #0]
 8003a72:	b114      	cbz	r4, 8003a7a <sniprintf+0x56>
 8003a74:	9b02      	ldr	r3, [sp, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	b01d      	add	sp, #116	; 0x74
 8003a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a80:	b002      	add	sp, #8
 8003a82:	4770      	bx	lr
 8003a84:	20000068 	.word	0x20000068

08003a88 <__swbuf_r>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	460f      	mov	r7, r1
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	4606      	mov	r6, r0
 8003a90:	b118      	cbz	r0, 8003a9a <__swbuf_r+0x12>
 8003a92:	6983      	ldr	r3, [r0, #24]
 8003a94:	b90b      	cbnz	r3, 8003a9a <__swbuf_r+0x12>
 8003a96:	f000 f9bd 	bl	8003e14 <__sinit>
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <__swbuf_r+0x9c>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d101      	bne.n	8003aa4 <__swbuf_r+0x1c>
 8003aa0:	6874      	ldr	r4, [r6, #4]
 8003aa2:	e008      	b.n	8003ab6 <__swbuf_r+0x2e>
 8003aa4:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <__swbuf_r+0xa0>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d101      	bne.n	8003aae <__swbuf_r+0x26>
 8003aaa:	68b4      	ldr	r4, [r6, #8]
 8003aac:	e003      	b.n	8003ab6 <__swbuf_r+0x2e>
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <__swbuf_r+0xa4>)
 8003ab0:	429c      	cmp	r4, r3
 8003ab2:	bf08      	it	eq
 8003ab4:	68f4      	ldreq	r4, [r6, #12]
 8003ab6:	69a3      	ldr	r3, [r4, #24]
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	071a      	lsls	r2, r3, #28
 8003abe:	d509      	bpl.n	8003ad4 <__swbuf_r+0x4c>
 8003ac0:	6923      	ldr	r3, [r4, #16]
 8003ac2:	b13b      	cbz	r3, 8003ad4 <__swbuf_r+0x4c>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	6920      	ldr	r0, [r4, #16]
 8003ac8:	1a18      	subs	r0, r3, r0
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	4298      	cmp	r0, r3
 8003ace:	b2fd      	uxtb	r5, r7
 8003ad0:	db0f      	blt.n	8003af2 <__swbuf_r+0x6a>
 8003ad2:	e008      	b.n	8003ae6 <__swbuf_r+0x5e>
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f000 f82a 	bl	8003b30 <__swsetup_r>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0f1      	beq.n	8003ac4 <__swbuf_r+0x3c>
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f917 	bl	8003d1c <_fflush_r>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1f6      	bne.n	8003ae0 <__swbuf_r+0x58>
 8003af2:	68a3      	ldr	r3, [r4, #8]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60a3      	str	r3, [r4, #8]
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	6022      	str	r2, [r4, #0]
 8003afe:	701f      	strb	r7, [r3, #0]
 8003b00:	6962      	ldr	r2, [r4, #20]
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <__swbuf_r+0x8a>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	07db      	lsls	r3, r3, #31
 8003b0c:	d507      	bpl.n	8003b1e <__swbuf_r+0x96>
 8003b0e:	2d0a      	cmp	r5, #10
 8003b10:	d105      	bne.n	8003b1e <__swbuf_r+0x96>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4630      	mov	r0, r6
 8003b16:	f000 f901 	bl	8003d1c <_fflush_r>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1e0      	bne.n	8003ae0 <__swbuf_r+0x58>
 8003b1e:	4628      	mov	r0, r5
 8003b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08005770 	.word	0x08005770
 8003b28:	08005790 	.word	0x08005790
 8003b2c:	080057b0 	.word	0x080057b0

08003b30 <__swsetup_r>:
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <__swsetup_r+0xcc>)
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	681d      	ldr	r5, [r3, #0]
 8003b36:	4606      	mov	r6, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	b125      	cbz	r5, 8003b46 <__swsetup_r+0x16>
 8003b3c:	69ab      	ldr	r3, [r5, #24]
 8003b3e:	b913      	cbnz	r3, 8003b46 <__swsetup_r+0x16>
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 f967 	bl	8003e14 <__sinit>
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <__swsetup_r+0xd0>)
 8003b48:	429c      	cmp	r4, r3
 8003b4a:	d101      	bne.n	8003b50 <__swsetup_r+0x20>
 8003b4c:	686c      	ldr	r4, [r5, #4]
 8003b4e:	e008      	b.n	8003b62 <__swsetup_r+0x32>
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <__swsetup_r+0xd4>)
 8003b52:	429c      	cmp	r4, r3
 8003b54:	d101      	bne.n	8003b5a <__swsetup_r+0x2a>
 8003b56:	68ac      	ldr	r4, [r5, #8]
 8003b58:	e003      	b.n	8003b62 <__swsetup_r+0x32>
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <__swsetup_r+0xd8>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	bf08      	it	eq
 8003b60:	68ec      	ldreq	r4, [r5, #12]
 8003b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	0715      	lsls	r5, r2, #28
 8003b6a:	d41d      	bmi.n	8003ba8 <__swsetup_r+0x78>
 8003b6c:	06d0      	lsls	r0, r2, #27
 8003b6e:	d402      	bmi.n	8003b76 <__swsetup_r+0x46>
 8003b70:	2209      	movs	r2, #9
 8003b72:	6032      	str	r2, [r6, #0]
 8003b74:	e03a      	b.n	8003bec <__swsetup_r+0xbc>
 8003b76:	0751      	lsls	r1, r2, #29
 8003b78:	d512      	bpl.n	8003ba0 <__swsetup_r+0x70>
 8003b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b7c:	b141      	cbz	r1, 8003b90 <__swsetup_r+0x60>
 8003b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b82:	4299      	cmp	r1, r3
 8003b84:	d002      	beq.n	8003b8c <__swsetup_r+0x5c>
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff fdd2 	bl	8003730 <_free_r>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6363      	str	r3, [r4, #52]	; 0x34
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6063      	str	r3, [r4, #4]
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f043 0308 	orr.w	r3, r3, #8
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	b94b      	cbnz	r3, 8003bc0 <__swsetup_r+0x90>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb6:	d003      	beq.n	8003bc0 <__swsetup_r+0x90>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f9f4 	bl	8003fa8 <__smakebuf_r>
 8003bc0:	89a2      	ldrh	r2, [r4, #12]
 8003bc2:	f012 0301 	ands.w	r3, r2, #1
 8003bc6:	d005      	beq.n	8003bd4 <__swsetup_r+0xa4>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60a3      	str	r3, [r4, #8]
 8003bcc:	6963      	ldr	r3, [r4, #20]
 8003bce:	425b      	negs	r3, r3
 8003bd0:	61a3      	str	r3, [r4, #24]
 8003bd2:	e003      	b.n	8003bdc <__swsetup_r+0xac>
 8003bd4:	0792      	lsls	r2, r2, #30
 8003bd6:	bf58      	it	pl
 8003bd8:	6963      	ldrpl	r3, [r4, #20]
 8003bda:	60a3      	str	r3, [r4, #8]
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	b95b      	cbnz	r3, 8003bf8 <__swsetup_r+0xc8>
 8003be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be4:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8003be8:	b280      	uxth	r0, r0
 8003bea:	b130      	cbz	r0, 8003bfa <__swsetup_r+0xca>
 8003bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	20000068 	.word	0x20000068
 8003c00:	08005770 	.word	0x08005770
 8003c04:	08005790 	.word	0x08005790
 8003c08:	080057b0 	.word	0x080057b0

08003c0c <__sflush_r>:
 8003c0c:	898a      	ldrh	r2, [r1, #12]
 8003c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c12:	4605      	mov	r5, r0
 8003c14:	0710      	lsls	r0, r2, #28
 8003c16:	460c      	mov	r4, r1
 8003c18:	d459      	bmi.n	8003cce <__sflush_r+0xc2>
 8003c1a:	684b      	ldr	r3, [r1, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dc02      	bgt.n	8003c26 <__sflush_r+0x1a>
 8003c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dd17      	ble.n	8003c56 <__sflush_r+0x4a>
 8003c26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c28:	b1ae      	cbz	r6, 8003c56 <__sflush_r+0x4a>
 8003c2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c2e:	2300      	movs	r3, #0
 8003c30:	b292      	uxth	r2, r2
 8003c32:	682f      	ldr	r7, [r5, #0]
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	b10a      	cbz	r2, 8003c3c <__sflush_r+0x30>
 8003c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c3a:	e015      	b.n	8003c68 <__sflush_r+0x5c>
 8003c3c:	6a21      	ldr	r1, [r4, #32]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4628      	mov	r0, r5
 8003c42:	47b0      	blx	r6
 8003c44:	1c41      	adds	r1, r0, #1
 8003c46:	d10f      	bne.n	8003c68 <__sflush_r+0x5c>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b16b      	cbz	r3, 8003c68 <__sflush_r+0x5c>
 8003c4c:	2b1d      	cmp	r3, #29
 8003c4e:	d001      	beq.n	8003c54 <__sflush_r+0x48>
 8003c50:	2b16      	cmp	r3, #22
 8003c52:	d103      	bne.n	8003c5c <__sflush_r+0x50>
 8003c54:	602f      	str	r7, [r5, #0]
 8003c56:	2000      	movs	r0, #0
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	075a      	lsls	r2, r3, #29
 8003c6c:	d505      	bpl.n	8003c7a <__sflush_r+0x6e>
 8003c6e:	6863      	ldr	r3, [r4, #4]
 8003c70:	1ac0      	subs	r0, r0, r3
 8003c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c74:	b10b      	cbz	r3, 8003c7a <__sflush_r+0x6e>
 8003c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c78:	1ac0      	subs	r0, r0, r3
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c80:	6a21      	ldr	r1, [r4, #32]
 8003c82:	4628      	mov	r0, r5
 8003c84:	47b0      	blx	r6
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	d106      	bne.n	8003c9a <__sflush_r+0x8e>
 8003c8c:	6829      	ldr	r1, [r5, #0]
 8003c8e:	291d      	cmp	r1, #29
 8003c90:	d83a      	bhi.n	8003d08 <__sflush_r+0xfc>
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <__sflush_r+0x10c>)
 8003c94:	40ca      	lsrs	r2, r1
 8003c96:	07d6      	lsls	r6, r2, #31
 8003c98:	d536      	bpl.n	8003d08 <__sflush_r+0xfc>
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	6062      	str	r2, [r4, #4]
 8003c9e:	04d9      	lsls	r1, r3, #19
 8003ca0:	6922      	ldr	r2, [r4, #16]
 8003ca2:	6022      	str	r2, [r4, #0]
 8003ca4:	d504      	bpl.n	8003cb0 <__sflush_r+0xa4>
 8003ca6:	1c42      	adds	r2, r0, #1
 8003ca8:	d101      	bne.n	8003cae <__sflush_r+0xa2>
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	b903      	cbnz	r3, 8003cb0 <__sflush_r+0xa4>
 8003cae:	6560      	str	r0, [r4, #84]	; 0x54
 8003cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cb2:	602f      	str	r7, [r5, #0]
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	d0ce      	beq.n	8003c56 <__sflush_r+0x4a>
 8003cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <__sflush_r+0xba>
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff fd35 	bl	8003730 <_free_r>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8003cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cce:	690f      	ldr	r7, [r1, #16]
 8003cd0:	2f00      	cmp	r7, #0
 8003cd2:	d0c0      	beq.n	8003c56 <__sflush_r+0x4a>
 8003cd4:	0793      	lsls	r3, r2, #30
 8003cd6:	680e      	ldr	r6, [r1, #0]
 8003cd8:	bf08      	it	eq
 8003cda:	694b      	ldreq	r3, [r1, #20]
 8003cdc:	600f      	str	r7, [r1, #0]
 8003cde:	bf18      	it	ne
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	ebc7 0806 	rsb	r8, r7, r6
 8003ce6:	608b      	str	r3, [r1, #8]
 8003ce8:	e002      	b.n	8003cf0 <__sflush_r+0xe4>
 8003cea:	4407      	add	r7, r0
 8003cec:	ebc0 0808 	rsb	r8, r0, r8
 8003cf0:	f1b8 0f00 	cmp.w	r8, #0
 8003cf4:	ddaf      	ble.n	8003c56 <__sflush_r+0x4a>
 8003cf6:	4643      	mov	r3, r8
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	6a21      	ldr	r1, [r4, #32]
 8003cfc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b0      	blx	r6
 8003d02:	2800      	cmp	r0, #0
 8003d04:	dcf1      	bgt.n	8003cea <__sflush_r+0xde>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d16:	bf00      	nop
 8003d18:	20400001 	.word	0x20400001

08003d1c <_fflush_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	690b      	ldr	r3, [r1, #16]
 8003d20:	4605      	mov	r5, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	b1db      	cbz	r3, 8003d5e <_fflush_r+0x42>
 8003d26:	b118      	cbz	r0, 8003d30 <_fflush_r+0x14>
 8003d28:	6983      	ldr	r3, [r0, #24]
 8003d2a:	b90b      	cbnz	r3, 8003d30 <_fflush_r+0x14>
 8003d2c:	f000 f872 	bl	8003e14 <__sinit>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <_fflush_r+0x48>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d101      	bne.n	8003d3a <_fflush_r+0x1e>
 8003d36:	686c      	ldr	r4, [r5, #4]
 8003d38:	e008      	b.n	8003d4c <_fflush_r+0x30>
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <_fflush_r+0x4c>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	d101      	bne.n	8003d44 <_fflush_r+0x28>
 8003d40:	68ac      	ldr	r4, [r5, #8]
 8003d42:	e003      	b.n	8003d4c <_fflush_r+0x30>
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <_fflush_r+0x50>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	bf08      	it	eq
 8003d4a:	68ec      	ldreq	r4, [r5, #12]
 8003d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d50:	b12b      	cbz	r3, 8003d5e <_fflush_r+0x42>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5a:	f7ff bf57 	b.w	8003c0c <__sflush_r>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	08005770 	.word	0x08005770
 8003d68:	08005790 	.word	0x08005790
 8003d6c:	080057b0 	.word	0x080057b0

08003d70 <fflush>:
 8003d70:	4601      	mov	r1, r0
 8003d72:	b920      	cbnz	r0, 8003d7e <fflush+0xe>
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <fflush+0x18>)
 8003d76:	4905      	ldr	r1, [pc, #20]	; (8003d8c <fflush+0x1c>)
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f000 b8d3 	b.w	8003f24 <_fwalk_reent>
 8003d7e:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <fflush+0x20>)
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	f7ff bfcb 	b.w	8003d1c <_fflush_r>
 8003d86:	bf00      	nop
 8003d88:	0800576c 	.word	0x0800576c
 8003d8c:	08003d1d 	.word	0x08003d1d
 8003d90:	20000068 	.word	0x20000068

08003d94 <_cleanup_r>:
 8003d94:	4901      	ldr	r1, [pc, #4]	; (8003d9c <_cleanup_r+0x8>)
 8003d96:	f000 b8c5 	b.w	8003f24 <_fwalk_reent>
 8003d9a:	bf00      	nop
 8003d9c:	08003d1d 	.word	0x08003d1d

08003da0 <std.isra.0>:
 8003da0:	2300      	movs	r3, #0
 8003da2:	b510      	push	{r4, lr}
 8003da4:	4604      	mov	r4, r0
 8003da6:	6003      	str	r3, [r0, #0]
 8003da8:	6043      	str	r3, [r0, #4]
 8003daa:	6083      	str	r3, [r0, #8]
 8003dac:	8181      	strh	r1, [r0, #12]
 8003dae:	6643      	str	r3, [r0, #100]	; 0x64
 8003db0:	81c2      	strh	r2, [r0, #14]
 8003db2:	6103      	str	r3, [r0, #16]
 8003db4:	6143      	str	r3, [r0, #20]
 8003db6:	6183      	str	r3, [r0, #24]
 8003db8:	4619      	mov	r1, r3
 8003dba:	2208      	movs	r2, #8
 8003dbc:	305c      	adds	r0, #92	; 0x5c
 8003dbe:	f000 f92f 	bl	8004020 <memset>
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <std.isra.0+0x38>)
 8003dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <std.isra.0+0x3c>)
 8003dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <std.isra.0+0x40>)
 8003dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std.isra.0+0x44>)
 8003dd0:	6224      	str	r4, [r4, #32]
 8003dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8003dd4:	bd10      	pop	{r4, pc}
 8003dd6:	bf00      	nop
 8003dd8:	08004fbf 	.word	0x08004fbf
 8003ddc:	08004fe1 	.word	0x08004fe1
 8003de0:	08005019 	.word	0x08005019
 8003de4:	0800503d 	.word	0x0800503d

08003de8 <__sfmoreglue>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	2368      	movs	r3, #104	; 0x68
 8003dec:	1e4d      	subs	r5, r1, #1
 8003dee:	435d      	muls	r5, r3
 8003df0:	460e      	mov	r6, r1
 8003df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003df6:	f7ff fce9 	bl	80037cc <_malloc_r>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	b140      	cbz	r0, 8003e10 <__sfmoreglue+0x28>
 8003dfe:	2100      	movs	r1, #0
 8003e00:	e880 0042 	stmia.w	r0, {r1, r6}
 8003e04:	300c      	adds	r0, #12
 8003e06:	60a0      	str	r0, [r4, #8]
 8003e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e0c:	f000 f908 	bl	8004020 <memset>
 8003e10:	4620      	mov	r0, r4
 8003e12:	bd70      	pop	{r4, r5, r6, pc}

08003e14 <__sinit>:
 8003e14:	6983      	ldr	r3, [r0, #24]
 8003e16:	b510      	push	{r4, lr}
 8003e18:	4604      	mov	r4, r0
 8003e1a:	bb33      	cbnz	r3, 8003e6a <__sinit+0x56>
 8003e1c:	6483      	str	r3, [r0, #72]	; 0x48
 8003e1e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003e20:	6503      	str	r3, [r0, #80]	; 0x50
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <__sinit+0x58>)
 8003e24:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <__sinit+0x5c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6282      	str	r2, [r0, #40]	; 0x28
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	bf04      	itt	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	6183      	streq	r3, [r0, #24]
 8003e32:	f000 f81f 	bl	8003e74 <__sfp>
 8003e36:	6060      	str	r0, [r4, #4]
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 f81b 	bl	8003e74 <__sfp>
 8003e3e:	60a0      	str	r0, [r4, #8]
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f817 	bl	8003e74 <__sfp>
 8003e46:	2200      	movs	r2, #0
 8003e48:	60e0      	str	r0, [r4, #12]
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	6860      	ldr	r0, [r4, #4]
 8003e4e:	f7ff ffa7 	bl	8003da0 <std.isra.0>
 8003e52:	2201      	movs	r2, #1
 8003e54:	2109      	movs	r1, #9
 8003e56:	68a0      	ldr	r0, [r4, #8]
 8003e58:	f7ff ffa2 	bl	8003da0 <std.isra.0>
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	2112      	movs	r1, #18
 8003e60:	68e0      	ldr	r0, [r4, #12]
 8003e62:	f7ff ff9d 	bl	8003da0 <std.isra.0>
 8003e66:	2301      	movs	r3, #1
 8003e68:	61a3      	str	r3, [r4, #24]
 8003e6a:	bd10      	pop	{r4, pc}
 8003e6c:	0800576c 	.word	0x0800576c
 8003e70:	08003d95 	.word	0x08003d95

08003e74 <__sfp>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <__sfp+0x74>)
 8003e78:	681e      	ldr	r6, [r3, #0]
 8003e7a:	69b3      	ldr	r3, [r6, #24]
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	b913      	cbnz	r3, 8003e86 <__sfp+0x12>
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ffc7 	bl	8003e14 <__sinit>
 8003e86:	3648      	adds	r6, #72	; 0x48
 8003e88:	68b4      	ldr	r4, [r6, #8]
 8003e8a:	6873      	ldr	r3, [r6, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	d404      	bmi.n	8003e9a <__sfp+0x26>
 8003e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e94:	b17d      	cbz	r5, 8003eb6 <__sfp+0x42>
 8003e96:	3468      	adds	r4, #104	; 0x68
 8003e98:	e7f8      	b.n	8003e8c <__sfp+0x18>
 8003e9a:	6833      	ldr	r3, [r6, #0]
 8003e9c:	b10b      	cbz	r3, 8003ea2 <__sfp+0x2e>
 8003e9e:	6836      	ldr	r6, [r6, #0]
 8003ea0:	e7f2      	b.n	8003e88 <__sfp+0x14>
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ff9f 	bl	8003de8 <__sfmoreglue>
 8003eaa:	6030      	str	r0, [r6, #0]
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d1f6      	bne.n	8003e9e <__sfp+0x2a>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eba:	81e3      	strh	r3, [r4, #14]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	6665      	str	r5, [r4, #100]	; 0x64
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	60a5      	str	r5, [r4, #8]
 8003ec6:	6065      	str	r5, [r4, #4]
 8003ec8:	6125      	str	r5, [r4, #16]
 8003eca:	6165      	str	r5, [r4, #20]
 8003ecc:	61a5      	str	r5, [r4, #24]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ed6:	f000 f8a3 	bl	8004020 <memset>
 8003eda:	6365      	str	r5, [r4, #52]	; 0x34
 8003edc:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ede:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ee0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	0800576c 	.word	0x0800576c

08003eec <_fwalk>:
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	b18c      	cbz	r4, 8003f1e <_fwalk+0x32>
 8003efa:	68a5      	ldr	r5, [r4, #8]
 8003efc:	6867      	ldr	r7, [r4, #4]
 8003efe:	3f01      	subs	r7, #1
 8003f00:	d40b      	bmi.n	8003f1a <_fwalk+0x2e>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d906      	bls.n	8003f16 <_fwalk+0x2a>
 8003f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	d002      	beq.n	8003f16 <_fwalk+0x2a>
 8003f10:	4628      	mov	r0, r5
 8003f12:	47c0      	blx	r8
 8003f14:	4306      	orrs	r6, r0
 8003f16:	3568      	adds	r5, #104	; 0x68
 8003f18:	e7f1      	b.n	8003efe <_fwalk+0x12>
 8003f1a:	6824      	ldr	r4, [r4, #0]
 8003f1c:	e7ec      	b.n	8003ef8 <_fwalk+0xc>
 8003f1e:	4630      	mov	r0, r6
 8003f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f24 <_fwalk_reent>:
 8003f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f28:	4680      	mov	r8, r0
 8003f2a:	4689      	mov	r9, r1
 8003f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f30:	2600      	movs	r6, #0
 8003f32:	b194      	cbz	r4, 8003f5a <_fwalk_reent+0x36>
 8003f34:	68a5      	ldr	r5, [r4, #8]
 8003f36:	6867      	ldr	r7, [r4, #4]
 8003f38:	3f01      	subs	r7, #1
 8003f3a:	d40c      	bmi.n	8003f56 <_fwalk_reent+0x32>
 8003f3c:	89ab      	ldrh	r3, [r5, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d907      	bls.n	8003f52 <_fwalk_reent+0x2e>
 8003f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f46:	3301      	adds	r3, #1
 8003f48:	d003      	beq.n	8003f52 <_fwalk_reent+0x2e>
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	47c8      	blx	r9
 8003f50:	4306      	orrs	r6, r0
 8003f52:	3568      	adds	r5, #104	; 0x68
 8003f54:	e7f0      	b.n	8003f38 <_fwalk_reent+0x14>
 8003f56:	6824      	ldr	r4, [r4, #0]
 8003f58:	e7eb      	b.n	8003f32 <_fwalk_reent+0xe>
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003f60 <__swhatbuf_r>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	460e      	mov	r6, r1
 8003f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	b090      	sub	sp, #64	; 0x40
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	461d      	mov	r5, r3
 8003f70:	da06      	bge.n	8003f80 <__swhatbuf_r+0x20>
 8003f72:	2300      	movs	r3, #0
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	89b3      	ldrh	r3, [r6, #12]
 8003f78:	061a      	lsls	r2, r3, #24
 8003f7a:	d50e      	bpl.n	8003f9a <__swhatbuf_r+0x3a>
 8003f7c:	2340      	movs	r3, #64	; 0x40
 8003f7e:	e00e      	b.n	8003f9e <__swhatbuf_r+0x3e>
 8003f80:	aa01      	add	r2, sp, #4
 8003f82:	f001 fa33 	bl	80053ec <_fstat_r>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	dbf3      	blt.n	8003f72 <__swhatbuf_r+0x12>
 8003f8a:	9a02      	ldr	r2, [sp, #8]
 8003f8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f94:	425a      	negs	r2, r3
 8003f96:	415a      	adcs	r2, r3
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	b010      	add	sp, #64	; 0x40
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fa8 <__smakebuf_r>:
 8003fa8:	898b      	ldrh	r3, [r1, #12]
 8003faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fac:	079e      	lsls	r6, r3, #30
 8003fae:	4605      	mov	r5, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	d410      	bmi.n	8003fd6 <__smakebuf_r+0x2e>
 8003fb4:	ab01      	add	r3, sp, #4
 8003fb6:	466a      	mov	r2, sp
 8003fb8:	f7ff ffd2 	bl	8003f60 <__swhatbuf_r>
 8003fbc:	9900      	ldr	r1, [sp, #0]
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7ff fc03 	bl	80037cc <_malloc_r>
 8003fc6:	b968      	cbnz	r0, 8003fe4 <__smakebuf_r+0x3c>
 8003fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fcc:	059a      	lsls	r2, r3, #22
 8003fce:	d422      	bmi.n	8004016 <__smakebuf_r+0x6e>
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	6163      	str	r3, [r4, #20]
 8003fe2:	e018      	b.n	8004016 <__smakebuf_r+0x6e>
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	; (800401c <__smakebuf_r+0x74>)
 8003fe6:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	6020      	str	r0, [r4, #0]
 8003fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	9b00      	ldr	r3, [sp, #0]
 8003ff4:	6163      	str	r3, [r4, #20]
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	6120      	str	r0, [r4, #16]
 8003ffa:	b14b      	cbz	r3, 8004010 <__smakebuf_r+0x68>
 8003ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004000:	4628      	mov	r0, r5
 8004002:	f001 fa05 	bl	8005410 <_isatty_r>
 8004006:	b118      	cbz	r0, 8004010 <__smakebuf_r+0x68>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a0      	ldrh	r0, [r4, #12]
 8004012:	4330      	orrs	r0, r6
 8004014:	81a0      	strh	r0, [r4, #12]
 8004016:	b002      	add	sp, #8
 8004018:	bd70      	pop	{r4, r5, r6, pc}
 800401a:	bf00      	nop
 800401c:	08003d95 	.word	0x08003d95

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d002      	beq.n	800402e <memset+0xe>
 8004028:	f803 1b01 	strb.w	r1, [r3], #1
 800402c:	e7fa      	b.n	8004024 <memset+0x4>
 800402e:	4770      	bx	lr

08004030 <__malloc_lock>:
 8004030:	4770      	bx	lr

08004032 <__malloc_unlock>:
 8004032:	4770      	bx	lr

08004034 <__ssputs_r>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	688e      	ldr	r6, [r1, #8]
 800403a:	429e      	cmp	r6, r3
 800403c:	4682      	mov	sl, r0
 800403e:	460c      	mov	r4, r1
 8004040:	4691      	mov	r9, r2
 8004042:	4698      	mov	r8, r3
 8004044:	d83e      	bhi.n	80040c4 <__ssputs_r+0x90>
 8004046:	898a      	ldrh	r2, [r1, #12]
 8004048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800404c:	d03a      	beq.n	80040c4 <__ssputs_r+0x90>
 800404e:	6825      	ldr	r5, [r4, #0]
 8004050:	6909      	ldr	r1, [r1, #16]
 8004052:	1a6f      	subs	r7, r5, r1
 8004054:	6965      	ldr	r5, [r4, #20]
 8004056:	2302      	movs	r3, #2
 8004058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800405c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004060:	1c7b      	adds	r3, r7, #1
 8004062:	4443      	add	r3, r8
 8004064:	429d      	cmp	r5, r3
 8004066:	bf38      	it	cc
 8004068:	461d      	movcc	r5, r3
 800406a:	0553      	lsls	r3, r2, #21
 800406c:	d50f      	bpl.n	800408e <__ssputs_r+0x5a>
 800406e:	4629      	mov	r1, r5
 8004070:	f7ff fbac 	bl	80037cc <_malloc_r>
 8004074:	4606      	mov	r6, r0
 8004076:	b198      	cbz	r0, 80040a0 <__ssputs_r+0x6c>
 8004078:	463a      	mov	r2, r7
 800407a:	6921      	ldr	r1, [r4, #16]
 800407c:	f001 f9ea 	bl	8005454 <memcpy>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	e013      	b.n	80040b6 <__ssputs_r+0x82>
 800408e:	462a      	mov	r2, r5
 8004090:	f001 fa06 	bl	80054a0 <_realloc_r>
 8004094:	4606      	mov	r6, r0
 8004096:	b970      	cbnz	r0, 80040b6 <__ssputs_r+0x82>
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	4650      	mov	r0, sl
 800409c:	f7ff fb48 	bl	8003730 <_free_r>
 80040a0:	230c      	movs	r3, #12
 80040a2:	f8ca 3000 	str.w	r3, [sl]
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	6126      	str	r6, [r4, #16]
 80040b8:	6165      	str	r5, [r4, #20]
 80040ba:	443e      	add	r6, r7
 80040bc:	1bed      	subs	r5, r5, r7
 80040be:	6026      	str	r6, [r4, #0]
 80040c0:	60a5      	str	r5, [r4, #8]
 80040c2:	4646      	mov	r6, r8
 80040c4:	4546      	cmp	r6, r8
 80040c6:	bf28      	it	cs
 80040c8:	4646      	movcs	r6, r8
 80040ca:	4632      	mov	r2, r6
 80040cc:	4649      	mov	r1, r9
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	f001 f9cb 	bl	800546a <memmove>
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	1b9b      	subs	r3, r3, r6
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	441e      	add	r6, r3
 80040de:	6026      	str	r6, [r4, #0]
 80040e0:	2000      	movs	r0, #0
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080040e8 <_svfiprintf_r>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	b09d      	sub	sp, #116	; 0x74
 80040ee:	4680      	mov	r8, r0
 80040f0:	9303      	str	r3, [sp, #12]
 80040f2:	898b      	ldrh	r3, [r1, #12]
 80040f4:	061c      	lsls	r4, r3, #24
 80040f6:	460d      	mov	r5, r1
 80040f8:	4616      	mov	r6, r2
 80040fa:	d50d      	bpl.n	8004118 <_svfiprintf_r+0x30>
 80040fc:	690b      	ldr	r3, [r1, #16]
 80040fe:	b95b      	cbnz	r3, 8004118 <_svfiprintf_r+0x30>
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	f7ff fb63 	bl	80037cc <_malloc_r>
 8004106:	6028      	str	r0, [r5, #0]
 8004108:	6128      	str	r0, [r5, #16]
 800410a:	b918      	cbnz	r0, 8004114 <_svfiprintf_r+0x2c>
 800410c:	230c      	movs	r3, #12
 800410e:	f8c8 3000 	str.w	r3, [r8]
 8004112:	e0cd      	b.n	80042b0 <_svfiprintf_r+0x1c8>
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	616b      	str	r3, [r5, #20]
 8004118:	2300      	movs	r3, #0
 800411a:	9309      	str	r3, [sp, #36]	; 0x24
 800411c:	2320      	movs	r3, #32
 800411e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004122:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80042c0 <_svfiprintf_r+0x1d8>
 8004126:	2330      	movs	r3, #48	; 0x30
 8004128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800412c:	4637      	mov	r7, r6
 800412e:	463c      	mov	r4, r7
 8004130:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004134:	b91b      	cbnz	r3, 800413e <_svfiprintf_r+0x56>
 8004136:	ebb7 0906 	subs.w	r9, r7, r6
 800413a:	d010      	beq.n	800415e <_svfiprintf_r+0x76>
 800413c:	e003      	b.n	8004146 <_svfiprintf_r+0x5e>
 800413e:	2b25      	cmp	r3, #37	; 0x25
 8004140:	d0f9      	beq.n	8004136 <_svfiprintf_r+0x4e>
 8004142:	4627      	mov	r7, r4
 8004144:	e7f3      	b.n	800412e <_svfiprintf_r+0x46>
 8004146:	464b      	mov	r3, r9
 8004148:	4632      	mov	r2, r6
 800414a:	4629      	mov	r1, r5
 800414c:	4640      	mov	r0, r8
 800414e:	f7ff ff71 	bl	8004034 <__ssputs_r>
 8004152:	3001      	adds	r0, #1
 8004154:	f000 80a7 	beq.w	80042a6 <_svfiprintf_r+0x1be>
 8004158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415a:	444b      	add	r3, r9
 800415c:	9309      	str	r3, [sp, #36]	; 0x24
 800415e:	783b      	ldrb	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a0 	beq.w	80042a6 <_svfiprintf_r+0x1be>
 8004166:	2300      	movs	r3, #0
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	9307      	str	r3, [sp, #28]
 8004170:	9205      	str	r2, [sp, #20]
 8004172:	9306      	str	r3, [sp, #24]
 8004174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004178:	931a      	str	r3, [sp, #104]	; 0x68
 800417a:	2601      	movs	r6, #1
 800417c:	2205      	movs	r2, #5
 800417e:	7821      	ldrb	r1, [r4, #0]
 8004180:	484e      	ldr	r0, [pc, #312]	; (80042bc <_svfiprintf_r+0x1d4>)
 8004182:	f7fc f825 	bl	80001d0 <memchr>
 8004186:	1c67      	adds	r7, r4, #1
 8004188:	9b04      	ldr	r3, [sp, #16]
 800418a:	b138      	cbz	r0, 800419c <_svfiprintf_r+0xb4>
 800418c:	4a4b      	ldr	r2, [pc, #300]	; (80042bc <_svfiprintf_r+0x1d4>)
 800418e:	1a80      	subs	r0, r0, r2
 8004190:	fa06 f000 	lsl.w	r0, r6, r0
 8004194:	4318      	orrs	r0, r3
 8004196:	9004      	str	r0, [sp, #16]
 8004198:	463c      	mov	r4, r7
 800419a:	e7ef      	b.n	800417c <_svfiprintf_r+0x94>
 800419c:	06d9      	lsls	r1, r3, #27
 800419e:	bf44      	itt	mi
 80041a0:	2220      	movmi	r2, #32
 80041a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041a6:	071a      	lsls	r2, r3, #28
 80041a8:	bf44      	itt	mi
 80041aa:	222b      	movmi	r2, #43	; 0x2b
 80041ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041b0:	7822      	ldrb	r2, [r4, #0]
 80041b2:	2a2a      	cmp	r2, #42	; 0x2a
 80041b4:	d003      	beq.n	80041be <_svfiprintf_r+0xd6>
 80041b6:	9a07      	ldr	r2, [sp, #28]
 80041b8:	2100      	movs	r1, #0
 80041ba:	200a      	movs	r0, #10
 80041bc:	e00b      	b.n	80041d6 <_svfiprintf_r+0xee>
 80041be:	9a03      	ldr	r2, [sp, #12]
 80041c0:	1d11      	adds	r1, r2, #4
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	9103      	str	r1, [sp, #12]
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	da10      	bge.n	80041ec <_svfiprintf_r+0x104>
 80041ca:	4252      	negs	r2, r2
 80041cc:	f043 0002 	orr.w	r0, r3, #2
 80041d0:	9207      	str	r2, [sp, #28]
 80041d2:	9004      	str	r0, [sp, #16]
 80041d4:	e00b      	b.n	80041ee <_svfiprintf_r+0x106>
 80041d6:	4627      	mov	r7, r4
 80041d8:	3401      	adds	r4, #1
 80041da:	783b      	ldrb	r3, [r7, #0]
 80041dc:	3b30      	subs	r3, #48	; 0x30
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d803      	bhi.n	80041ea <_svfiprintf_r+0x102>
 80041e2:	fb00 3202 	mla	r2, r0, r2, r3
 80041e6:	2101      	movs	r1, #1
 80041e8:	e7f5      	b.n	80041d6 <_svfiprintf_r+0xee>
 80041ea:	b101      	cbz	r1, 80041ee <_svfiprintf_r+0x106>
 80041ec:	9207      	str	r2, [sp, #28]
 80041ee:	783b      	ldrb	r3, [r7, #0]
 80041f0:	2b2e      	cmp	r3, #46	; 0x2e
 80041f2:	d11e      	bne.n	8004232 <_svfiprintf_r+0x14a>
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d10a      	bne.n	8004210 <_svfiprintf_r+0x128>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	9203      	str	r2, [sp, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfb8      	it	lt
 8004206:	f04f 33ff 	movlt.w	r3, #4294967295
 800420a:	3702      	adds	r7, #2
 800420c:	9305      	str	r3, [sp, #20]
 800420e:	e010      	b.n	8004232 <_svfiprintf_r+0x14a>
 8004210:	2300      	movs	r3, #0
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	1c78      	adds	r0, r7, #1
 8004216:	4619      	mov	r1, r3
 8004218:	240a      	movs	r4, #10
 800421a:	4607      	mov	r7, r0
 800421c:	3001      	adds	r0, #1
 800421e:	783a      	ldrb	r2, [r7, #0]
 8004220:	3a30      	subs	r2, #48	; 0x30
 8004222:	2a09      	cmp	r2, #9
 8004224:	d803      	bhi.n	800422e <_svfiprintf_r+0x146>
 8004226:	fb04 2101 	mla	r1, r4, r1, r2
 800422a:	2301      	movs	r3, #1
 800422c:	e7f5      	b.n	800421a <_svfiprintf_r+0x132>
 800422e:	b103      	cbz	r3, 8004232 <_svfiprintf_r+0x14a>
 8004230:	9105      	str	r1, [sp, #20]
 8004232:	2203      	movs	r2, #3
 8004234:	7839      	ldrb	r1, [r7, #0]
 8004236:	4822      	ldr	r0, [pc, #136]	; (80042c0 <_svfiprintf_r+0x1d8>)
 8004238:	f7fb ffca 	bl	80001d0 <memchr>
 800423c:	b140      	cbz	r0, 8004250 <_svfiprintf_r+0x168>
 800423e:	2340      	movs	r3, #64	; 0x40
 8004240:	ebcb 0000 	rsb	r0, fp, r0
 8004244:	fa03 f000 	lsl.w	r0, r3, r0
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	4318      	orrs	r0, r3
 800424c:	9004      	str	r0, [sp, #16]
 800424e:	3701      	adds	r7, #1
 8004250:	7839      	ldrb	r1, [r7, #0]
 8004252:	481c      	ldr	r0, [pc, #112]	; (80042c4 <_svfiprintf_r+0x1dc>)
 8004254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004258:	2206      	movs	r2, #6
 800425a:	1c7e      	adds	r6, r7, #1
 800425c:	f7fb ffb8 	bl	80001d0 <memchr>
 8004260:	b188      	cbz	r0, 8004286 <_svfiprintf_r+0x19e>
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <_svfiprintf_r+0x1e0>)
 8004264:	b933      	cbnz	r3, 8004274 <_svfiprintf_r+0x18c>
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	3307      	adds	r3, #7
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	3308      	adds	r3, #8
 8004270:	9303      	str	r3, [sp, #12]
 8004272:	e014      	b.n	800429e <_svfiprintf_r+0x1b6>
 8004274:	ab03      	add	r3, sp, #12
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	462a      	mov	r2, r5
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <_svfiprintf_r+0x1e4>)
 800427c:	a904      	add	r1, sp, #16
 800427e:	4640      	mov	r0, r8
 8004280:	f3af 8000 	nop.w
 8004284:	e007      	b.n	8004296 <_svfiprintf_r+0x1ae>
 8004286:	ab03      	add	r3, sp, #12
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	462a      	mov	r2, r5
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <_svfiprintf_r+0x1e4>)
 800428e:	a904      	add	r1, sp, #16
 8004290:	4640      	mov	r0, r8
 8004292:	f000 f9d9 	bl	8004648 <_printf_i>
 8004296:	f1b0 3fff 	cmp.w	r0, #4294967295
 800429a:	4682      	mov	sl, r0
 800429c:	d003      	beq.n	80042a6 <_svfiprintf_r+0x1be>
 800429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a0:	4453      	add	r3, sl
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	e742      	b.n	800412c <_svfiprintf_r+0x44>
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	065b      	lsls	r3, r3, #25
 80042aa:	d401      	bmi.n	80042b0 <_svfiprintf_r+0x1c8>
 80042ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ae:	e001      	b.n	80042b4 <_svfiprintf_r+0x1cc>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	080057d0 	.word	0x080057d0
 80042c0:	080057d6 	.word	0x080057d6
 80042c4:	080057da 	.word	0x080057da
 80042c8:	00000000 	.word	0x00000000
 80042cc:	08004035 	.word	0x08004035

080042d0 <__sfputc_r>:
 80042d0:	6893      	ldr	r3, [r2, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	b410      	push	{r4}
 80042d8:	6093      	str	r3, [r2, #8]
 80042da:	da09      	bge.n	80042f0 <__sfputc_r+0x20>
 80042dc:	6994      	ldr	r4, [r2, #24]
 80042de:	42a3      	cmp	r3, r4
 80042e0:	db02      	blt.n	80042e8 <__sfputc_r+0x18>
 80042e2:	b2cb      	uxtb	r3, r1
 80042e4:	2b0a      	cmp	r3, #10
 80042e6:	d103      	bne.n	80042f0 <__sfputc_r+0x20>
 80042e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ec:	f7ff bbcc 	b.w	8003a88 <__swbuf_r>
 80042f0:	6813      	ldr	r3, [r2, #0]
 80042f2:	1c58      	adds	r0, r3, #1
 80042f4:	6010      	str	r0, [r2, #0]
 80042f6:	7019      	strb	r1, [r3, #0]
 80042f8:	b2c8      	uxtb	r0, r1
 80042fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <__sfputs_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	4606      	mov	r6, r0
 8004304:	460f      	mov	r7, r1
 8004306:	4614      	mov	r4, r2
 8004308:	18d5      	adds	r5, r2, r3
 800430a:	42ac      	cmp	r4, r5
 800430c:	d008      	beq.n	8004320 <__sfputs_r+0x20>
 800430e:	463a      	mov	r2, r7
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	4630      	mov	r0, r6
 8004316:	f7ff ffdb 	bl	80042d0 <__sfputc_r>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d1f5      	bne.n	800430a <__sfputs_r+0xa>
 800431e:	e000      	b.n	8004322 <__sfputs_r+0x22>
 8004320:	2000      	movs	r0, #0
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004324 <_vfiprintf_r>:
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	b09d      	sub	sp, #116	; 0x74
 800432a:	460c      	mov	r4, r1
 800432c:	4617      	mov	r7, r2
 800432e:	9303      	str	r3, [sp, #12]
 8004330:	4606      	mov	r6, r0
 8004332:	b118      	cbz	r0, 800433c <_vfiprintf_r+0x18>
 8004334:	6983      	ldr	r3, [r0, #24]
 8004336:	b90b      	cbnz	r3, 800433c <_vfiprintf_r+0x18>
 8004338:	f7ff fd6c 	bl	8003e14 <__sinit>
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <_vfiprintf_r+0x218>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d101      	bne.n	8004346 <_vfiprintf_r+0x22>
 8004342:	6874      	ldr	r4, [r6, #4]
 8004344:	e008      	b.n	8004358 <_vfiprintf_r+0x34>
 8004346:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <_vfiprintf_r+0x21c>)
 8004348:	429c      	cmp	r4, r3
 800434a:	d101      	bne.n	8004350 <_vfiprintf_r+0x2c>
 800434c:	68b4      	ldr	r4, [r6, #8]
 800434e:	e003      	b.n	8004358 <_vfiprintf_r+0x34>
 8004350:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <_vfiprintf_r+0x220>)
 8004352:	429c      	cmp	r4, r3
 8004354:	bf08      	it	eq
 8004356:	68f4      	ldreq	r4, [r6, #12]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	0718      	lsls	r0, r3, #28
 800435c:	d50c      	bpl.n	8004378 <_vfiprintf_r+0x54>
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	b153      	cbz	r3, 8004378 <_vfiprintf_r+0x54>
 8004362:	2300      	movs	r3, #0
 8004364:	9309      	str	r3, [sp, #36]	; 0x24
 8004366:	2320      	movs	r3, #32
 8004368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800436c:	2330      	movs	r3, #48	; 0x30
 800436e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004372:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8004548 <_vfiprintf_r+0x224>
 8004376:	e044      	b.n	8004402 <_vfiprintf_r+0xde>
 8004378:	4621      	mov	r1, r4
 800437a:	4630      	mov	r0, r6
 800437c:	f7ff fbd8 	bl	8003b30 <__swsetup_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	d0ee      	beq.n	8004362 <_vfiprintf_r+0x3e>
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	e0d5      	b.n	8004536 <_vfiprintf_r+0x212>
 800438a:	9a03      	ldr	r2, [sp, #12]
 800438c:	1d11      	adds	r1, r2, #4
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	9103      	str	r1, [sp, #12]
 8004392:	2a00      	cmp	r2, #0
 8004394:	f280 808c 	bge.w	80044b0 <_vfiprintf_r+0x18c>
 8004398:	4252      	negs	r2, r2
 800439a:	f043 0002 	orr.w	r0, r3, #2
 800439e:	9207      	str	r2, [sp, #28]
 80043a0:	9004      	str	r0, [sp, #16]
 80043a2:	f898 3000 	ldrb.w	r3, [r8]
 80043a6:	2b2e      	cmp	r3, #46	; 0x2e
 80043a8:	f000 8084 	beq.w	80044b4 <_vfiprintf_r+0x190>
 80043ac:	2203      	movs	r2, #3
 80043ae:	f898 1000 	ldrb.w	r1, [r8]
 80043b2:	4865      	ldr	r0, [pc, #404]	; (8004548 <_vfiprintf_r+0x224>)
 80043b4:	f7fb ff0c 	bl	80001d0 <memchr>
 80043b8:	b148      	cbz	r0, 80043ce <_vfiprintf_r+0xaa>
 80043ba:	2340      	movs	r3, #64	; 0x40
 80043bc:	ebcb 0000 	rsb	r0, fp, r0
 80043c0:	fa03 f000 	lsl.w	r0, r3, r0
 80043c4:	9b04      	ldr	r3, [sp, #16]
 80043c6:	4318      	orrs	r0, r3
 80043c8:	9004      	str	r0, [sp, #16]
 80043ca:	f108 0801 	add.w	r8, r8, #1
 80043ce:	f898 1000 	ldrb.w	r1, [r8]
 80043d2:	485e      	ldr	r0, [pc, #376]	; (800454c <_vfiprintf_r+0x228>)
 80043d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d8:	2206      	movs	r2, #6
 80043da:	f108 0701 	add.w	r7, r8, #1
 80043de:	f7fb fef7 	bl	80001d0 <memchr>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	f000 8095 	beq.w	8004512 <_vfiprintf_r+0x1ee>
 80043e8:	4b59      	ldr	r3, [pc, #356]	; (8004550 <_vfiprintf_r+0x22c>)
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 8088 	bne.w	8004500 <_vfiprintf_r+0x1dc>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	3307      	adds	r3, #7
 80043f4:	f023 0307 	bic.w	r3, r3, #7
 80043f8:	3308      	adds	r3, #8
 80043fa:	9303      	str	r3, [sp, #12]
 80043fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fe:	4453      	add	r3, sl
 8004400:	9309      	str	r3, [sp, #36]	; 0x24
 8004402:	46b8      	mov	r8, r7
 8004404:	4645      	mov	r5, r8
 8004406:	f815 3b01 	ldrb.w	r3, [r5], #1
 800440a:	b91b      	cbnz	r3, 8004414 <_vfiprintf_r+0xf0>
 800440c:	ebb8 0907 	subs.w	r9, r8, r7
 8004410:	d00f      	beq.n	8004432 <_vfiprintf_r+0x10e>
 8004412:	e003      	b.n	800441c <_vfiprintf_r+0xf8>
 8004414:	2b25      	cmp	r3, #37	; 0x25
 8004416:	d0f9      	beq.n	800440c <_vfiprintf_r+0xe8>
 8004418:	46a8      	mov	r8, r5
 800441a:	e7f3      	b.n	8004404 <_vfiprintf_r+0xe0>
 800441c:	464b      	mov	r3, r9
 800441e:	463a      	mov	r2, r7
 8004420:	4621      	mov	r1, r4
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ff6c 	bl	8004300 <__sfputs_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d07f      	beq.n	800452c <_vfiprintf_r+0x208>
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	444b      	add	r3, r9
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	f898 3000 	ldrb.w	r3, [r8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d078      	beq.n	800452c <_vfiprintf_r+0x208>
 800443a:	2300      	movs	r3, #0
 800443c:	f04f 32ff 	mov.w	r2, #4294967295
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	9307      	str	r3, [sp, #28]
 8004444:	9205      	str	r2, [sp, #20]
 8004446:	9306      	str	r3, [sp, #24]
 8004448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800444c:	931a      	str	r3, [sp, #104]	; 0x68
 800444e:	2701      	movs	r7, #1
 8004450:	2205      	movs	r2, #5
 8004452:	7829      	ldrb	r1, [r5, #0]
 8004454:	483f      	ldr	r0, [pc, #252]	; (8004554 <_vfiprintf_r+0x230>)
 8004456:	f7fb febb 	bl	80001d0 <memchr>
 800445a:	f105 0801 	add.w	r8, r5, #1
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	b138      	cbz	r0, 8004472 <_vfiprintf_r+0x14e>
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <_vfiprintf_r+0x230>)
 8004464:	1a80      	subs	r0, r0, r2
 8004466:	fa07 f000 	lsl.w	r0, r7, r0
 800446a:	4318      	orrs	r0, r3
 800446c:	9004      	str	r0, [sp, #16]
 800446e:	4645      	mov	r5, r8
 8004470:	e7ee      	b.n	8004450 <_vfiprintf_r+0x12c>
 8004472:	06d9      	lsls	r1, r3, #27
 8004474:	bf44      	itt	mi
 8004476:	2220      	movmi	r2, #32
 8004478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800447c:	071a      	lsls	r2, r3, #28
 800447e:	bf44      	itt	mi
 8004480:	222b      	movmi	r2, #43	; 0x2b
 8004482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004486:	782a      	ldrb	r2, [r5, #0]
 8004488:	2a2a      	cmp	r2, #42	; 0x2a
 800448a:	f43f af7e 	beq.w	800438a <_vfiprintf_r+0x66>
 800448e:	9a07      	ldr	r2, [sp, #28]
 8004490:	2100      	movs	r1, #0
 8004492:	200a      	movs	r0, #10
 8004494:	46a8      	mov	r8, r5
 8004496:	3501      	adds	r5, #1
 8004498:	f898 3000 	ldrb.w	r3, [r8]
 800449c:	3b30      	subs	r3, #48	; 0x30
 800449e:	2b09      	cmp	r3, #9
 80044a0:	d803      	bhi.n	80044aa <_vfiprintf_r+0x186>
 80044a2:	fb00 3202 	mla	r2, r0, r2, r3
 80044a6:	2101      	movs	r1, #1
 80044a8:	e7f4      	b.n	8004494 <_vfiprintf_r+0x170>
 80044aa:	2900      	cmp	r1, #0
 80044ac:	f43f af79 	beq.w	80043a2 <_vfiprintf_r+0x7e>
 80044b0:	9207      	str	r2, [sp, #28]
 80044b2:	e776      	b.n	80043a2 <_vfiprintf_r+0x7e>
 80044b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80044b8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ba:	d10b      	bne.n	80044d4 <_vfiprintf_r+0x1b0>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	9203      	str	r2, [sp, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bfb8      	it	lt
 80044c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80044cc:	f108 0802 	add.w	r8, r8, #2
 80044d0:	9305      	str	r3, [sp, #20]
 80044d2:	e76b      	b.n	80043ac <_vfiprintf_r+0x88>
 80044d4:	2300      	movs	r3, #0
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	f108 0001 	add.w	r0, r8, #1
 80044dc:	4619      	mov	r1, r3
 80044de:	250a      	movs	r5, #10
 80044e0:	4680      	mov	r8, r0
 80044e2:	3001      	adds	r0, #1
 80044e4:	f898 2000 	ldrb.w	r2, [r8]
 80044e8:	3a30      	subs	r2, #48	; 0x30
 80044ea:	2a09      	cmp	r2, #9
 80044ec:	d803      	bhi.n	80044f6 <_vfiprintf_r+0x1d2>
 80044ee:	fb05 2101 	mla	r1, r5, r1, r2
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7f4      	b.n	80044e0 <_vfiprintf_r+0x1bc>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f43f af58 	beq.w	80043ac <_vfiprintf_r+0x88>
 80044fc:	9105      	str	r1, [sp, #20]
 80044fe:	e755      	b.n	80043ac <_vfiprintf_r+0x88>
 8004500:	ab03      	add	r3, sp, #12
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4622      	mov	r2, r4
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <_vfiprintf_r+0x234>)
 8004508:	a904      	add	r1, sp, #16
 800450a:	4630      	mov	r0, r6
 800450c:	f3af 8000 	nop.w
 8004510:	e007      	b.n	8004522 <_vfiprintf_r+0x1fe>
 8004512:	ab03      	add	r3, sp, #12
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4622      	mov	r2, r4
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <_vfiprintf_r+0x234>)
 800451a:	a904      	add	r1, sp, #16
 800451c:	4630      	mov	r0, r6
 800451e:	f000 f893 	bl	8004648 <_printf_i>
 8004522:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004526:	4682      	mov	sl, r0
 8004528:	f47f af68 	bne.w	80043fc <_vfiprintf_r+0xd8>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	065b      	lsls	r3, r3, #25
 8004530:	f53f af28 	bmi.w	8004384 <_vfiprintf_r+0x60>
 8004534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004536:	b01d      	add	sp, #116	; 0x74
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	08005770 	.word	0x08005770
 8004540:	08005790 	.word	0x08005790
 8004544:	080057b0 	.word	0x080057b0
 8004548:	080057d6 	.word	0x080057d6
 800454c:	080057da 	.word	0x080057da
 8004550:	00000000 	.word	0x00000000
 8004554:	080057d0 	.word	0x080057d0
 8004558:	08004301 	.word	0x08004301

0800455c <_printf_common>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	4691      	mov	r9, r2
 8004562:	461f      	mov	r7, r3
 8004564:	690a      	ldr	r2, [r1, #16]
 8004566:	688b      	ldr	r3, [r1, #8]
 8004568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800456c:	4293      	cmp	r3, r2
 800456e:	bfb8      	it	lt
 8004570:	4613      	movlt	r3, r2
 8004572:	f8c9 3000 	str.w	r3, [r9]
 8004576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457a:	4606      	mov	r6, r0
 800457c:	460c      	mov	r4, r1
 800457e:	b112      	cbz	r2, 8004586 <_printf_common+0x2a>
 8004580:	3301      	adds	r3, #1
 8004582:	f8c9 3000 	str.w	r3, [r9]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004590:	3302      	addmi	r3, #2
 8004592:	f8c9 3000 	strmi.w	r3, [r9]
 8004596:	6825      	ldr	r5, [r4, #0]
 8004598:	f015 0506 	ands.w	r5, r5, #6
 800459c:	d110      	bne.n	80045c0 <_printf_common+0x64>
 800459e:	f104 0a19 	add.w	sl, r4, #25
 80045a2:	e007      	b.n	80045b4 <_printf_common+0x58>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4652      	mov	r2, sl
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d01a      	beq.n	80045e8 <_printf_common+0x8c>
 80045b2:	3501      	adds	r5, #1
 80045b4:	68e3      	ldr	r3, [r4, #12]
 80045b6:	f8d9 2000 	ldr.w	r2, [r9]
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	429d      	cmp	r5, r3
 80045be:	dbf1      	blt.n	80045a4 <_printf_common+0x48>
 80045c0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	3300      	adds	r3, #0
 80045c8:	bf18      	it	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	0692      	lsls	r2, r2, #26
 80045ce:	d50f      	bpl.n	80045f0 <_printf_common+0x94>
 80045d0:	18e1      	adds	r1, r4, r3
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	2030      	movs	r0, #48	; 0x30
 80045d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045da:	4422      	add	r2, r4
 80045dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e4:	3302      	adds	r3, #2
 80045e6:	e003      	b.n	80045f0 <_printf_common+0x94>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f4:	4639      	mov	r1, r7
 80045f6:	4630      	mov	r0, r6
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d0f4      	beq.n	80045e8 <_printf_common+0x8c>
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	f8d9 5000 	ldr.w	r5, [r9]
 8004604:	68e3      	ldr	r3, [r4, #12]
 8004606:	f002 0206 	and.w	r2, r2, #6
 800460a:	2a04      	cmp	r2, #4
 800460c:	bf08      	it	eq
 800460e:	1b5d      	subeq	r5, r3, r5
 8004610:	6922      	ldr	r2, [r4, #16]
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	bf0c      	ite	eq
 8004616:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461a:	2500      	movne	r5, #0
 800461c:	4293      	cmp	r3, r2
 800461e:	bfc4      	itt	gt
 8004620:	1a9b      	subgt	r3, r3, r2
 8004622:	18ed      	addgt	r5, r5, r3
 8004624:	f04f 0900 	mov.w	r9, #0
 8004628:	341a      	adds	r4, #26
 800462a:	454d      	cmp	r5, r9
 800462c:	d009      	beq.n	8004642 <_printf_common+0xe6>
 800462e:	2301      	movs	r3, #1
 8004630:	4622      	mov	r2, r4
 8004632:	4639      	mov	r1, r7
 8004634:	4630      	mov	r0, r6
 8004636:	47c0      	blx	r8
 8004638:	3001      	adds	r0, #1
 800463a:	d0d5      	beq.n	80045e8 <_printf_common+0x8c>
 800463c:	f109 0901 	add.w	r9, r9, #1
 8004640:	e7f3      	b.n	800462a <_printf_common+0xce>
 8004642:	2000      	movs	r0, #0
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004648 <_printf_i>:
 8004648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800464c:	4617      	mov	r7, r2
 800464e:	7e0a      	ldrb	r2, [r1, #24]
 8004650:	b085      	sub	sp, #20
 8004652:	2a6e      	cmp	r2, #110	; 0x6e
 8004654:	4698      	mov	r8, r3
 8004656:	4606      	mov	r6, r0
 8004658:	460c      	mov	r4, r1
 800465a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800465c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004660:	f000 80ae 	beq.w	80047c0 <_printf_i+0x178>
 8004664:	d811      	bhi.n	800468a <_printf_i+0x42>
 8004666:	2a63      	cmp	r2, #99	; 0x63
 8004668:	d022      	beq.n	80046b0 <_printf_i+0x68>
 800466a:	d809      	bhi.n	8004680 <_printf_i+0x38>
 800466c:	2a00      	cmp	r2, #0
 800466e:	f000 80bb 	beq.w	80047e8 <_printf_i+0x1a0>
 8004672:	2a58      	cmp	r2, #88	; 0x58
 8004674:	f040 80ca 	bne.w	800480c <_printf_i+0x1c4>
 8004678:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800467c:	4983      	ldr	r1, [pc, #524]	; (800488c <_printf_i+0x244>)
 800467e:	e055      	b.n	800472c <_printf_i+0xe4>
 8004680:	2a64      	cmp	r2, #100	; 0x64
 8004682:	d01e      	beq.n	80046c2 <_printf_i+0x7a>
 8004684:	2a69      	cmp	r2, #105	; 0x69
 8004686:	d01c      	beq.n	80046c2 <_printf_i+0x7a>
 8004688:	e0c0      	b.n	800480c <_printf_i+0x1c4>
 800468a:	2a73      	cmp	r2, #115	; 0x73
 800468c:	f000 80b0 	beq.w	80047f0 <_printf_i+0x1a8>
 8004690:	d809      	bhi.n	80046a6 <_printf_i+0x5e>
 8004692:	2a6f      	cmp	r2, #111	; 0x6f
 8004694:	d02e      	beq.n	80046f4 <_printf_i+0xac>
 8004696:	2a70      	cmp	r2, #112	; 0x70
 8004698:	f040 80b8 	bne.w	800480c <_printf_i+0x1c4>
 800469c:	680a      	ldr	r2, [r1, #0]
 800469e:	f042 0220 	orr.w	r2, r2, #32
 80046a2:	600a      	str	r2, [r1, #0]
 80046a4:	e03e      	b.n	8004724 <_printf_i+0xdc>
 80046a6:	2a75      	cmp	r2, #117	; 0x75
 80046a8:	d024      	beq.n	80046f4 <_printf_i+0xac>
 80046aa:	2a78      	cmp	r2, #120	; 0x78
 80046ac:	d03a      	beq.n	8004724 <_printf_i+0xdc>
 80046ae:	e0ad      	b.n	800480c <_printf_i+0x1c4>
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80046b6:	1d11      	adds	r1, r2, #4
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c0:	e0a8      	b.n	8004814 <_printf_i+0x1cc>
 80046c2:	6821      	ldr	r1, [r4, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046ca:	d002      	beq.n	80046d2 <_printf_i+0x8a>
 80046cc:	1d11      	adds	r1, r2, #4
 80046ce:	6019      	str	r1, [r3, #0]
 80046d0:	e008      	b.n	80046e4 <_printf_i+0x9c>
 80046d2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046d6:	f102 0104 	add.w	r1, r2, #4
 80046da:	6019      	str	r1, [r3, #0]
 80046dc:	d002      	beq.n	80046e4 <_printf_i+0x9c>
 80046de:	f9b2 3000 	ldrsh.w	r3, [r2]
 80046e2:	e000      	b.n	80046e6 <_printf_i+0x9e>
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	da3c      	bge.n	8004764 <_printf_i+0x11c>
 80046ea:	222d      	movs	r2, #45	; 0x2d
 80046ec:	425b      	negs	r3, r3
 80046ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046f2:	e037      	b.n	8004764 <_printf_i+0x11c>
 80046f4:	6821      	ldr	r1, [r4, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046fc:	d002      	beq.n	8004704 <_printf_i+0xbc>
 80046fe:	1d11      	adds	r1, r2, #4
 8004700:	6019      	str	r1, [r3, #0]
 8004702:	e007      	b.n	8004714 <_printf_i+0xcc>
 8004704:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004708:	f102 0104 	add.w	r1, r2, #4
 800470c:	6019      	str	r1, [r3, #0]
 800470e:	d001      	beq.n	8004714 <_printf_i+0xcc>
 8004710:	8813      	ldrh	r3, [r2, #0]
 8004712:	e000      	b.n	8004716 <_printf_i+0xce>
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	7e22      	ldrb	r2, [r4, #24]
 8004718:	495c      	ldr	r1, [pc, #368]	; (800488c <_printf_i+0x244>)
 800471a:	2a6f      	cmp	r2, #111	; 0x6f
 800471c:	bf14      	ite	ne
 800471e:	220a      	movne	r2, #10
 8004720:	2208      	moveq	r2, #8
 8004722:	e01b      	b.n	800475c <_printf_i+0x114>
 8004724:	2278      	movs	r2, #120	; 0x78
 8004726:	495a      	ldr	r1, [pc, #360]	; (8004890 <_printf_i+0x248>)
 8004728:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004734:	f100 0504 	add.w	r5, r0, #4
 8004738:	601d      	str	r5, [r3, #0]
 800473a:	d103      	bne.n	8004744 <_printf_i+0xfc>
 800473c:	0655      	lsls	r5, r2, #25
 800473e:	d501      	bpl.n	8004744 <_printf_i+0xfc>
 8004740:	8803      	ldrh	r3, [r0, #0]
 8004742:	e000      	b.n	8004746 <_printf_i+0xfe>
 8004744:	6803      	ldr	r3, [r0, #0]
 8004746:	07d0      	lsls	r0, r2, #31
 8004748:	bf44      	itt	mi
 800474a:	f042 0220 	orrmi.w	r2, r2, #32
 800474e:	6022      	strmi	r2, [r4, #0]
 8004750:	b91b      	cbnz	r3, 800475a <_printf_i+0x112>
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	f022 0220 	bic.w	r2, r2, #32
 8004758:	6022      	str	r2, [r4, #0]
 800475a:	2210      	movs	r2, #16
 800475c:	2000      	movs	r0, #0
 800475e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004762:	e001      	b.n	8004768 <_printf_i+0x120>
 8004764:	4949      	ldr	r1, [pc, #292]	; (800488c <_printf_i+0x244>)
 8004766:	220a      	movs	r2, #10
 8004768:	6865      	ldr	r5, [r4, #4]
 800476a:	60a5      	str	r5, [r4, #8]
 800476c:	2d00      	cmp	r5, #0
 800476e:	db08      	blt.n	8004782 <_printf_i+0x13a>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	f020 0004 	bic.w	r0, r0, #4
 8004776:	6020      	str	r0, [r4, #0]
 8004778:	b92b      	cbnz	r3, 8004786 <_printf_i+0x13e>
 800477a:	2d00      	cmp	r5, #0
 800477c:	d17d      	bne.n	800487a <_printf_i+0x232>
 800477e:	4675      	mov	r5, lr
 8004780:	e00c      	b.n	800479c <_printf_i+0x154>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d079      	beq.n	800487a <_printf_i+0x232>
 8004786:	4675      	mov	r5, lr
 8004788:	fbb3 f0f2 	udiv	r0, r3, r2
 800478c:	fb02 3310 	mls	r3, r2, r0, r3
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004796:	4603      	mov	r3, r0
 8004798:	2800      	cmp	r0, #0
 800479a:	d1f5      	bne.n	8004788 <_printf_i+0x140>
 800479c:	2a08      	cmp	r2, #8
 800479e:	d10b      	bne.n	80047b8 <_printf_i+0x170>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	07da      	lsls	r2, r3, #31
 80047a4:	d508      	bpl.n	80047b8 <_printf_i+0x170>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	6862      	ldr	r2, [r4, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bfde      	ittt	le
 80047ae:	2330      	movle	r3, #48	; 0x30
 80047b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047b8:	ebc5 030e 	rsb	r3, r5, lr
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	e02e      	b.n	800481e <_printf_i+0x1d6>
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	6949      	ldr	r1, [r1, #20]
 80047c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80047ca:	d003      	beq.n	80047d4 <_printf_i+0x18c>
 80047cc:	1d10      	adds	r0, r2, #4
 80047ce:	6018      	str	r0, [r3, #0]
 80047d0:	6813      	ldr	r3, [r2, #0]
 80047d2:	e008      	b.n	80047e6 <_printf_i+0x19e>
 80047d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047d8:	f102 0004 	add.w	r0, r2, #4
 80047dc:	6018      	str	r0, [r3, #0]
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	d001      	beq.n	80047e6 <_printf_i+0x19e>
 80047e2:	8019      	strh	r1, [r3, #0]
 80047e4:	e000      	b.n	80047e8 <_printf_i+0x1a0>
 80047e6:	6019      	str	r1, [r3, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	4675      	mov	r5, lr
 80047ee:	e016      	b.n	800481e <_printf_i+0x1d6>
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	1d11      	adds	r1, r2, #4
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	6815      	ldr	r5, [r2, #0]
 80047f8:	6862      	ldr	r2, [r4, #4]
 80047fa:	2100      	movs	r1, #0
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7fb fce7 	bl	80001d0 <memchr>
 8004802:	b108      	cbz	r0, 8004808 <_printf_i+0x1c0>
 8004804:	1b40      	subs	r0, r0, r5
 8004806:	6060      	str	r0, [r4, #4]
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	e004      	b.n	8004816 <_printf_i+0x1ce>
 800480c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004810:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004814:	2301      	movs	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	2300      	movs	r3, #0
 800481a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800481e:	f8cd 8000 	str.w	r8, [sp]
 8004822:	463b      	mov	r3, r7
 8004824:	aa03      	add	r2, sp, #12
 8004826:	4621      	mov	r1, r4
 8004828:	4630      	mov	r0, r6
 800482a:	f7ff fe97 	bl	800455c <_printf_common>
 800482e:	3001      	adds	r0, #1
 8004830:	d102      	bne.n	8004838 <_printf_i+0x1f0>
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	e026      	b.n	8004886 <_printf_i+0x23e>
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	462a      	mov	r2, r5
 800483c:	4639      	mov	r1, r7
 800483e:	4630      	mov	r0, r6
 8004840:	47c0      	blx	r8
 8004842:	3001      	adds	r0, #1
 8004844:	d0f5      	beq.n	8004832 <_printf_i+0x1ea>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	079b      	lsls	r3, r3, #30
 800484a:	d510      	bpl.n	800486e <_printf_i+0x226>
 800484c:	2500      	movs	r5, #0
 800484e:	f104 0919 	add.w	r9, r4, #25
 8004852:	e007      	b.n	8004864 <_printf_i+0x21c>
 8004854:	2301      	movs	r3, #1
 8004856:	464a      	mov	r2, r9
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d0e7      	beq.n	8004832 <_printf_i+0x1ea>
 8004862:	3501      	adds	r5, #1
 8004864:	68e3      	ldr	r3, [r4, #12]
 8004866:	9a03      	ldr	r2, [sp, #12]
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	429d      	cmp	r5, r3
 800486c:	dbf2      	blt.n	8004854 <_printf_i+0x20c>
 800486e:	68e0      	ldr	r0, [r4, #12]
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	4298      	cmp	r0, r3
 8004874:	bfb8      	it	lt
 8004876:	4618      	movlt	r0, r3
 8004878:	e005      	b.n	8004886 <_printf_i+0x23e>
 800487a:	780b      	ldrb	r3, [r1, #0]
 800487c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004884:	e78a      	b.n	800479c <_printf_i+0x154>
 8004886:	b005      	add	sp, #20
 8004888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800488c:	080057e1 	.word	0x080057e1
 8004890:	080057f2 	.word	0x080057f2

08004894 <__svfiscanf_r>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800489c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004b38 <__svfiscanf_r+0x2a4>
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9346      	str	r3, [sp, #280]	; 0x118
 80048a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80048a8:	4b9f      	ldr	r3, [pc, #636]	; (8004b28 <__svfiscanf_r+0x294>)
 80048aa:	93a2      	str	r3, [sp, #648]	; 0x288
 80048ac:	f10d 080c 	add.w	r8, sp, #12
 80048b0:	4b9e      	ldr	r3, [pc, #632]	; (8004b2c <__svfiscanf_r+0x298>)
 80048b2:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8004b30 <__svfiscanf_r+0x29c>
 80048b6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80048ba:	4607      	mov	r7, r0
 80048bc:	460d      	mov	r5, r1
 80048be:	93a3      	str	r3, [sp, #652]	; 0x28c
 80048c0:	46ca      	mov	sl, r9
 80048c2:	7814      	ldrb	r4, [r2, #0]
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	f000 8127 	beq.w	8004b18 <__svfiscanf_r+0x284>
 80048ca:	f8d9 3000 	ldr.w	r3, [r9]
 80048ce:	4423      	add	r3, r4
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80048da:	b1f3      	cbz	r3, 800491a <__svfiscanf_r+0x86>
 80048dc:	686b      	ldr	r3, [r5, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd10      	ble.n	8004904 <__svfiscanf_r+0x70>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	f8da 0000 	ldr.w	r0, [sl]
 80048e8:	7819      	ldrb	r1, [r3, #0]
 80048ea:	4401      	add	r1, r0
 80048ec:	7849      	ldrb	r1, [r1, #1]
 80048ee:	070c      	lsls	r4, r1, #28
 80048f0:	d510      	bpl.n	8004914 <__svfiscanf_r+0x80>
 80048f2:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80048f4:	3101      	adds	r1, #1
 80048f6:	9147      	str	r1, [sp, #284]	; 0x11c
 80048f8:	6869      	ldr	r1, [r5, #4]
 80048fa:	3301      	adds	r3, #1
 80048fc:	3901      	subs	r1, #1
 80048fe:	6069      	str	r1, [r5, #4]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	e7eb      	b.n	80048dc <__svfiscanf_r+0x48>
 8004904:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004906:	9200      	str	r2, [sp, #0]
 8004908:	4629      	mov	r1, r5
 800490a:	4638      	mov	r0, r7
 800490c:	4798      	blx	r3
 800490e:	9a00      	ldr	r2, [sp, #0]
 8004910:	2800      	cmp	r0, #0
 8004912:	d0e6      	beq.n	80048e2 <__svfiscanf_r+0x4e>
 8004914:	1c56      	adds	r6, r2, #1
 8004916:	4632      	mov	r2, r6
 8004918:	e7d3      	b.n	80048c2 <__svfiscanf_r+0x2e>
 800491a:	2c25      	cmp	r4, #37	; 0x25
 800491c:	f102 0601 	add.w	r6, r2, #1
 8004920:	d152      	bne.n	80049c8 <__svfiscanf_r+0x134>
 8004922:	9143      	str	r1, [sp, #268]	; 0x10c
 8004924:	9145      	str	r1, [sp, #276]	; 0x114
 8004926:	7853      	ldrb	r3, [r2, #1]
 8004928:	2b2a      	cmp	r3, #42	; 0x2a
 800492a:	bf02      	ittt	eq
 800492c:	2310      	moveq	r3, #16
 800492e:	1c96      	addeq	r6, r2, #2
 8004930:	9343      	streq	r3, [sp, #268]	; 0x10c
 8004932:	220a      	movs	r2, #10
 8004934:	7831      	ldrb	r1, [r6, #0]
 8004936:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800493a:	2b09      	cmp	r3, #9
 800493c:	4634      	mov	r4, r6
 800493e:	f106 0601 	add.w	r6, r6, #1
 8004942:	d805      	bhi.n	8004950 <__svfiscanf_r+0xbc>
 8004944:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004946:	fb02 1303 	mla	r3, r2, r3, r1
 800494a:	3b30      	subs	r3, #48	; 0x30
 800494c:	9345      	str	r3, [sp, #276]	; 0x114
 800494e:	e7f1      	b.n	8004934 <__svfiscanf_r+0xa0>
 8004950:	2203      	movs	r2, #3
 8004952:	4877      	ldr	r0, [pc, #476]	; (8004b30 <__svfiscanf_r+0x29c>)
 8004954:	f7fb fc3c 	bl	80001d0 <memchr>
 8004958:	b140      	cbz	r0, 800496c <__svfiscanf_r+0xd8>
 800495a:	2301      	movs	r3, #1
 800495c:	ebcb 0000 	rsb	r0, fp, r0
 8004960:	fa03 f000 	lsl.w	r0, r3, r0
 8004964:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004966:	4303      	orrs	r3, r0
 8004968:	9343      	str	r3, [sp, #268]	; 0x10c
 800496a:	4634      	mov	r4, r6
 800496c:	1c66      	adds	r6, r4, #1
 800496e:	7824      	ldrb	r4, [r4, #0]
 8004970:	2c67      	cmp	r4, #103	; 0x67
 8004972:	d816      	bhi.n	80049a2 <__svfiscanf_r+0x10e>
 8004974:	2c65      	cmp	r4, #101	; 0x65
 8004976:	d27f      	bcs.n	8004a78 <__svfiscanf_r+0x1e4>
 8004978:	2c47      	cmp	r4, #71	; 0x47
 800497a:	d807      	bhi.n	800498c <__svfiscanf_r+0xf8>
 800497c:	2c45      	cmp	r4, #69	; 0x45
 800497e:	d27b      	bcs.n	8004a78 <__svfiscanf_r+0x1e4>
 8004980:	2c00      	cmp	r4, #0
 8004982:	f000 80cb 	beq.w	8004b1c <__svfiscanf_r+0x288>
 8004986:	2c25      	cmp	r4, #37	; 0x25
 8004988:	d01e      	beq.n	80049c8 <__svfiscanf_r+0x134>
 800498a:	e077      	b.n	8004a7c <__svfiscanf_r+0x1e8>
 800498c:	2c5b      	cmp	r4, #91	; 0x5b
 800498e:	d051      	beq.n	8004a34 <__svfiscanf_r+0x1a0>
 8004990:	d802      	bhi.n	8004998 <__svfiscanf_r+0x104>
 8004992:	2c58      	cmp	r4, #88	; 0x58
 8004994:	d03e      	beq.n	8004a14 <__svfiscanf_r+0x180>
 8004996:	e071      	b.n	8004a7c <__svfiscanf_r+0x1e8>
 8004998:	2c63      	cmp	r4, #99	; 0x63
 800499a:	d057      	beq.n	8004a4c <__svfiscanf_r+0x1b8>
 800499c:	2c64      	cmp	r4, #100	; 0x64
 800499e:	d03f      	beq.n	8004a20 <__svfiscanf_r+0x18c>
 80049a0:	e06c      	b.n	8004a7c <__svfiscanf_r+0x1e8>
 80049a2:	2c70      	cmp	r4, #112	; 0x70
 80049a4:	d032      	beq.n	8004a0c <__svfiscanf_r+0x178>
 80049a6:	d807      	bhi.n	80049b8 <__svfiscanf_r+0x124>
 80049a8:	2c6e      	cmp	r4, #110	; 0x6e
 80049aa:	d055      	beq.n	8004a58 <__svfiscanf_r+0x1c4>
 80049ac:	d83a      	bhi.n	8004a24 <__svfiscanf_r+0x190>
 80049ae:	2c69      	cmp	r4, #105	; 0x69
 80049b0:	d164      	bne.n	8004a7c <__svfiscanf_r+0x1e8>
 80049b2:	2300      	movs	r3, #0
 80049b4:	9344      	str	r3, [sp, #272]	; 0x110
 80049b6:	e03b      	b.n	8004a30 <__svfiscanf_r+0x19c>
 80049b8:	2c75      	cmp	r4, #117	; 0x75
 80049ba:	d031      	beq.n	8004a20 <__svfiscanf_r+0x18c>
 80049bc:	2c78      	cmp	r4, #120	; 0x78
 80049be:	d029      	beq.n	8004a14 <__svfiscanf_r+0x180>
 80049c0:	2c73      	cmp	r4, #115	; 0x73
 80049c2:	d15b      	bne.n	8004a7c <__svfiscanf_r+0x1e8>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e03f      	b.n	8004a48 <__svfiscanf_r+0x1b4>
 80049c8:	686b      	ldr	r3, [r5, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dd0d      	ble.n	80049ea <__svfiscanf_r+0x156>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	4294      	cmp	r4, r2
 80049d4:	f040 80a0 	bne.w	8004b18 <__svfiscanf_r+0x284>
 80049d8:	3301      	adds	r3, #1
 80049da:	686a      	ldr	r2, [r5, #4]
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80049e0:	3a01      	subs	r2, #1
 80049e2:	3301      	adds	r3, #1
 80049e4:	606a      	str	r2, [r5, #4]
 80049e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80049e8:	e795      	b.n	8004916 <__svfiscanf_r+0x82>
 80049ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	4798      	blx	r3
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d0eb      	beq.n	80049ce <__svfiscanf_r+0x13a>
 80049f6:	9846      	ldr	r0, [sp, #280]	; 0x118
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f000 808f 	beq.w	8004b1c <__svfiscanf_r+0x288>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a04:	bf18      	it	ne
 8004a06:	f04f 30ff 	movne.w	r0, #4294967295
 8004a0a:	e089      	b.n	8004b20 <__svfiscanf_r+0x28c>
 8004a0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a1a:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	e002      	b.n	8004a26 <__svfiscanf_r+0x192>
 8004a20:	230a      	movs	r3, #10
 8004a22:	e000      	b.n	8004a26 <__svfiscanf_r+0x192>
 8004a24:	2308      	movs	r3, #8
 8004a26:	2c6e      	cmp	r4, #110	; 0x6e
 8004a28:	9344      	str	r3, [sp, #272]	; 0x110
 8004a2a:	dd01      	ble.n	8004a30 <__svfiscanf_r+0x19c>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	e00b      	b.n	8004a48 <__svfiscanf_r+0x1b4>
 8004a30:	2303      	movs	r3, #3
 8004a32:	e009      	b.n	8004a48 <__svfiscanf_r+0x1b4>
 8004a34:	4631      	mov	r1, r6
 8004a36:	4640      	mov	r0, r8
 8004a38:	f000 fa90 	bl	8004f5c <__sccl>
 8004a3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a42:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a44:	4606      	mov	r6, r0
 8004a46:	2301      	movs	r3, #1
 8004a48:	9349      	str	r3, [sp, #292]	; 0x124
 8004a4a:	e01b      	b.n	8004a84 <__svfiscanf_r+0x1f0>
 8004a4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	9343      	str	r3, [sp, #268]	; 0x10c
 8004a54:	2300      	movs	r3, #0
 8004a56:	e7f7      	b.n	8004a48 <__svfiscanf_r+0x1b4>
 8004a58:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004a5a:	06d0      	lsls	r0, r2, #27
 8004a5c:	f53f af5b 	bmi.w	8004916 <__svfiscanf_r+0x82>
 8004a60:	f012 0f01 	tst.w	r2, #1
 8004a64:	9a01      	ldr	r2, [sp, #4]
 8004a66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004a68:	f102 0104 	add.w	r1, r2, #4
 8004a6c:	9101      	str	r1, [sp, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	bf14      	ite	ne
 8004a72:	8013      	strhne	r3, [r2, #0]
 8004a74:	6013      	streq	r3, [r2, #0]
 8004a76:	e74e      	b.n	8004916 <__svfiscanf_r+0x82>
 8004a78:	2305      	movs	r3, #5
 8004a7a:	e7e5      	b.n	8004a48 <__svfiscanf_r+0x1b4>
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	9349      	str	r3, [sp, #292]	; 0x124
 8004a80:	230a      	movs	r3, #10
 8004a82:	9344      	str	r3, [sp, #272]	; 0x110
 8004a84:	686b      	ldr	r3, [r5, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dd03      	ble.n	8004a92 <__svfiscanf_r+0x1fe>
 8004a8a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a8c:	0659      	lsls	r1, r3, #25
 8004a8e:	d511      	bpl.n	8004ab4 <__svfiscanf_r+0x220>
 8004a90:	e018      	b.n	8004ac4 <__svfiscanf_r+0x230>
 8004a92:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004a94:	4629      	mov	r1, r5
 8004a96:	4638      	mov	r0, r7
 8004a98:	4798      	blx	r3
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d0f5      	beq.n	8004a8a <__svfiscanf_r+0x1f6>
 8004a9e:	e7aa      	b.n	80049f6 <__svfiscanf_r+0x162>
 8004aa0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004aa2:	3201      	adds	r2, #1
 8004aa4:	9247      	str	r2, [sp, #284]	; 0x11c
 8004aa6:	686a      	ldr	r2, [r5, #4]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	606a      	str	r2, [r5, #4]
 8004aae:	dd13      	ble.n	8004ad8 <__svfiscanf_r+0x244>
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	f8da 1000 	ldr.w	r1, [sl]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	440a      	add	r2, r1
 8004abe:	7852      	ldrb	r2, [r2, #1]
 8004ac0:	0712      	lsls	r2, r2, #28
 8004ac2:	d4ed      	bmi.n	8004aa0 <__svfiscanf_r+0x20c>
 8004ac4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	dc0d      	bgt.n	8004ae6 <__svfiscanf_r+0x252>
 8004aca:	ab01      	add	r3, sp, #4
 8004acc:	462a      	mov	r2, r5
 8004ace:	a943      	add	r1, sp, #268	; 0x10c
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f000 f85b 	bl	8004b8c <_scanf_chars>
 8004ad6:	e019      	b.n	8004b0c <__svfiscanf_r+0x278>
 8004ad8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004ada:	4629      	mov	r1, r5
 8004adc:	4638      	mov	r0, r7
 8004ade:	4798      	blx	r3
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d0e7      	beq.n	8004ab4 <__svfiscanf_r+0x220>
 8004ae4:	e787      	b.n	80049f6 <__svfiscanf_r+0x162>
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	dc06      	bgt.n	8004af8 <__svfiscanf_r+0x264>
 8004aea:	ab01      	add	r3, sp, #4
 8004aec:	462a      	mov	r2, r5
 8004aee:	a943      	add	r1, sp, #268	; 0x10c
 8004af0:	4638      	mov	r0, r7
 8004af2:	f000 f8af 	bl	8004c54 <_scanf_i>
 8004af6:	e009      	b.n	8004b0c <__svfiscanf_r+0x278>
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <__svfiscanf_r+0x2a0>)
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f43f af0b 	beq.w	8004916 <__svfiscanf_r+0x82>
 8004b00:	ab01      	add	r3, sp, #4
 8004b02:	462a      	mov	r2, r5
 8004b04:	a943      	add	r1, sp, #268	; 0x10c
 8004b06:	4638      	mov	r0, r7
 8004b08:	f3af 8000 	nop.w
 8004b0c:	2801      	cmp	r0, #1
 8004b0e:	d003      	beq.n	8004b18 <__svfiscanf_r+0x284>
 8004b10:	2802      	cmp	r0, #2
 8004b12:	f47f af00 	bne.w	8004916 <__svfiscanf_r+0x82>
 8004b16:	e76e      	b.n	80049f6 <__svfiscanf_r+0x162>
 8004b18:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004b1a:	e001      	b.n	8004b20 <__svfiscanf_r+0x28c>
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8004b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b28:	080052c5 	.word	0x080052c5
 8004b2c:	08004e4d 	.word	0x08004e4d
 8004b30:	080057d6 	.word	0x080057d6
 8004b34:	00000000 	.word	0x00000000
 8004b38:	2000006c 	.word	0x2000006c

08004b3c <_vfiscanf_r>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	4616      	mov	r6, r2
 8004b44:	461f      	mov	r7, r3
 8004b46:	4605      	mov	r5, r0
 8004b48:	b118      	cbz	r0, 8004b52 <_vfiscanf_r+0x16>
 8004b4a:	6983      	ldr	r3, [r0, #24]
 8004b4c:	b90b      	cbnz	r3, 8004b52 <_vfiscanf_r+0x16>
 8004b4e:	f7ff f961 	bl	8003e14 <__sinit>
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <_vfiscanf_r+0x44>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	d101      	bne.n	8004b5c <_vfiscanf_r+0x20>
 8004b58:	686c      	ldr	r4, [r5, #4]
 8004b5a:	e008      	b.n	8004b6e <_vfiscanf_r+0x32>
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <_vfiscanf_r+0x48>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d101      	bne.n	8004b66 <_vfiscanf_r+0x2a>
 8004b62:	68ac      	ldr	r4, [r5, #8]
 8004b64:	e003      	b.n	8004b6e <_vfiscanf_r+0x32>
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <_vfiscanf_r+0x4c>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	bf08      	it	eq
 8004b6c:	68ec      	ldreq	r4, [r5, #12]
 8004b6e:	463b      	mov	r3, r7
 8004b70:	4632      	mov	r2, r6
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	f7ff be8b 	b.w	8004894 <__svfiscanf_r>
 8004b7e:	bf00      	nop
 8004b80:	08005770 	.word	0x08005770
 8004b84:	08005790 	.word	0x08005790
 8004b88:	080057b0 	.word	0x080057b0

08004b8c <_scanf_chars>:
 8004b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b90:	4615      	mov	r5, r2
 8004b92:	688a      	ldr	r2, [r1, #8]
 8004b94:	4680      	mov	r8, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b932      	cbnz	r2, 8004ba8 <_scanf_chars+0x1c>
 8004b9a:	698a      	ldr	r2, [r1, #24]
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2201      	moveq	r2, #1
 8004ba2:	f04f 32ff 	movne.w	r2, #4294967295
 8004ba6:	608a      	str	r2, [r1, #8]
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004c50 <_scanf_chars+0xc4>
 8004bae:	06d1      	lsls	r1, r2, #27
 8004bb0:	bf5f      	itttt	pl
 8004bb2:	681a      	ldrpl	r2, [r3, #0]
 8004bb4:	1d11      	addpl	r1, r2, #4
 8004bb6:	6019      	strpl	r1, [r3, #0]
 8004bb8:	6817      	ldrpl	r7, [r2, #0]
 8004bba:	2600      	movs	r6, #0
 8004bbc:	69a0      	ldr	r0, [r4, #24]
 8004bbe:	bb00      	cbnz	r0, 8004c02 <_scanf_chars+0x76>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	06da      	lsls	r2, r3, #27
 8004bc4:	bf5e      	ittt	pl
 8004bc6:	682b      	ldrpl	r3, [r5, #0]
 8004bc8:	781b      	ldrbpl	r3, [r3, #0]
 8004bca:	703b      	strbpl	r3, [r7, #0]
 8004bcc:	682a      	ldr	r2, [r5, #0]
 8004bce:	686b      	ldr	r3, [r5, #4]
 8004bd0:	f102 0201 	add.w	r2, r2, #1
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	68a2      	ldr	r2, [r4, #8]
 8004bd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bdc:	f102 32ff 	add.w	r2, r2, #4294967295
 8004be0:	606b      	str	r3, [r5, #4]
 8004be2:	f106 0601 	add.w	r6, r6, #1
 8004be6:	bf58      	it	pl
 8004be8:	3701      	addpl	r7, #1
 8004bea:	60a2      	str	r2, [r4, #8]
 8004bec:	b1e2      	cbz	r2, 8004c28 <_scanf_chars+0x9c>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dce4      	bgt.n	8004bbc <_scanf_chars+0x30>
 8004bf2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4798      	blx	r3
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d0dd      	beq.n	8004bbc <_scanf_chars+0x30>
 8004c00:	e012      	b.n	8004c28 <_scanf_chars+0x9c>
 8004c02:	2801      	cmp	r0, #1
 8004c04:	d106      	bne.n	8004c14 <_scanf_chars+0x88>
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	5c9b      	ldrb	r3, [r3, r2]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1d6      	bne.n	8004bc0 <_scanf_chars+0x34>
 8004c12:	e019      	b.n	8004c48 <_scanf_chars+0xbc>
 8004c14:	2802      	cmp	r0, #2
 8004c16:	d107      	bne.n	8004c28 <_scanf_chars+0x9c>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	f8d9 2000 	ldr.w	r2, [r9]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4413      	add	r3, r2
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	d5cb      	bpl.n	8004bc0 <_scanf_chars+0x34>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f013 0310 	ands.w	r3, r3, #16
 8004c2e:	d105      	bne.n	8004c3c <_scanf_chars+0xb0>
 8004c30:	68e2      	ldr	r2, [r4, #12]
 8004c32:	3201      	adds	r2, #1
 8004c34:	60e2      	str	r2, [r4, #12]
 8004c36:	69a2      	ldr	r2, [r4, #24]
 8004c38:	b102      	cbz	r2, 8004c3c <_scanf_chars+0xb0>
 8004c3a:	703b      	strb	r3, [r7, #0]
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	441e      	add	r6, r3
 8004c40:	6126      	str	r6, [r4, #16]
 8004c42:	2000      	movs	r0, #0
 8004c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	d1ed      	bne.n	8004c28 <_scanf_chars+0x9c>
 8004c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c50:	2000006c 	.word	0x2000006c

08004c54 <_scanf_i>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	469a      	mov	sl, r3
 8004c5a:	4b73      	ldr	r3, [pc, #460]	; (8004e28 <_scanf_i+0x1d4>)
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	4683      	mov	fp, r0
 8004c60:	4616      	mov	r6, r2
 8004c62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c66:	b087      	sub	sp, #28
 8004c68:	ab03      	add	r3, sp, #12
 8004c6a:	68a7      	ldr	r7, [r4, #8]
 8004c6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c70:	4b6e      	ldr	r3, [pc, #440]	; (8004e2c <_scanf_i+0x1d8>)
 8004c72:	69a1      	ldr	r1, [r4, #24]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <_scanf_i+0x1dc>)
 8004c76:	2903      	cmp	r1, #3
 8004c78:	bf18      	it	ne
 8004c7a:	461a      	movne	r2, r3
 8004c7c:	1e7b      	subs	r3, r7, #1
 8004c7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004c82:	bf84      	itt	hi
 8004c84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c88:	60a3      	strhi	r3, [r4, #8]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	9200      	str	r2, [sp, #0]
 8004c8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004c92:	bf88      	it	hi
 8004c94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c98:	f104 091c 	add.w	r9, r4, #28
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bf8c      	ite	hi
 8004ca0:	197f      	addhi	r7, r7, r5
 8004ca2:	2700      	movls	r7, #0
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	6831      	ldr	r1, [r6, #0]
 8004cae:	ab03      	add	r3, sp, #12
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004cb6:	7809      	ldrb	r1, [r1, #0]
 8004cb8:	f7fb fa8a 	bl	80001d0 <memchr>
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d033      	beq.n	8004d2a <_scanf_i+0xd6>
 8004cc2:	f1b8 0f01 	cmp.w	r8, #1
 8004cc6:	d10b      	bne.n	8004ce0 <_scanf_i+0x8c>
 8004cc8:	6862      	ldr	r2, [r4, #4]
 8004cca:	b92a      	cbnz	r2, 8004cd8 <_scanf_i+0x84>
 8004ccc:	2208      	movs	r2, #8
 8004cce:	6062      	str	r2, [r4, #4]
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	6022      	str	r2, [r4, #0]
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004cde:	e00c      	b.n	8004cfa <_scanf_i+0xa6>
 8004ce0:	f1b8 0f02 	cmp.w	r8, #2
 8004ce4:	d10a      	bne.n	8004cfc <_scanf_i+0xa8>
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004cec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004cf0:	d11b      	bne.n	8004d2a <_scanf_i+0xd6>
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	6061      	str	r1, [r4, #4]
 8004cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfa:	6022      	str	r2, [r4, #0]
 8004cfc:	68a2      	ldr	r2, [r4, #8]
 8004cfe:	1e51      	subs	r1, r2, #1
 8004d00:	60a1      	str	r1, [r4, #8]
 8004d02:	b192      	cbz	r2, 8004d2a <_scanf_i+0xd6>
 8004d04:	6832      	ldr	r2, [r6, #0]
 8004d06:	1c51      	adds	r1, r2, #1
 8004d08:	6031      	str	r1, [r6, #0]
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	1c5d      	adds	r5, r3, #1
 8004d10:	6873      	ldr	r3, [r6, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	6073      	str	r3, [r6, #4]
 8004d18:	dc06      	bgt.n	8004d28 <_scanf_i+0xd4>
 8004d1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4658      	mov	r0, fp
 8004d22:	4798      	blx	r3
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d140      	bne.n	8004daa <_scanf_i+0x156>
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	f1b8 0f03 	cmp.w	r8, #3
 8004d32:	d1ba      	bne.n	8004caa <_scanf_i+0x56>
 8004d34:	6862      	ldr	r2, [r4, #4]
 8004d36:	b90a      	cbnz	r2, 8004d3c <_scanf_i+0xe8>
 8004d38:	220a      	movs	r2, #10
 8004d3a:	6062      	str	r2, [r4, #4]
 8004d3c:	6862      	ldr	r2, [r4, #4]
 8004d3e:	493d      	ldr	r1, [pc, #244]	; (8004e34 <_scanf_i+0x1e0>)
 8004d40:	6960      	ldr	r0, [r4, #20]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	1a89      	subs	r1, r1, r2
 8004d46:	f000 f909 	bl	8004f5c <__sccl>
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	f04f 0800 	mov.w	r8, #0
 8004d50:	461d      	mov	r5, r3
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	b35b      	cbz	r3, 8004dae <_scanf_i+0x15a>
 8004d56:	6831      	ldr	r1, [r6, #0]
 8004d58:	6960      	ldr	r0, [r4, #20]
 8004d5a:	780a      	ldrb	r2, [r1, #0]
 8004d5c:	5c80      	ldrb	r0, [r0, r2]
 8004d5e:	b330      	cbz	r0, 8004dae <_scanf_i+0x15a>
 8004d60:	2a30      	cmp	r2, #48	; 0x30
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	d108      	bne.n	8004d78 <_scanf_i+0x124>
 8004d66:	0510      	lsls	r0, r2, #20
 8004d68:	d506      	bpl.n	8004d78 <_scanf_i+0x124>
 8004d6a:	f108 0801 	add.w	r8, r8, #1
 8004d6e:	b14f      	cbz	r7, 8004d84 <_scanf_i+0x130>
 8004d70:	3301      	adds	r3, #1
 8004d72:	3f01      	subs	r7, #1
 8004d74:	60a3      	str	r3, [r4, #8]
 8004d76:	e005      	b.n	8004d84 <_scanf_i+0x130>
 8004d78:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	780b      	ldrb	r3, [r1, #0]
 8004d80:	702b      	strb	r3, [r5, #0]
 8004d82:	3501      	adds	r5, #1
 8004d84:	6873      	ldr	r3, [r6, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	6073      	str	r3, [r6, #4]
 8004d8c:	dd03      	ble.n	8004d96 <_scanf_i+0x142>
 8004d8e:	6833      	ldr	r3, [r6, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	6033      	str	r3, [r6, #0]
 8004d94:	e005      	b.n	8004da2 <_scanf_i+0x14e>
 8004d96:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4658      	mov	r0, fp
 8004d9e:	4798      	blx	r3
 8004da0:	b928      	cbnz	r0, 8004dae <_scanf_i+0x15a>
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	60a3      	str	r3, [r4, #8]
 8004da8:	e7d3      	b.n	8004d52 <_scanf_i+0xfe>
 8004daa:	f04f 0800 	mov.w	r8, #0
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	05d9      	lsls	r1, r3, #23
 8004db2:	d50c      	bpl.n	8004dce <_scanf_i+0x17a>
 8004db4:	454d      	cmp	r5, r9
 8004db6:	d908      	bls.n	8004dca <_scanf_i+0x176>
 8004db8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4658      	mov	r0, fp
 8004dc4:	4798      	blx	r3
 8004dc6:	1e6f      	subs	r7, r5, #1
 8004dc8:	463d      	mov	r5, r7
 8004dca:	454d      	cmp	r5, r9
 8004dcc:	d027      	beq.n	8004e1e <_scanf_i+0x1ca>
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	f012 0210 	ands.w	r2, r2, #16
 8004dd4:	d11b      	bne.n	8004e0e <_scanf_i+0x1ba>
 8004dd6:	702a      	strb	r2, [r5, #0]
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	9e00      	ldr	r6, [sp, #0]
 8004ddc:	4649      	mov	r1, r9
 8004dde:	4658      	mov	r0, fp
 8004de0:	47b0      	blx	r6
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	f8da 3000 	ldr.w	r3, [sl]
 8004de8:	f012 0f20 	tst.w	r2, #32
 8004dec:	d107      	bne.n	8004dfe <_scanf_i+0x1aa>
 8004dee:	07d2      	lsls	r2, r2, #31
 8004df0:	d505      	bpl.n	8004dfe <_scanf_i+0x1aa>
 8004df2:	1d1a      	adds	r2, r3, #4
 8004df4:	f8ca 2000 	str.w	r2, [sl]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	8018      	strh	r0, [r3, #0]
 8004dfc:	e004      	b.n	8004e08 <_scanf_i+0x1b4>
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	f8ca 2000 	str.w	r2, [sl]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6018      	str	r0, [r3, #0]
 8004e08:	68e3      	ldr	r3, [r4, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60e3      	str	r3, [r4, #12]
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	ebc9 0505 	rsb	r5, r9, r5
 8004e14:	4445      	add	r5, r8
 8004e16:	441d      	add	r5, r3
 8004e18:	6125      	str	r5, [r4, #16]
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e000      	b.n	8004e20 <_scanf_i+0x1cc>
 8004e1e:	2001      	movs	r0, #1
 8004e20:	b007      	add	sp, #28
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	bf00      	nop
 8004e28:	08005564 	.word	0x08005564
 8004e2c:	08005151 	.word	0x08005151
 8004e30:	08005045 	.word	0x08005045
 8004e34:	08005813 	.word	0x08005813

08004e38 <lflush>:
 8004e38:	8983      	ldrh	r3, [r0, #12]
 8004e3a:	f003 0309 	and.w	r3, r3, #9
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d101      	bne.n	8004e46 <lflush+0xe>
 8004e42:	f7fe bf95 	b.w	8003d70 <fflush>
 8004e46:	2000      	movs	r0, #0
 8004e48:	4770      	bx	lr
	...

08004e4c <__srefill_r>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4605      	mov	r5, r0
 8004e52:	b118      	cbz	r0, 8004e5c <__srefill_r+0x10>
 8004e54:	6983      	ldr	r3, [r0, #24]
 8004e56:	b90b      	cbnz	r3, 8004e5c <__srefill_r+0x10>
 8004e58:	f7fe ffdc 	bl	8003e14 <__sinit>
 8004e5c:	4b3a      	ldr	r3, [pc, #232]	; (8004f48 <__srefill_r+0xfc>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d101      	bne.n	8004e66 <__srefill_r+0x1a>
 8004e62:	686c      	ldr	r4, [r5, #4]
 8004e64:	e008      	b.n	8004e78 <__srefill_r+0x2c>
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <__srefill_r+0x100>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d101      	bne.n	8004e70 <__srefill_r+0x24>
 8004e6c:	68ac      	ldr	r4, [r5, #8]
 8004e6e:	e003      	b.n	8004e78 <__srefill_r+0x2c>
 8004e70:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <__srefill_r+0x104>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	bf08      	it	eq
 8004e76:	68ec      	ldreq	r4, [r5, #12]
 8004e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6063      	str	r3, [r4, #4]
 8004e80:	b293      	uxth	r3, r2
 8004e82:	069e      	lsls	r6, r3, #26
 8004e84:	d45b      	bmi.n	8004f3e <__srefill_r+0xf2>
 8004e86:	0758      	lsls	r0, r3, #29
 8004e88:	d41a      	bmi.n	8004ec0 <__srefill_r+0x74>
 8004e8a:	06d9      	lsls	r1, r3, #27
 8004e8c:	d405      	bmi.n	8004e9a <__srefill_r+0x4e>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	81a2      	strh	r2, [r4, #12]
 8004e98:	e051      	b.n	8004f3e <__srefill_r+0xf2>
 8004e9a:	071a      	lsls	r2, r3, #28
 8004e9c:	d50b      	bpl.n	8004eb6 <__srefill_r+0x6a>
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f7fe ff3b 	bl	8003d1c <_fflush_r>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d149      	bne.n	8004f3e <__srefill_r+0xf2>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	60a0      	str	r0, [r4, #8]
 8004eae:	f023 0308 	bic.w	r3, r3, #8
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	61a0      	str	r0, [r4, #24]
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	e010      	b.n	8004ee2 <__srefill_r+0x96>
 8004ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec2:	b171      	cbz	r1, 8004ee2 <__srefill_r+0x96>
 8004ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d002      	beq.n	8004ed2 <__srefill_r+0x86>
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f7fe fc2f 	bl	8003730 <_free_r>
 8004ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ed4:	6063      	str	r3, [r4, #4]
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eda:	b113      	cbz	r3, 8004ee2 <__srefill_r+0x96>
 8004edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee2:	6923      	ldr	r3, [r4, #16]
 8004ee4:	b91b      	cbnz	r3, 8004eee <__srefill_r+0xa2>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7ff f85d 	bl	8003fa8 <__smakebuf_r>
 8004eee:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004ef2:	b2be      	uxth	r6, r7
 8004ef4:	07b3      	lsls	r3, r6, #30
 8004ef6:	d00f      	beq.n	8004f18 <__srefill_r+0xcc>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <__srefill_r+0x108>)
 8004efe:	4916      	ldr	r1, [pc, #88]	; (8004f58 <__srefill_r+0x10c>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f006 0609 	and.w	r6, r6, #9
 8004f06:	f7fe fff1 	bl	8003eec <_fwalk>
 8004f0a:	2e09      	cmp	r6, #9
 8004f0c:	81a7      	strh	r7, [r4, #12]
 8004f0e:	d103      	bne.n	8004f18 <__srefill_r+0xcc>
 8004f10:	4621      	mov	r1, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	f7fe fe7a 	bl	8003c0c <__sflush_r>
 8004f18:	6922      	ldr	r2, [r4, #16]
 8004f1a:	6022      	str	r2, [r4, #0]
 8004f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f1e:	6963      	ldr	r3, [r4, #20]
 8004f20:	6a21      	ldr	r1, [r4, #32]
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b0      	blx	r6
 8004f26:	2800      	cmp	r0, #0
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	dc0b      	bgt.n	8004f44 <__srefill_r+0xf8>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	bf17      	itett	ne
 8004f30:	2200      	movne	r2, #0
 8004f32:	f043 0320 	orreq.w	r3, r3, #32
 8004f36:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004f3a:	6062      	strne	r2, [r4, #4]
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f44:	2000      	movs	r0, #0
 8004f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f48:	08005770 	.word	0x08005770
 8004f4c:	08005790 	.word	0x08005790
 8004f50:	080057b0 	.word	0x080057b0
 8004f54:	0800576c 	.word	0x0800576c
 8004f58:	08004e39 	.word	0x08004e39

08004f5c <__sccl>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	780b      	ldrb	r3, [r1, #0]
 8004f60:	2b5e      	cmp	r3, #94	; 0x5e
 8004f62:	bf13      	iteet	ne
 8004f64:	1c4a      	addne	r2, r1, #1
 8004f66:	1c8a      	addeq	r2, r1, #2
 8004f68:	784b      	ldrbeq	r3, [r1, #1]
 8004f6a:	2100      	movne	r1, #0
 8004f6c:	bf08      	it	eq
 8004f6e:	2101      	moveq	r1, #1
 8004f70:	1e44      	subs	r4, r0, #1
 8004f72:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004f76:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004f7a:	42ac      	cmp	r4, r5
 8004f7c:	d1fb      	bne.n	8004f76 <__sccl+0x1a>
 8004f7e:	b90b      	cbnz	r3, 8004f84 <__sccl+0x28>
 8004f80:	1e50      	subs	r0, r2, #1
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f081 0401 	eor.w	r4, r1, #1
 8004f88:	54c4      	strb	r4, [r0, r3]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	780d      	ldrb	r5, [r1, #0]
 8004f8e:	2d2d      	cmp	r5, #45	; 0x2d
 8004f90:	f101 0201 	add.w	r2, r1, #1
 8004f94:	d006      	beq.n	8004fa4 <__sccl+0x48>
 8004f96:	2d5d      	cmp	r5, #93	; 0x5d
 8004f98:	d00f      	beq.n	8004fba <__sccl+0x5e>
 8004f9a:	b10d      	cbz	r5, 8004fa0 <__sccl+0x44>
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	e7f3      	b.n	8004f88 <__sccl+0x2c>
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	784e      	ldrb	r6, [r1, #1]
 8004fa6:	2e5d      	cmp	r6, #93	; 0x5d
 8004fa8:	d0f8      	beq.n	8004f9c <__sccl+0x40>
 8004faa:	42b3      	cmp	r3, r6
 8004fac:	dcf6      	bgt.n	8004f9c <__sccl+0x40>
 8004fae:	3102      	adds	r1, #2
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	429e      	cmp	r6, r3
 8004fb4:	54c4      	strb	r4, [r0, r3]
 8004fb6:	dcfb      	bgt.n	8004fb0 <__sccl+0x54>
 8004fb8:	e7e8      	b.n	8004f8c <__sccl+0x30>
 8004fba:	4610      	mov	r0, r2
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}

08004fbe <__sread>:
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc6:	f000 fa91 	bl	80054ec <_read_r>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	bfab      	itete	ge
 8004fce:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd0:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd2:	181b      	addge	r3, r3, r0
 8004fd4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fd8:	bfac      	ite	ge
 8004fda:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fdc:	81a3      	strhlt	r3, [r4, #12]
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <__swrite>:
 8004fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe4:	461f      	mov	r7, r3
 8004fe6:	898b      	ldrh	r3, [r1, #12]
 8004fe8:	05db      	lsls	r3, r3, #23
 8004fea:	4605      	mov	r5, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4616      	mov	r6, r2
 8004ff0:	d505      	bpl.n	8004ffe <__swrite+0x1e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffa:	f000 fa19 	bl	8005430 <_lseek_r>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	4632      	mov	r2, r6
 800500c:	463b      	mov	r3, r7
 800500e:	4628      	mov	r0, r5
 8005010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	f000 b9c8 	b.w	80053a8 <_write_r>

08005018 <__sseek>:
 8005018:	b510      	push	{r4, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	f000 fa06 	bl	8005430 <_lseek_r>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	bf15      	itete	ne
 800502a:	6560      	strne	r0, [r4, #84]	; 0x54
 800502c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005030:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005034:	81a3      	strheq	r3, [r4, #12]
 8005036:	bf18      	it	ne
 8005038:	81a3      	strhne	r3, [r4, #12]
 800503a:	bd10      	pop	{r4, pc}

0800503c <__sclose>:
 800503c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005040:	f000 b9c4 	b.w	80053cc <_close_r>

08005044 <_strtol_r>:
 8005044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	4680      	mov	r8, r0
 800504a:	4840      	ldr	r0, [pc, #256]	; (800514c <_strtol_r+0x108>)
 800504c:	f8d0 9000 	ldr.w	r9, [r0]
 8005050:	460f      	mov	r7, r1
 8005052:	463d      	mov	r5, r7
 8005054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005058:	eb09 0004 	add.w	r0, r9, r4
 800505c:	7840      	ldrb	r0, [r0, #1]
 800505e:	f000 0008 	and.w	r0, r0, #8
 8005062:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8005066:	b108      	cbz	r0, 800506c <_strtol_r+0x28>
 8005068:	462f      	mov	r7, r5
 800506a:	e7f2      	b.n	8005052 <_strtol_r+0xe>
 800506c:	2c2d      	cmp	r4, #45	; 0x2d
 800506e:	d103      	bne.n	8005078 <_strtol_r+0x34>
 8005070:	1cbd      	adds	r5, r7, #2
 8005072:	787c      	ldrb	r4, [r7, #1]
 8005074:	2601      	movs	r6, #1
 8005076:	e003      	b.n	8005080 <_strtol_r+0x3c>
 8005078:	2c2b      	cmp	r4, #43	; 0x2b
 800507a:	bf04      	itt	eq
 800507c:	787c      	ldrbeq	r4, [r7, #1]
 800507e:	1cbd      	addeq	r5, r7, #2
 8005080:	b113      	cbz	r3, 8005088 <_strtol_r+0x44>
 8005082:	2b10      	cmp	r3, #16
 8005084:	d10a      	bne.n	800509c <_strtol_r+0x58>
 8005086:	e05b      	b.n	8005140 <_strtol_r+0xfc>
 8005088:	2c30      	cmp	r4, #48	; 0x30
 800508a:	d157      	bne.n	800513c <_strtol_r+0xf8>
 800508c:	7828      	ldrb	r0, [r5, #0]
 800508e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005092:	2858      	cmp	r0, #88	; 0x58
 8005094:	d14d      	bne.n	8005132 <_strtol_r+0xee>
 8005096:	786c      	ldrb	r4, [r5, #1]
 8005098:	2310      	movs	r3, #16
 800509a:	3502      	adds	r5, #2
 800509c:	2e00      	cmp	r6, #0
 800509e:	bf14      	ite	ne
 80050a0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80050a4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80050a8:	2700      	movs	r7, #0
 80050aa:	fbbc faf3 	udiv	sl, ip, r3
 80050ae:	4638      	mov	r0, r7
 80050b0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80050b4:	eb09 0e04 	add.w	lr, r9, r4
 80050b8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80050bc:	f01e 0f04 	tst.w	lr, #4
 80050c0:	d001      	beq.n	80050c6 <_strtol_r+0x82>
 80050c2:	3c30      	subs	r4, #48	; 0x30
 80050c4:	e00b      	b.n	80050de <_strtol_r+0x9a>
 80050c6:	f01e 0e03 	ands.w	lr, lr, #3
 80050ca:	d01b      	beq.n	8005104 <_strtol_r+0xc0>
 80050cc:	f1be 0f01 	cmp.w	lr, #1
 80050d0:	bf0c      	ite	eq
 80050d2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80050d6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80050da:	ebce 0404 	rsb	r4, lr, r4
 80050de:	42a3      	cmp	r3, r4
 80050e0:	dd10      	ble.n	8005104 <_strtol_r+0xc0>
 80050e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80050e6:	d00a      	beq.n	80050fe <_strtol_r+0xba>
 80050e8:	4550      	cmp	r0, sl
 80050ea:	d806      	bhi.n	80050fa <_strtol_r+0xb6>
 80050ec:	d101      	bne.n	80050f2 <_strtol_r+0xae>
 80050ee:	4564      	cmp	r4, ip
 80050f0:	dc03      	bgt.n	80050fa <_strtol_r+0xb6>
 80050f2:	fb03 4000 	mla	r0, r3, r0, r4
 80050f6:	2701      	movs	r7, #1
 80050f8:	e001      	b.n	80050fe <_strtol_r+0xba>
 80050fa:	f04f 37ff 	mov.w	r7, #4294967295
 80050fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005102:	e7d7      	b.n	80050b4 <_strtol_r+0x70>
 8005104:	1c7b      	adds	r3, r7, #1
 8005106:	d10c      	bne.n	8005122 <_strtol_r+0xde>
 8005108:	2e00      	cmp	r6, #0
 800510a:	f04f 0322 	mov.w	r3, #34	; 0x22
 800510e:	bf14      	ite	ne
 8005110:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8005114:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005118:	f8c8 3000 	str.w	r3, [r8]
 800511c:	b92a      	cbnz	r2, 800512a <_strtol_r+0xe6>
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	b106      	cbz	r6, 8005126 <_strtol_r+0xe2>
 8005124:	4240      	negs	r0, r0
 8005126:	b172      	cbz	r2, 8005146 <_strtol_r+0x102>
 8005128:	b107      	cbz	r7, 800512c <_strtol_r+0xe8>
 800512a:	1e69      	subs	r1, r5, #1
 800512c:	6011      	str	r1, [r2, #0]
 800512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005132:	2430      	movs	r4, #48	; 0x30
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1b1      	bne.n	800509c <_strtol_r+0x58>
 8005138:	2308      	movs	r3, #8
 800513a:	e7af      	b.n	800509c <_strtol_r+0x58>
 800513c:	230a      	movs	r3, #10
 800513e:	e7ad      	b.n	800509c <_strtol_r+0x58>
 8005140:	2c30      	cmp	r4, #48	; 0x30
 8005142:	d0a3      	beq.n	800508c <_strtol_r+0x48>
 8005144:	e7aa      	b.n	800509c <_strtol_r+0x58>
 8005146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514a:	bf00      	nop
 800514c:	2000006c 	.word	0x2000006c

08005150 <_strtoul_r>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4680      	mov	r8, r0
 8005156:	483c      	ldr	r0, [pc, #240]	; (8005248 <_strtoul_r+0xf8>)
 8005158:	f8d0 9000 	ldr.w	r9, [r0]
 800515c:	460e      	mov	r6, r1
 800515e:	4635      	mov	r5, r6
 8005160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005164:	eb09 0004 	add.w	r0, r9, r4
 8005168:	7840      	ldrb	r0, [r0, #1]
 800516a:	f000 0008 	and.w	r0, r0, #8
 800516e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8005172:	b108      	cbz	r0, 8005178 <_strtoul_r+0x28>
 8005174:	462e      	mov	r6, r5
 8005176:	e7f2      	b.n	800515e <_strtoul_r+0xe>
 8005178:	2c2d      	cmp	r4, #45	; 0x2d
 800517a:	d103      	bne.n	8005184 <_strtoul_r+0x34>
 800517c:	1cb5      	adds	r5, r6, #2
 800517e:	7874      	ldrb	r4, [r6, #1]
 8005180:	2701      	movs	r7, #1
 8005182:	e003      	b.n	800518c <_strtoul_r+0x3c>
 8005184:	2c2b      	cmp	r4, #43	; 0x2b
 8005186:	bf04      	itt	eq
 8005188:	7874      	ldrbeq	r4, [r6, #1]
 800518a:	1cb5      	addeq	r5, r6, #2
 800518c:	b113      	cbz	r3, 8005194 <_strtoul_r+0x44>
 800518e:	2b10      	cmp	r3, #16
 8005190:	d10a      	bne.n	80051a8 <_strtoul_r+0x58>
 8005192:	e053      	b.n	800523c <_strtoul_r+0xec>
 8005194:	2c30      	cmp	r4, #48	; 0x30
 8005196:	d14f      	bne.n	8005238 <_strtoul_r+0xe8>
 8005198:	7828      	ldrb	r0, [r5, #0]
 800519a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800519e:	2858      	cmp	r0, #88	; 0x58
 80051a0:	d145      	bne.n	800522e <_strtoul_r+0xde>
 80051a2:	786c      	ldrb	r4, [r5, #1]
 80051a4:	2310      	movs	r3, #16
 80051a6:	3502      	adds	r5, #2
 80051a8:	f04f 3cff 	mov.w	ip, #4294967295
 80051ac:	2600      	movs	r6, #0
 80051ae:	fbbc fcf3 	udiv	ip, ip, r3
 80051b2:	fb03 fa0c 	mul.w	sl, r3, ip
 80051b6:	ea6f 0a0a 	mvn.w	sl, sl
 80051ba:	4630      	mov	r0, r6
 80051bc:	eb09 0e04 	add.w	lr, r9, r4
 80051c0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80051c4:	f01e 0f04 	tst.w	lr, #4
 80051c8:	d001      	beq.n	80051ce <_strtoul_r+0x7e>
 80051ca:	3c30      	subs	r4, #48	; 0x30
 80051cc:	e00b      	b.n	80051e6 <_strtoul_r+0x96>
 80051ce:	f01e 0e03 	ands.w	lr, lr, #3
 80051d2:	d01a      	beq.n	800520a <_strtoul_r+0xba>
 80051d4:	f1be 0f01 	cmp.w	lr, #1
 80051d8:	bf0c      	ite	eq
 80051da:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80051de:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80051e2:	ebce 0404 	rsb	r4, lr, r4
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	dd0f      	ble.n	800520a <_strtoul_r+0xba>
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	db08      	blt.n	8005200 <_strtoul_r+0xb0>
 80051ee:	4560      	cmp	r0, ip
 80051f0:	d806      	bhi.n	8005200 <_strtoul_r+0xb0>
 80051f2:	d101      	bne.n	80051f8 <_strtoul_r+0xa8>
 80051f4:	4554      	cmp	r4, sl
 80051f6:	dc03      	bgt.n	8005200 <_strtoul_r+0xb0>
 80051f8:	fb03 4000 	mla	r0, r3, r0, r4
 80051fc:	2601      	movs	r6, #1
 80051fe:	e001      	b.n	8005204 <_strtoul_r+0xb4>
 8005200:	f04f 36ff 	mov.w	r6, #4294967295
 8005204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005208:	e7d8      	b.n	80051bc <_strtoul_r+0x6c>
 800520a:	2e00      	cmp	r6, #0
 800520c:	da07      	bge.n	800521e <_strtoul_r+0xce>
 800520e:	2322      	movs	r3, #34	; 0x22
 8005210:	f8c8 3000 	str.w	r3, [r8]
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	b92a      	cbnz	r2, 8005226 <_strtoul_r+0xd6>
 800521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521e:	b107      	cbz	r7, 8005222 <_strtoul_r+0xd2>
 8005220:	4240      	negs	r0, r0
 8005222:	b172      	cbz	r2, 8005242 <_strtoul_r+0xf2>
 8005224:	b106      	cbz	r6, 8005228 <_strtoul_r+0xd8>
 8005226:	1e69      	subs	r1, r5, #1
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522e:	2430      	movs	r4, #48	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1b9      	bne.n	80051a8 <_strtoul_r+0x58>
 8005234:	2308      	movs	r3, #8
 8005236:	e7b7      	b.n	80051a8 <_strtoul_r+0x58>
 8005238:	230a      	movs	r3, #10
 800523a:	e7b5      	b.n	80051a8 <_strtoul_r+0x58>
 800523c:	2c30      	cmp	r4, #48	; 0x30
 800523e:	d0ab      	beq.n	8005198 <_strtoul_r+0x48>
 8005240:	e7b2      	b.n	80051a8 <_strtoul_r+0x58>
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	bf00      	nop
 8005248:	2000006c 	.word	0x2000006c

0800524c <__submore>:
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005258:	4299      	cmp	r1, r3
 800525a:	d11c      	bne.n	8005296 <__submore+0x4a>
 800525c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005260:	f7fe fab4 	bl	80037cc <_malloc_r>
 8005264:	b918      	cbnz	r0, 800526e <__submore+0x22>
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005272:	63a3      	str	r3, [r4, #56]	; 0x38
 8005274:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005278:	6360      	str	r0, [r4, #52]	; 0x34
 800527a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800527e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005282:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005286:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800528a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800528e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005292:	6020      	str	r0, [r4, #0]
 8005294:	e012      	b.n	80052bc <__submore+0x70>
 8005296:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005298:	0077      	lsls	r7, r6, #1
 800529a:	463a      	mov	r2, r7
 800529c:	f000 f900 	bl	80054a0 <_realloc_r>
 80052a0:	4605      	mov	r5, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0df      	beq.n	8005266 <__submore+0x1a>
 80052a6:	eb00 0806 	add.w	r8, r0, r6
 80052aa:	4601      	mov	r1, r0
 80052ac:	4632      	mov	r2, r6
 80052ae:	4640      	mov	r0, r8
 80052b0:	f000 f8d0 	bl	8005454 <memcpy>
 80052b4:	f8c4 8000 	str.w	r8, [r4]
 80052b8:	6365      	str	r5, [r4, #52]	; 0x34
 80052ba:	63a7      	str	r7, [r4, #56]	; 0x38
 80052bc:	2000      	movs	r0, #0
 80052be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080052c4 <_ungetc_r>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	1c4d      	adds	r5, r1, #1
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	d102      	bne.n	80052d6 <_ungetc_r+0x12>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d6:	b118      	cbz	r0, 80052e0 <_ungetc_r+0x1c>
 80052d8:	6983      	ldr	r3, [r0, #24]
 80052da:	b90b      	cbnz	r3, 80052e0 <_ungetc_r+0x1c>
 80052dc:	f7fe fd9a 	bl	8003e14 <__sinit>
 80052e0:	4b2e      	ldr	r3, [pc, #184]	; (800539c <_ungetc_r+0xd8>)
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d101      	bne.n	80052ea <_ungetc_r+0x26>
 80052e6:	6874      	ldr	r4, [r6, #4]
 80052e8:	e008      	b.n	80052fc <_ungetc_r+0x38>
 80052ea:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <_ungetc_r+0xdc>)
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d101      	bne.n	80052f4 <_ungetc_r+0x30>
 80052f0:	68b4      	ldr	r4, [r6, #8]
 80052f2:	e003      	b.n	80052fc <_ungetc_r+0x38>
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <_ungetc_r+0xe0>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	bf08      	it	eq
 80052fa:	68f4      	ldreq	r4, [r6, #12]
 80052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005300:	f023 0320 	bic.w	r3, r3, #32
 8005304:	81a3      	strh	r3, [r4, #12]
 8005306:	b29b      	uxth	r3, r3
 8005308:	0759      	lsls	r1, r3, #29
 800530a:	d413      	bmi.n	8005334 <_ungetc_r+0x70>
 800530c:	06da      	lsls	r2, r3, #27
 800530e:	d5df      	bpl.n	80052d0 <_ungetc_r+0xc>
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	d50b      	bpl.n	800532c <_ungetc_r+0x68>
 8005314:	4621      	mov	r1, r4
 8005316:	4630      	mov	r0, r6
 8005318:	f7fe fd00 	bl	8003d1c <_fflush_r>
 800531c:	2800      	cmp	r0, #0
 800531e:	d1d7      	bne.n	80052d0 <_ungetc_r+0xc>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	60a0      	str	r0, [r4, #8]
 8005324:	f023 0308 	bic.w	r3, r3, #8
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	61a0      	str	r0, [r4, #24]
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005336:	6862      	ldr	r2, [r4, #4]
 8005338:	b2fd      	uxtb	r5, r7
 800533a:	b18b      	cbz	r3, 8005360 <_ungetc_r+0x9c>
 800533c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800533e:	429a      	cmp	r2, r3
 8005340:	da07      	bge.n	8005352 <_ungetc_r+0x8e>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	6022      	str	r2, [r4, #0]
 8005348:	f803 7c01 	strb.w	r7, [r3, #-1]
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	e020      	b.n	8005394 <_ungetc_r+0xd0>
 8005352:	4621      	mov	r1, r4
 8005354:	4630      	mov	r0, r6
 8005356:	f7ff ff79 	bl	800524c <__submore>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0f1      	beq.n	8005342 <_ungetc_r+0x7e>
 800535e:	e7b7      	b.n	80052d0 <_ungetc_r+0xc>
 8005360:	6921      	ldr	r1, [r4, #16]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	b151      	cbz	r1, 800537c <_ungetc_r+0xb8>
 8005366:	4299      	cmp	r1, r3
 8005368:	d208      	bcs.n	800537c <_ungetc_r+0xb8>
 800536a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800536e:	428d      	cmp	r5, r1
 8005370:	d104      	bne.n	800537c <_ungetc_r+0xb8>
 8005372:	3b01      	subs	r3, #1
 8005374:	3201      	adds	r2, #1
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	6062      	str	r2, [r4, #4]
 800537a:	e00c      	b.n	8005396 <_ungetc_r+0xd2>
 800537c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800537e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005382:	6363      	str	r3, [r4, #52]	; 0x34
 8005384:	2303      	movs	r3, #3
 8005386:	63a3      	str	r3, [r4, #56]	; 0x38
 8005388:	4623      	mov	r3, r4
 800538a:	6422      	str	r2, [r4, #64]	; 0x40
 800538c:	f803 7f46 	strb.w	r7, [r3, #70]!
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	2301      	movs	r3, #1
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	4628      	mov	r0, r5
 8005398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539a:	bf00      	nop
 800539c:	08005770 	.word	0x08005770
 80053a0:	08005790 	.word	0x08005790
 80053a4:	080057b0 	.word	0x080057b0

080053a8 <_write_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4c07      	ldr	r4, [pc, #28]	; (80053c8 <_write_r+0x20>)
 80053ac:	4605      	mov	r5, r0
 80053ae:	4608      	mov	r0, r1
 80053b0:	4611      	mov	r1, r2
 80053b2:	2200      	movs	r2, #0
 80053b4:	6022      	str	r2, [r4, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fe f89c 	bl	80034f4 <_write>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_write_r+0x1e>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_write_r+0x1e>
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200001b4 	.word	0x200001b4

080053cc <_close_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4c06      	ldr	r4, [pc, #24]	; (80053e8 <_close_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4605      	mov	r5, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	f7fe f8c4 	bl	8003564 <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_close_r+0x1a>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_close_r+0x1a>
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	200001b4 	.word	0x200001b4

080053ec <_fstat_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4c07      	ldr	r4, [pc, #28]	; (800540c <_fstat_r+0x20>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4605      	mov	r5, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	f7fe f8bb 	bl	8003574 <_fstat>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d102      	bne.n	8005408 <_fstat_r+0x1c>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	b103      	cbz	r3, 8005408 <_fstat_r+0x1c>
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	bf00      	nop
 800540c:	200001b4 	.word	0x200001b4

08005410 <_isatty_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4c06      	ldr	r4, [pc, #24]	; (800542c <_isatty_r+0x1c>)
 8005414:	2300      	movs	r3, #0
 8005416:	4605      	mov	r5, r0
 8005418:	4608      	mov	r0, r1
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	f7fe f8b2 	bl	8003584 <_isatty>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_isatty_r+0x1a>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	b103      	cbz	r3, 800542a <_isatty_r+0x1a>
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	200001b4 	.word	0x200001b4

08005430 <_lseek_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4c07      	ldr	r4, [pc, #28]	; (8005450 <_lseek_r+0x20>)
 8005434:	4605      	mov	r5, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	6022      	str	r2, [r4, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fe f8a8 	bl	8003594 <_lseek>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_lseek_r+0x1e>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	b103      	cbz	r3, 800544e <_lseek_r+0x1e>
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200001b4 	.word	0x200001b4

08005454 <memcpy>:
 8005454:	b510      	push	{r4, lr}
 8005456:	1e43      	subs	r3, r0, #1
 8005458:	440a      	add	r2, r1
 800545a:	4291      	cmp	r1, r2
 800545c:	d004      	beq.n	8005468 <memcpy+0x14>
 800545e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005466:	e7f8      	b.n	800545a <memcpy+0x6>
 8005468:	bd10      	pop	{r4, pc}

0800546a <memmove>:
 800546a:	4288      	cmp	r0, r1
 800546c:	b510      	push	{r4, lr}
 800546e:	eb01 0302 	add.w	r3, r1, r2
 8005472:	d801      	bhi.n	8005478 <memmove+0xe>
 8005474:	1e42      	subs	r2, r0, #1
 8005476:	e00b      	b.n	8005490 <memmove+0x26>
 8005478:	4298      	cmp	r0, r3
 800547a:	d2fb      	bcs.n	8005474 <memmove+0xa>
 800547c:	1881      	adds	r1, r0, r2
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	42d3      	cmn	r3, r2
 8005482:	d004      	beq.n	800548e <memmove+0x24>
 8005484:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005488:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800548c:	e7f8      	b.n	8005480 <memmove+0x16>
 800548e:	bd10      	pop	{r4, pc}
 8005490:	4299      	cmp	r1, r3
 8005492:	d004      	beq.n	800549e <memmove+0x34>
 8005494:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005498:	f802 4f01 	strb.w	r4, [r2, #1]!
 800549c:	e7f8      	b.n	8005490 <memmove+0x26>
 800549e:	bd10      	pop	{r4, pc}

080054a0 <_realloc_r>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4607      	mov	r7, r0
 80054a4:	4615      	mov	r5, r2
 80054a6:	460e      	mov	r6, r1
 80054a8:	b921      	cbnz	r1, 80054b4 <_realloc_r+0x14>
 80054aa:	4611      	mov	r1, r2
 80054ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054b0:	f7fe b98c 	b.w	80037cc <_malloc_r>
 80054b4:	b91a      	cbnz	r2, 80054be <_realloc_r+0x1e>
 80054b6:	f7fe f93b 	bl	8003730 <_free_r>
 80054ba:	4628      	mov	r0, r5
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054be:	f000 f827 	bl	8005510 <_malloc_usable_size_r>
 80054c2:	4285      	cmp	r5, r0
 80054c4:	d90e      	bls.n	80054e4 <_realloc_r+0x44>
 80054c6:	4629      	mov	r1, r5
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7fe f97f 	bl	80037cc <_malloc_r>
 80054ce:	4604      	mov	r4, r0
 80054d0:	b150      	cbz	r0, 80054e8 <_realloc_r+0x48>
 80054d2:	4631      	mov	r1, r6
 80054d4:	462a      	mov	r2, r5
 80054d6:	f7ff ffbd 	bl	8005454 <memcpy>
 80054da:	4631      	mov	r1, r6
 80054dc:	4638      	mov	r0, r7
 80054de:	f7fe f927 	bl	8003730 <_free_r>
 80054e2:	e001      	b.n	80054e8 <_realloc_r+0x48>
 80054e4:	4630      	mov	r0, r6
 80054e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e8:	4620      	mov	r0, r4
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054ec <_read_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4c07      	ldr	r4, [pc, #28]	; (800550c <_read_r+0x20>)
 80054f0:	4605      	mov	r5, r0
 80054f2:	4608      	mov	r0, r1
 80054f4:	4611      	mov	r1, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fe f852 	bl	80035a4 <_read>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_read_r+0x1e>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	b103      	cbz	r3, 800550a <_read_r+0x1e>
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200001b4 	.word	0x200001b4

08005510 <_malloc_usable_size_r>:
 8005510:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005514:	2800      	cmp	r0, #0
 8005516:	bfbe      	ittt	lt
 8005518:	1809      	addlt	r1, r1, r0
 800551a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800551e:	18c0      	addlt	r0, r0, r3
 8005520:	3804      	subs	r0, #4
 8005522:	4770      	bx	lr

08005524 <_init>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr

08005530 <_fini>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr
